# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import MessageDialogOptions, Placement
from . import UICommandInvokedHandler

Self = typing.TypeVar('Self')

class MessageDialog(winrt.system.Object):
    title: str
    options: MessageDialogOptions
    default_command_index: winrt.system.UInt32
    content: str
    cancel_command_index: winrt.system.UInt32
    commands: typing.Optional[winrt.windows.foundation.collections.IVector[IUICommand]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MessageDialog: ...
    @typing.overload
    def __new__(cls: typing.Type[MessageDialog], content: str) -> MessageDialog:...
    @typing.overload
    def __new__(cls: typing.Type[MessageDialog], content: str, title: str) -> MessageDialog:...
    def show_async(self) -> winrt.windows.foundation.IAsyncOperation[IUICommand]: ...

class PopupMenu(winrt.system.Object):
    commands: typing.Optional[winrt.windows.foundation.collections.IVector[IUICommand]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PopupMenu: ...
    def __new__(cls: typing.Type[PopupMenu]) -> PopupMenu:...
    def show_async(self, invocation_point: winrt.windows.foundation.Point, /) -> winrt.windows.foundation.IAsyncOperation[IUICommand]: ...
    @typing.overload
    def show_for_selection_async(self, selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[IUICommand]: ...
    @typing.overload
    def show_for_selection_async(self, selection: winrt.windows.foundation.Rect, preferred_placement: Placement, /) -> winrt.windows.foundation.IAsyncOperation[IUICommand]: ...

class UICommand(winrt.system.Object):
    label: str
    invoked: typing.Optional[UICommandInvokedHandler]
    id: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UICommand: ...
    @typing.overload
    def __new__(cls: typing.Type[UICommand], label: str) -> UICommand:...
    @typing.overload
    def __new__(cls: typing.Type[UICommand], label: str, action: typing.Optional[UICommandInvokedHandler]) -> UICommand:...
    @typing.overload
    def __new__(cls: typing.Type[UICommand], label: str, action: typing.Optional[UICommandInvokedHandler], command_id: typing.Optional[winrt.system.Object]) -> UICommand:...
    @typing.overload
    def __new__(cls: typing.Type[UICommand]) -> UICommand:...

class UICommandSeparator(winrt.system.Object):
    label: str
    invoked: typing.Optional[UICommandInvokedHandler]
    id: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UICommandSeparator: ...
    def __new__(cls: typing.Type[UICommandSeparator]) -> UICommandSeparator:...

class IUICommand(winrt.system.Object):
    id: typing.Optional[winrt.system.Object]
    invoked: typing.Optional[UICommandInvokedHandler]
    label: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IUICommand: ...

