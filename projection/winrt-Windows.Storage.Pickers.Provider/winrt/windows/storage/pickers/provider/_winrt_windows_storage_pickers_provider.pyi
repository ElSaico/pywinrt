# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage

from . import AddFileResult, FileSelectionMode, SetFileNameResult

Self = typing.TypeVar('Self')

class FileOpenPickerUI(winrt.system.Object):
    title: str
    allowed_file_types: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    selection_mode: FileSelectionMode
    settings_identifier: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileOpenPickerUI: ...
    def add_file(self, id: str, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> AddFileResult: ...
    def can_add_file(self, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.system.Boolean: ...
    def contains_file(self, id: str, /) -> winrt.system.Boolean: ...
    def remove_file(self, id: str, /) -> None: ...
    def add_closing(self, handler: winrt.windows.foundation.TypedEventHandler[FileOpenPickerUI, PickerClosingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_file_removed(self, handler: winrt.windows.foundation.TypedEventHandler[FileOpenPickerUI, FileRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_file_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class FileRemovedEventArgs(winrt.system.Object):
    id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileRemovedEventArgs: ...

class FileSavePickerUI(winrt.system.Object):
    title: str
    allowed_file_types: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    file_name: str
    settings_identifier: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileSavePickerUI: ...
    def try_set_file_name(self, value: str, /) -> SetFileNameResult: ...
    def add_file_name_changed(self, handler: winrt.windows.foundation.TypedEventHandler[FileSavePickerUI, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_file_name_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_target_file_requested(self, handler: winrt.windows.foundation.TypedEventHandler[FileSavePickerUI, TargetFileRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_target_file_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PickerClosingDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerClosingDeferral: ...
    def complete(self) -> None: ...

class PickerClosingEventArgs(winrt.system.Object):
    closing_operation: typing.Optional[PickerClosingOperation]
    is_canceled: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerClosingEventArgs: ...

class PickerClosingOperation(winrt.system.Object):
    deadline: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerClosingOperation: ...
    def get_deferral(self) -> typing.Optional[PickerClosingDeferral]: ...

class TargetFileRequest(winrt.system.Object):
    target_file: typing.Optional[winrt.windows.storage.IStorageFile]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetFileRequest: ...
    def get_deferral(self) -> typing.Optional[TargetFileRequestDeferral]: ...

class TargetFileRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetFileRequestDeferral: ...
    def complete(self) -> None: ...

class TargetFileRequestedEventArgs(winrt.system.Object):
    request: typing.Optional[TargetFileRequest]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetFileRequestedEventArgs: ...

