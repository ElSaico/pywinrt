// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.UI.Composition.Diagnostics.h"


namespace py::cpp::Windows::UI::Composition::Diagnostics
{
    struct module_state
    {
        PyTypeObject* type_CompositionDebugHeatMaps;
        PyTypeObject* type_CompositionDebugSettings;
    };

    // ----- CompositionDebugHeatMaps class --------------------
    static constexpr const char* const type_name_CompositionDebugHeatMaps = "CompositionDebugHeatMaps";

    static PyObject* _new_CompositionDebugHeatMaps(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CompositionDebugHeatMaps);
        return nullptr;
    }

    static void _dealloc_CompositionDebugHeatMaps(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CompositionDebugHeatMaps_Hide(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Diagnostics.CompositionDebugHeatMaps", L"Hide", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);

                self->obj.Hide(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CompositionDebugHeatMaps_ShowMemoryUsage(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Diagnostics.CompositionDebugHeatMaps", L"ShowMemoryUsage", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);

                self->obj.ShowMemoryUsage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CompositionDebugHeatMaps_ShowOverdraw(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Diagnostics.CompositionDebugHeatMaps", L"ShowOverdraw", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Composition::Diagnostics::CompositionDebugOverdrawContentKinds>(args, 1);

                self->obj.ShowOverdraw(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CompositionDebugHeatMaps_ShowRedraw(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Diagnostics.CompositionDebugHeatMaps", L"ShowRedraw", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);

                self->obj.ShowRedraw(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_CompositionDebugHeatMaps(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CompositionDebugHeatMaps(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CompositionDebugHeatMaps[] = {
        { "hide", reinterpret_cast<PyCFunction>(CompositionDebugHeatMaps_Hide), METH_VARARGS, nullptr },
        { "show_memory_usage", reinterpret_cast<PyCFunction>(CompositionDebugHeatMaps_ShowMemoryUsage), METH_VARARGS, nullptr },
        { "show_overdraw", reinterpret_cast<PyCFunction>(CompositionDebugHeatMaps_ShowOverdraw), METH_VARARGS, nullptr },
        { "show_redraw", reinterpret_cast<PyCFunction>(CompositionDebugHeatMaps_ShowRedraw), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_CompositionDebugHeatMaps, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CompositionDebugHeatMaps), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CompositionDebugHeatMaps[] = {
        { }
    };

    static PyType_Slot _type_slots_CompositionDebugHeatMaps[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CompositionDebugHeatMaps) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CompositionDebugHeatMaps) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CompositionDebugHeatMaps) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CompositionDebugHeatMaps) },
        { },
    };

    static PyType_Spec type_spec_CompositionDebugHeatMaps =
    {
        "_winrt_Windows_UI_Composition_Diagnostics.CompositionDebugHeatMaps",
        sizeof(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CompositionDebugHeatMaps
    };

    // ----- CompositionDebugSettings class --------------------
    static constexpr const char* const type_name_CompositionDebugSettings = "CompositionDebugSettings";

    static PyObject* _new_CompositionDebugSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_CompositionDebugSettings);
        return nullptr;
    }

    static void _dealloc_CompositionDebugSettings(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CompositionDebugSettings_TryGetSettings(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Composition.Diagnostics.CompositionDebugSettings", L"TryGetSettings", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Compositor>(args, 0);

                return py::convert(winrt::Windows::UI::Composition::Diagnostics::CompositionDebugSettings::TryGetSettings(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CompositionDebugSettings_get_HeatMaps(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Composition.Diagnostics.CompositionDebugSettings", L"HeatMaps"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HeatMaps());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CompositionDebugSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Composition::Diagnostics::CompositionDebugSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CompositionDebugSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Composition::Diagnostics::CompositionDebugSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CompositionDebugSettings[] = {
        { "try_get_settings", reinterpret_cast<PyCFunction>(CompositionDebugSettings_TryGetSettings), METH_VARARGS | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_CompositionDebugSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CompositionDebugSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CompositionDebugSettings[] = {
        { "heat_maps", reinterpret_cast<getter>(CompositionDebugSettings_get_HeatMaps), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CompositionDebugSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CompositionDebugSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CompositionDebugSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CompositionDebugSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CompositionDebugSettings) },
        { },
    };

    static PyType_Spec type_spec_CompositionDebugSettings =
    {
        "_winrt_Windows_UI_Composition_Diagnostics.CompositionDebugSettings",
        sizeof(py::wrapper::Windows::UI::Composition::Diagnostics::CompositionDebugSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CompositionDebugSettings
    };

    // ----- Windows.UI.Composition.Diagnostics Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Composition::Diagnostics");


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_CompositionDebugHeatMaps);
        Py_VISIT(state->type_CompositionDebugSettings);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_CompositionDebugHeatMaps);
        Py_CLEAR(state->type_CompositionDebugSettings);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_Windows_UI_Composition_Diagnostics",
           module_doc,
           sizeof(module_state),
           nullptr,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::UI::Composition::Diagnostics

PyMODINIT_FUNC PyInit__winrt_Windows_UI_Composition_Diagnostics(void) noexcept
{
    using namespace py::cpp::Windows::UI::Composition::Diagnostics;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    WINRT_ASSERT(state);

    state->type_CompositionDebugHeatMaps = py::register_python_type(module.get(), type_name_CompositionDebugHeatMaps, &type_spec_CompositionDebugHeatMaps, object_bases.get(), nullptr);
    if (!state->type_CompositionDebugHeatMaps)
    {
        return nullptr;
    }

    state->type_CompositionDebugSettings = py::register_python_type(module.get(), type_name_CompositionDebugSettings, &type_spec_CompositionDebugSettings, object_bases.get(), nullptr);
    if (!state->type_CompositionDebugSettings)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Composition::Diagnostics;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Composition::Diagnostics");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CompositionDebugHeatMaps;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Composition::Diagnostics::CompositionDebugSettings>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Composition::Diagnostics;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Composition::Diagnostics");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CompositionDebugSettings;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Composition::Diagnostics::CompositionDebugSettings is not registered");
        return nullptr;
    }

    return python_type;
}
