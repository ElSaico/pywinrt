# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.applicationmodel.datatransfer
import winrt.windows.applicationmodel.datatransfer.dragdrop
import winrt.windows.foundation
import winrt.windows.graphics.imaging

from . import CoreDragUIContentMode

Self = typing.TypeVar('Self')

class CoreDragDropManager(winrt.system.Object):
    are_concurrent_operations_enabled: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreDragDropManager: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[CoreDragDropManager]: ...
    def add_target_requested(self, value: winrt.windows.foundation.TypedEventHandler[CoreDragDropManager, CoreDropOperationTargetRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_target_requested(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreDragInfo(winrt.system.Object):
    data: typing.Optional[winrt.windows.applicationmodel.datatransfer.DataPackageView]
    modifiers: winrt.windows.applicationmodel.datatransfer.dragdrop.DragDropModifiers
    position: winrt.windows.foundation.Point
    allowed_operations: winrt.windows.applicationmodel.datatransfer.DataPackageOperation
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreDragInfo: ...

class CoreDragOperation(winrt.system.Object):
    drag_u_i_content_mode: CoreDragUIContentMode
    data: typing.Optional[winrt.windows.applicationmodel.datatransfer.DataPackage]
    allowed_operations: winrt.windows.applicationmodel.datatransfer.DataPackageOperation
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreDragOperation: ...
    def __new__(cls: typing.Type[CoreDragOperation]) -> CoreDragOperation:...
    @typing.overload
    def set_drag_u_i_content_from_software_bitmap(self, software_bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> None: ...
    @typing.overload
    def set_drag_u_i_content_from_software_bitmap(self, software_bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], anchor_point: winrt.windows.foundation.Point, /) -> None: ...
    def set_pointer_id(self, pointer_id: winrt.system.UInt32, /) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...

class CoreDragUIOverride(winrt.system.Object):
    is_glyph_visible: winrt.system.Boolean
    is_content_visible: winrt.system.Boolean
    is_caption_visible: winrt.system.Boolean
    caption: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreDragUIOverride: ...
    def clear(self) -> None: ...
    @typing.overload
    def set_content_from_software_bitmap(self, software_bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> None: ...
    @typing.overload
    def set_content_from_software_bitmap(self, software_bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], anchor_point: winrt.windows.foundation.Point, /) -> None: ...

class CoreDropOperationTargetRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreDropOperationTargetRequestedEventArgs: ...
    def set_target(self, target: typing.Optional[ICoreDropOperationTarget], /) -> None: ...

class ICoreDropOperationTarget(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreDropOperationTarget: ...
    def drop_async(self, drag_info: typing.Optional[CoreDragInfo], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...
    def enter_async(self, drag_info: typing.Optional[CoreDragInfo], drag_u_i_override: typing.Optional[CoreDragUIOverride], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...
    def leave_async(self, drag_info: typing.Optional[CoreDragInfo], /) -> winrt.windows.foundation.IAsyncAction: ...
    def over_async(self, drag_info: typing.Optional[CoreDragInfo], drag_u_i_override: typing.Optional[CoreDragUIOverride], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackageOperation]: ...

