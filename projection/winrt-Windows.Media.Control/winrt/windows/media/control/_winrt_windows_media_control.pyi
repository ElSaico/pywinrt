# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media
import winrt.windows.storage.streams

from . import GlobalSystemMediaTransportControlsSessionPlaybackStatus

Self = typing.TypeVar('Self')

class CurrentSessionChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CurrentSessionChangedEventArgs: ...

class GlobalSystemMediaTransportControlsSession(winrt.system.Object):
    source_app_user_model_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GlobalSystemMediaTransportControlsSession: ...
    def get_playback_info(self) -> typing.Optional[GlobalSystemMediaTransportControlsSessionPlaybackInfo]: ...
    def get_timeline_properties(self) -> typing.Optional[GlobalSystemMediaTransportControlsSessionTimelineProperties]: ...
    def try_change_auto_repeat_mode_async(self, requested_auto_repeat_mode: winrt.windows.media.MediaPlaybackAutoRepeatMode, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_change_channel_down_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_change_channel_up_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_change_playback_position_async(self, requested_playback_position: winrt.system.Int64, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_change_playback_rate_async(self, requested_playback_rate: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_change_shuffle_active_async(self, requested_shuffle_state: bool, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_fast_forward_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_get_media_properties_async(self) -> winrt.windows.foundation.IAsyncOperation[GlobalSystemMediaTransportControlsSessionMediaProperties]: ...
    def try_pause_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_play_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_record_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_rewind_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_skip_next_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_skip_previous_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_stop_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_toggle_play_pause_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_media_properties_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GlobalSystemMediaTransportControlsSession, MediaPropertiesChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_media_properties_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_playback_info_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GlobalSystemMediaTransportControlsSession, PlaybackInfoChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_playback_info_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_timeline_properties_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GlobalSystemMediaTransportControlsSession, TimelinePropertiesChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_timeline_properties_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class GlobalSystemMediaTransportControlsSessionManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GlobalSystemMediaTransportControlsSessionManager: ...
    def get_current_session(self) -> typing.Optional[GlobalSystemMediaTransportControlsSession]: ...
    def get_sessions(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GlobalSystemMediaTransportControlsSession]]: ...
    @staticmethod
    def request_async() -> winrt.windows.foundation.IAsyncOperation[GlobalSystemMediaTransportControlsSessionManager]: ...
    def add_current_session_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GlobalSystemMediaTransportControlsSessionManager, CurrentSessionChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_current_session_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_sessions_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GlobalSystemMediaTransportControlsSessionManager, SessionsChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_sessions_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class GlobalSystemMediaTransportControlsSessionMediaProperties(winrt.system.Object):
    album_artist: str
    album_title: str
    album_track_count: winrt.system.Int32
    artist: str
    genres: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    playback_type: typing.Optional[typing.Optional[winrt.windows.media.MediaPlaybackType]]
    subtitle: str
    thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    title: str
    track_number: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GlobalSystemMediaTransportControlsSessionMediaProperties: ...

class GlobalSystemMediaTransportControlsSessionPlaybackControls(winrt.system.Object):
    is_channel_down_enabled: bool
    is_channel_up_enabled: bool
    is_fast_forward_enabled: bool
    is_next_enabled: bool
    is_pause_enabled: bool
    is_play_enabled: bool
    is_play_pause_toggle_enabled: bool
    is_playback_position_enabled: bool
    is_playback_rate_enabled: bool
    is_previous_enabled: bool
    is_record_enabled: bool
    is_repeat_enabled: bool
    is_rewind_enabled: bool
    is_shuffle_enabled: bool
    is_stop_enabled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GlobalSystemMediaTransportControlsSessionPlaybackControls: ...

class GlobalSystemMediaTransportControlsSessionPlaybackInfo(winrt.system.Object):
    auto_repeat_mode: typing.Optional[typing.Optional[winrt.windows.media.MediaPlaybackAutoRepeatMode]]
    controls: typing.Optional[GlobalSystemMediaTransportControlsSessionPlaybackControls]
    is_shuffle_active: typing.Optional[typing.Optional[bool]]
    playback_rate: typing.Optional[typing.Optional[winrt.system.Double]]
    playback_status: GlobalSystemMediaTransportControlsSessionPlaybackStatus
    playback_type: typing.Optional[typing.Optional[winrt.windows.media.MediaPlaybackType]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GlobalSystemMediaTransportControlsSessionPlaybackInfo: ...

class GlobalSystemMediaTransportControlsSessionTimelineProperties(winrt.system.Object):
    end_time: datetime.timedelta
    last_updated_time: datetime.datetime
    max_seek_time: datetime.timedelta
    min_seek_time: datetime.timedelta
    position: datetime.timedelta
    start_time: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GlobalSystemMediaTransportControlsSessionTimelineProperties: ...

class MediaPropertiesChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaPropertiesChangedEventArgs: ...

class PlaybackInfoChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlaybackInfoChangedEventArgs: ...

class SessionsChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SessionsChangedEventArgs: ...

class TimelinePropertiesChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimelinePropertiesChangedEventArgs: ...

