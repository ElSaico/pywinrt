# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.storage.streams

from . import MidiMessageType

Self = typing.TypeVar('Self')

class MidiActiveSensingMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiActiveSensingMessage: ...
    def __new__(cls: typing.Type[MidiActiveSensingMessage]) -> MidiActiveSensingMessage:...

class MidiChannelPressureMessage(winrt.system.Object):
    channel: winrt.system.UInt8
    pressure: winrt.system.UInt8
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiChannelPressureMessage: ...
    def __new__(cls: typing.Type[MidiChannelPressureMessage], channel: winrt.system.UInt8, pressure: winrt.system.UInt8) -> MidiChannelPressureMessage:...

class MidiContinueMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiContinueMessage: ...
    def __new__(cls: typing.Type[MidiContinueMessage]) -> MidiContinueMessage:...

class MidiControlChangeMessage(winrt.system.Object):
    channel: winrt.system.UInt8
    control_value: winrt.system.UInt8
    controller: winrt.system.UInt8
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiControlChangeMessage: ...
    def __new__(cls: typing.Type[MidiControlChangeMessage], channel: winrt.system.UInt8, controller: winrt.system.UInt8, control_value: winrt.system.UInt8) -> MidiControlChangeMessage:...

class MidiInPort(winrt.system.Object):
    device_id: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiInPort: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[MidiInPort]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def add_message_received(self, handler: winrt.windows.foundation.TypedEventHandler[MidiInPort, MidiMessageReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_message_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MidiMessageReceivedEventArgs(winrt.system.Object):
    message: typing.Optional[IMidiMessage]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiMessageReceivedEventArgs: ...

class MidiNoteOffMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    channel: winrt.system.UInt8
    note: winrt.system.UInt8
    velocity: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiNoteOffMessage: ...
    def __new__(cls: typing.Type[MidiNoteOffMessage], channel: winrt.system.UInt8, note: winrt.system.UInt8, velocity: winrt.system.UInt8) -> MidiNoteOffMessage:...

class MidiNoteOnMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    channel: winrt.system.UInt8
    note: winrt.system.UInt8
    velocity: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiNoteOnMessage: ...
    def __new__(cls: typing.Type[MidiNoteOnMessage], channel: winrt.system.UInt8, note: winrt.system.UInt8, velocity: winrt.system.UInt8) -> MidiNoteOnMessage:...

class MidiOutPort(winrt.system.Object):
    device_id: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiOutPort: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[IMidiOutPort]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def send_buffer(self, midi_data: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...
    def send_message(self, midi_message: typing.Optional[IMidiMessage], /) -> None: ...

class MidiPitchBendChangeMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    bend: winrt.system.UInt16
    channel: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiPitchBendChangeMessage: ...
    def __new__(cls: typing.Type[MidiPitchBendChangeMessage], channel: winrt.system.UInt8, bend: winrt.system.UInt16) -> MidiPitchBendChangeMessage:...

class MidiPolyphonicKeyPressureMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    channel: winrt.system.UInt8
    note: winrt.system.UInt8
    pressure: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiPolyphonicKeyPressureMessage: ...
    def __new__(cls: typing.Type[MidiPolyphonicKeyPressureMessage], channel: winrt.system.UInt8, note: winrt.system.UInt8, pressure: winrt.system.UInt8) -> MidiPolyphonicKeyPressureMessage:...

class MidiProgramChangeMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    channel: winrt.system.UInt8
    program: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiProgramChangeMessage: ...
    def __new__(cls: typing.Type[MidiProgramChangeMessage], channel: winrt.system.UInt8, program: winrt.system.UInt8) -> MidiProgramChangeMessage:...

class MidiSongPositionPointerMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    beats: winrt.system.UInt16
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiSongPositionPointerMessage: ...
    def __new__(cls: typing.Type[MidiSongPositionPointerMessage], beats: winrt.system.UInt16) -> MidiSongPositionPointerMessage:...

class MidiSongSelectMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    song: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiSongSelectMessage: ...
    def __new__(cls: typing.Type[MidiSongSelectMessage], song: winrt.system.UInt8) -> MidiSongSelectMessage:...

class MidiStartMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiStartMessage: ...
    def __new__(cls: typing.Type[MidiStartMessage]) -> MidiStartMessage:...

class MidiStopMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiStopMessage: ...
    def __new__(cls: typing.Type[MidiStopMessage]) -> MidiStopMessage:...

class MidiSynthesizer(winrt.system.Object):
    device_id: str
    volume: winrt.system.Double
    audio_device: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiSynthesizer: ...
    def close(self) -> None: ...
    @typing.overload
    @staticmethod
    def create_async() -> winrt.windows.foundation.IAsyncOperation[MidiSynthesizer]: ...
    @typing.overload
    @staticmethod
    def create_async(audio_device: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation], /) -> winrt.windows.foundation.IAsyncOperation[MidiSynthesizer]: ...
    @staticmethod
    def is_synthesizer(midi_device: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation], /) -> winrt.system.Boolean: ...
    def send_buffer(self, midi_data: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...
    def send_message(self, midi_message: typing.Optional[IMidiMessage], /) -> None: ...

class MidiSystemExclusiveMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiSystemExclusiveMessage: ...
    def __new__(cls: typing.Type[MidiSystemExclusiveMessage], raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]) -> MidiSystemExclusiveMessage:...

class MidiSystemResetMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiSystemResetMessage: ...
    def __new__(cls: typing.Type[MidiSystemResetMessage]) -> MidiSystemResetMessage:...

class MidiTimeCodeMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    frame_type: winrt.system.UInt8
    values: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiTimeCodeMessage: ...
    def __new__(cls: typing.Type[MidiTimeCodeMessage], frame_type: winrt.system.UInt8, values: winrt.system.UInt8) -> MidiTimeCodeMessage:...

class MidiTimingClockMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiTimingClockMessage: ...
    def __new__(cls: typing.Type[MidiTimingClockMessage]) -> MidiTimingClockMessage:...

class MidiTuneRequestMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MidiTuneRequestMessage: ...
    def __new__(cls: typing.Type[MidiTuneRequestMessage]) -> MidiTuneRequestMessage:...

class IMidiMessage(winrt.system.Object):
    raw_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    timestamp: datetime.timedelta
    type: MidiMessageType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMidiMessage: ...

class IMidiOutPort(winrt.system.Object):
    device_id: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMidiOutPort: ...
    def close(self) -> None: ...
    def send_buffer(self, midi_data: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...
    def send_message(self, midi_message: typing.Optional[IMidiMessage], /) -> None: ...

