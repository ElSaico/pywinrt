# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.storage.streams
import winrt.windows.ui

from . import CaretType, FindOptions, FontStretch, FontStyle, FormatEffect, HorizontalCharacterAlignment, LetterCase, LineSpacingRule, LinkType, MarkerAlignment, MarkerStyle, MarkerType, ParagraphAlignment, ParagraphStyle, PointOptions, RangeGravity, RichEditMathMode, SelectionOptions, SelectionType, TabAlignment, TabLeader, TextDecorations, TextGetOptions, TextRangeUnit, TextScript, TextSetOptions, UnderlineType, VerticalCharacterAlignment

Self = typing.TypeVar('Self')

class FontWeight:
    weight: winrt.system.UInt16
    def __init__(self, weight: winrt.system.UInt16) -> None: ...

class ContentLinkInfo(winrt.system.Object):
    uri: typing.Optional[winrt.windows.foundation.Uri]
    secondary_text: str
    link_content_kind: str
    id: winrt.system.UInt32
    display_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentLinkInfo: ...
    def __new__(cls: typing.Type[ContentLinkInfo]) -> ContentLinkInfo:...

class FontWeights(winrt.system.Object):
    black: typing.ClassVar[FontWeight]
    bold: typing.ClassVar[FontWeight]
    extra_black: typing.ClassVar[FontWeight]
    extra_bold: typing.ClassVar[FontWeight]
    extra_light: typing.ClassVar[FontWeight]
    light: typing.ClassVar[FontWeight]
    medium: typing.ClassVar[FontWeight]
    normal: typing.ClassVar[FontWeight]
    semi_bold: typing.ClassVar[FontWeight]
    semi_light: typing.ClassVar[FontWeight]
    thin: typing.ClassVar[FontWeight]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FontWeights: ...

class RichEditTextDocument(winrt.system.Object):
    undo_limit: winrt.system.UInt32
    default_tab_stop: winrt.system.Single
    caret_type: CaretType
    selection: typing.Optional[ITextSelection]
    ignore_trailing_character_spacing: bool
    alignment_includes_trailing_whitespace: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichEditTextDocument: ...
    def apply_display_updates(self) -> winrt.system.Int32: ...
    def batch_display_updates(self) -> winrt.system.Int32: ...
    def begin_undo_group(self) -> None: ...
    def can_copy(self) -> bool: ...
    def can_paste(self) -> bool: ...
    def can_redo(self) -> bool: ...
    def can_undo(self) -> bool: ...
    def clear_undo_redo_history(self) -> None: ...
    def end_undo_group(self) -> None: ...
    def get_default_character_format(self) -> typing.Optional[ITextCharacterFormat]: ...
    def get_default_paragraph_format(self) -> typing.Optional[ITextParagraphFormat]: ...
    def get_math(self) -> str: ...
    def get_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> typing.Optional[ITextRange]: ...
    def get_range_from_point(self, point: winrt.windows.foundation.Point, options: PointOptions, /) -> typing.Optional[ITextRange]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def load_from_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def redo(self) -> None: ...
    def save_to_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def set_default_character_format(self, value: typing.Optional[ITextCharacterFormat], /) -> None: ...
    def set_default_paragraph_format(self, value: typing.Optional[ITextParagraphFormat], /) -> None: ...
    def set_math(self, value: str, /) -> None: ...
    def set_math_mode(self, mode: RichEditMathMode, /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def undo(self) -> None: ...

class RichEditTextRange(winrt.system.Object):
    content_link_info: typing.Optional[ContentLinkInfo]
    text: str
    start_position: winrt.system.Int32
    paragraph_format: typing.Optional[ITextParagraphFormat]
    link: str
    gravity: RangeGravity
    formatted_text: typing.Optional[ITextRange]
    end_position: winrt.system.Int32
    character_format: typing.Optional[ITextCharacterFormat]
    character: winrt.system.Char16
    length: winrt.system.Int32
    story_length: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichEditTextRange: ...
    def can_paste(self, format: winrt.system.Int32, /) -> bool: ...
    def change_case(self, value: LetterCase, /) -> None: ...
    def collapse(self, value: bool, /) -> None: ...
    def copy(self) -> None: ...
    def cut(self) -> None: ...
    def delete(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def end_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def expand(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def find_text(self, value: str, scan_length: winrt.system.Int32, options: FindOptions, /) -> winrt.system.Int32: ...
    def get_character_utf32(self, offset: winrt.system.Int32, /) -> winrt.system.UInt32: ...
    def get_clone(self) -> typing.Optional[ITextRange]: ...
    def get_index(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def get_point(self, horizontal_align: HorizontalCharacterAlignment, vertical_align: VerticalCharacterAlignment, options: PointOptions, /) -> winrt.windows.foundation.Point: ...
    def get_rect(self, options: PointOptions, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.system.Int32]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def get_text_via_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def in_range(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def in_story(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def insert_image(self, width: winrt.system.Int32, height: winrt.system.Int32, ascent: winrt.system.Int32, vertical_align: VerticalCharacterAlignment, alternate_text: str, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def is_equal(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def match_selection(self) -> None: ...
    def move(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_end(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_start(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def paste(self, format: winrt.system.Int32, /) -> None: ...
    def scroll_into_view(self, value: PointOptions, /) -> None: ...
    def set_index(self, unit: TextRangeUnit, index: winrt.system.Int32, extend: bool, /) -> None: ...
    def set_point(self, point: winrt.windows.foundation.Point, options: PointOptions, extend: bool, /) -> None: ...
    def set_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def set_text_via_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def start_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...

class TextConstants(winrt.system.Object):
    auto_color: typing.ClassVar[winrt.windows.ui.Color]
    max_unit_count: typing.ClassVar[winrt.system.Int32]
    min_unit_count: typing.ClassVar[winrt.system.Int32]
    undefined_color: typing.ClassVar[winrt.windows.ui.Color]
    undefined_float_value: typing.ClassVar[winrt.system.Single]
    undefined_font_stretch: typing.ClassVar[FontStretch]
    undefined_font_style: typing.ClassVar[FontStyle]
    undefined_int32_value: typing.ClassVar[winrt.system.Int32]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextConstants: ...

class ITextCharacterFormat(winrt.system.Object):
    all_caps: FormatEffect
    background_color: winrt.windows.ui.Color
    bold: FormatEffect
    font_stretch: FontStretch
    font_style: FontStyle
    foreground_color: winrt.windows.ui.Color
    hidden: FormatEffect
    italic: FormatEffect
    kerning: winrt.system.Single
    language_tag: str
    link_type: LinkType
    name: str
    outline: FormatEffect
    position: winrt.system.Single
    protected_text: FormatEffect
    size: winrt.system.Single
    small_caps: FormatEffect
    spacing: winrt.system.Single
    strikethrough: FormatEffect
    subscript: FormatEffect
    superscript: FormatEffect
    text_script: TextScript
    underline: UnderlineType
    weight: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextCharacterFormat: ...
    def get_clone(self) -> typing.Optional[ITextCharacterFormat]: ...
    def is_equal(self, format: typing.Optional[ITextCharacterFormat], /) -> bool: ...
    def set_clone(self, value: typing.Optional[ITextCharacterFormat], /) -> None: ...

class ITextDocument(winrt.system.Object):
    caret_type: CaretType
    default_tab_stop: winrt.system.Single
    selection: typing.Optional[ITextSelection]
    undo_limit: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextDocument: ...
    def apply_display_updates(self) -> winrt.system.Int32: ...
    def batch_display_updates(self) -> winrt.system.Int32: ...
    def begin_undo_group(self) -> None: ...
    def can_copy(self) -> bool: ...
    def can_paste(self) -> bool: ...
    def can_redo(self) -> bool: ...
    def can_undo(self) -> bool: ...
    def end_undo_group(self) -> None: ...
    def get_default_character_format(self) -> typing.Optional[ITextCharacterFormat]: ...
    def get_default_paragraph_format(self) -> typing.Optional[ITextParagraphFormat]: ...
    def get_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> typing.Optional[ITextRange]: ...
    def get_range_from_point(self, point: winrt.windows.foundation.Point, options: PointOptions, /) -> typing.Optional[ITextRange]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def load_from_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def redo(self) -> None: ...
    def save_to_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def set_default_character_format(self, value: typing.Optional[ITextCharacterFormat], /) -> None: ...
    def set_default_paragraph_format(self, value: typing.Optional[ITextParagraphFormat], /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def undo(self) -> None: ...

class ITextParagraphFormat(winrt.system.Object):
    alignment: ParagraphAlignment
    first_line_indent: winrt.system.Single
    keep_together: FormatEffect
    keep_with_next: FormatEffect
    left_indent: winrt.system.Single
    line_spacing: winrt.system.Single
    line_spacing_rule: LineSpacingRule
    list_alignment: MarkerAlignment
    list_level_index: winrt.system.Int32
    list_start: winrt.system.Int32
    list_style: MarkerStyle
    list_tab: winrt.system.Single
    list_type: MarkerType
    no_line_number: FormatEffect
    page_break_before: FormatEffect
    right_indent: winrt.system.Single
    right_to_left: FormatEffect
    space_after: winrt.system.Single
    space_before: winrt.system.Single
    style: ParagraphStyle
    tab_count: winrt.system.Int32
    widow_control: FormatEffect
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextParagraphFormat: ...
    def add_tab(self, position: winrt.system.Single, align: TabAlignment, leader: TabLeader, /) -> None: ...
    def clear_all_tabs(self) -> None: ...
    def delete_tab(self, position: winrt.system.Single, /) -> None: ...
    def get_clone(self) -> typing.Optional[ITextParagraphFormat]: ...
    def get_tab(self, index: winrt.system.Int32, /) -> typing.Tuple[winrt.system.Single, TabAlignment, TabLeader]: ...
    def is_equal(self, format: typing.Optional[ITextParagraphFormat], /) -> bool: ...
    def set_clone(self, format: typing.Optional[ITextParagraphFormat], /) -> None: ...
    def set_indents(self, start: winrt.system.Single, left: winrt.system.Single, right: winrt.system.Single, /) -> None: ...
    def set_line_spacing(self, rule: LineSpacingRule, spacing: winrt.system.Single, /) -> None: ...

class ITextRange(winrt.system.Object):
    character: winrt.system.Char16
    character_format: typing.Optional[ITextCharacterFormat]
    end_position: winrt.system.Int32
    formatted_text: typing.Optional[ITextRange]
    gravity: RangeGravity
    length: winrt.system.Int32
    link: str
    paragraph_format: typing.Optional[ITextParagraphFormat]
    start_position: winrt.system.Int32
    story_length: winrt.system.Int32
    text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextRange: ...
    def can_paste(self, format: winrt.system.Int32, /) -> bool: ...
    def change_case(self, value: LetterCase, /) -> None: ...
    def collapse(self, value: bool, /) -> None: ...
    def copy(self) -> None: ...
    def cut(self) -> None: ...
    def delete(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def end_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def expand(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def find_text(self, value: str, scan_length: winrt.system.Int32, options: FindOptions, /) -> winrt.system.Int32: ...
    def get_character_utf32(self, offset: winrt.system.Int32, /) -> winrt.system.UInt32: ...
    def get_clone(self) -> typing.Optional[ITextRange]: ...
    def get_index(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def get_point(self, horizontal_align: HorizontalCharacterAlignment, vertical_align: VerticalCharacterAlignment, options: PointOptions, /) -> winrt.windows.foundation.Point: ...
    def get_rect(self, options: PointOptions, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.system.Int32]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def get_text_via_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def in_range(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def in_story(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def insert_image(self, width: winrt.system.Int32, height: winrt.system.Int32, ascent: winrt.system.Int32, vertical_align: VerticalCharacterAlignment, alternate_text: str, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def is_equal(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def match_selection(self) -> None: ...
    def move(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_end(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_start(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def paste(self, format: winrt.system.Int32, /) -> None: ...
    def scroll_into_view(self, value: PointOptions, /) -> None: ...
    def set_index(self, unit: TextRangeUnit, index: winrt.system.Int32, extend: bool, /) -> None: ...
    def set_point(self, point: winrt.windows.foundation.Point, options: PointOptions, extend: bool, /) -> None: ...
    def set_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def set_text_via_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def start_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...

class ITextSelection(winrt.system.Object):
    options: SelectionOptions
    type: SelectionType
    character: winrt.system.Char16
    character_format: typing.Optional[ITextCharacterFormat]
    end_position: winrt.system.Int32
    formatted_text: typing.Optional[ITextRange]
    gravity: RangeGravity
    length: winrt.system.Int32
    link: str
    paragraph_format: typing.Optional[ITextParagraphFormat]
    start_position: winrt.system.Int32
    story_length: winrt.system.Int32
    text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITextSelection: ...
    def can_paste(self, format: winrt.system.Int32, /) -> bool: ...
    def change_case(self, value: LetterCase, /) -> None: ...
    def collapse(self, value: bool, /) -> None: ...
    def copy(self) -> None: ...
    def cut(self) -> None: ...
    def delete(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def end_key(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def end_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def expand(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def find_text(self, value: str, scan_length: winrt.system.Int32, options: FindOptions, /) -> winrt.system.Int32: ...
    def get_character_utf32(self, offset: winrt.system.Int32, /) -> winrt.system.UInt32: ...
    def get_clone(self) -> typing.Optional[ITextRange]: ...
    def get_index(self, unit: TextRangeUnit, /) -> winrt.system.Int32: ...
    def get_point(self, horizontal_align: HorizontalCharacterAlignment, vertical_align: VerticalCharacterAlignment, options: PointOptions, /) -> winrt.windows.foundation.Point: ...
    def get_rect(self, options: PointOptions, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.system.Int32]: ...
    def get_text(self, options: TextGetOptions, /) -> str: ...
    def get_text_via_stream(self, options: TextGetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def home_key(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def in_range(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def in_story(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def insert_image(self, width: winrt.system.Int32, height: winrt.system.Int32, ascent: winrt.system.Int32, vertical_align: VerticalCharacterAlignment, alternate_text: str, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def is_equal(self, range: typing.Optional[ITextRange], /) -> bool: ...
    def match_selection(self) -> None: ...
    def move(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_down(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def move_end(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_left(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def move_right(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def move_start(self, unit: TextRangeUnit, count: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def move_up(self, unit: TextRangeUnit, count: winrt.system.Int32, extend: bool, /) -> winrt.system.Int32: ...
    def paste(self, format: winrt.system.Int32, /) -> None: ...
    def scroll_into_view(self, value: PointOptions, /) -> None: ...
    def set_index(self, unit: TextRangeUnit, index: winrt.system.Int32, extend: bool, /) -> None: ...
    def set_point(self, point: winrt.windows.foundation.Point, options: PointOptions, extend: bool, /) -> None: ...
    def set_range(self, start_position: winrt.system.Int32, end_position: winrt.system.Int32, /) -> None: ...
    def set_text(self, options: TextSetOptions, value: str, /) -> None: ...
    def set_text_via_stream(self, options: TextSetOptions, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> None: ...
    def start_of(self, unit: TextRangeUnit, extend: bool, /) -> winrt.system.Int32: ...
    def type_text(self, value: str, /) -> None: ...

