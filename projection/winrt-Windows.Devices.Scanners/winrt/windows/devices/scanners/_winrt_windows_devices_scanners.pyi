# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.graphics.printing
import winrt.windows.storage
import winrt.windows.storage.streams

from . import ImageScannerAutoCroppingMode, ImageScannerColorMode, ImageScannerFormat, ImageScannerScanSource

Self = typing.TypeVar('Self')

class ImageScannerResolution:
    dpi_x: winrt.system.Single
    dpi_y: winrt.system.Single
    def __new__(cls: typing.Type[ImageScannerResolution], dpi_x: winrt.system.Single, dpi_y: winrt.system.Single) -> ImageScannerResolution: ...

class ImageScanner(winrt.system.Object):
    auto_configuration: typing.Optional[ImageScannerAutoConfiguration]
    default_scan_source: ImageScannerScanSource
    device_id: str
    feeder_configuration: typing.Optional[ImageScannerFeederConfiguration]
    flatbed_configuration: typing.Optional[ImageScannerFlatbedConfiguration]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageScanner: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ImageScanner]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def is_preview_supported(self, scan_source: ImageScannerScanSource, /) -> winrt.system.Boolean: ...
    def is_scan_source_supported(self, value: ImageScannerScanSource, /) -> winrt.system.Boolean: ...
    def scan_files_to_folder_async(self, scan_source: ImageScannerScanSource, storage_folder: typing.Optional[winrt.windows.storage.StorageFolder], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[ImageScannerScanResult, winrt.system.UInt32]: ...
    def scan_preview_to_stream_async(self, scan_source: ImageScannerScanSource, target_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncOperation[ImageScannerPreviewResult]: ...

class ImageScannerAutoConfiguration(winrt.system.Object):
    format: ImageScannerFormat
    default_format: ImageScannerFormat
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageScannerAutoConfiguration: ...
    def is_format_supported(self, value: ImageScannerFormat, /) -> winrt.system.Boolean: ...

class ImageScannerFeederConfiguration(winrt.system.Object):
    scan_ahead: winrt.system.Boolean
    auto_detect_page_size: winrt.system.Boolean
    duplex: winrt.system.Boolean
    max_number_of_pages: winrt.system.UInt32
    page_orientation: winrt.windows.graphics.printing.PrintOrientation
    page_size: winrt.windows.graphics.printing.PrintMediaSize
    page_size_dimensions: winrt.windows.foundation.Size
    can_scan_duplex: winrt.system.Boolean
    can_scan_ahead: winrt.system.Boolean
    can_auto_detect_page_size: winrt.system.Boolean
    format: ImageScannerFormat
    default_format: ImageScannerFormat
    desired_resolution: ImageScannerResolution
    contrast: winrt.system.Int32
    color_mode: ImageScannerColorMode
    auto_cropping_mode: ImageScannerAutoCroppingMode
    brightness: winrt.system.Int32
    selected_scan_region: winrt.windows.foundation.Rect
    min_brightness: winrt.system.Int32
    min_contrast: winrt.system.Int32
    min_resolution: ImageScannerResolution
    min_scan_area: winrt.windows.foundation.Size
    optical_resolution: ImageScannerResolution
    max_scan_area: winrt.windows.foundation.Size
    max_resolution: ImageScannerResolution
    max_contrast: winrt.system.Int32
    max_brightness: winrt.system.Int32
    default_contrast: winrt.system.Int32
    default_color_mode: ImageScannerColorMode
    default_brightness: winrt.system.Int32
    contrast_step: winrt.system.UInt32
    brightness_step: winrt.system.UInt32
    actual_resolution: ImageScannerResolution
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageScannerFeederConfiguration: ...
    def is_auto_cropping_mode_supported(self, value: ImageScannerAutoCroppingMode, /) -> winrt.system.Boolean: ...
    def is_color_mode_supported(self, value: ImageScannerColorMode, /) -> winrt.system.Boolean: ...
    def is_format_supported(self, value: ImageScannerFormat, /) -> winrt.system.Boolean: ...
    def is_page_size_supported(self, page_size: winrt.windows.graphics.printing.PrintMediaSize, page_orientation: winrt.windows.graphics.printing.PrintOrientation, /) -> winrt.system.Boolean: ...

class ImageScannerFlatbedConfiguration(winrt.system.Object):
    format: ImageScannerFormat
    default_format: ImageScannerFormat
    selected_scan_region: winrt.windows.foundation.Rect
    desired_resolution: ImageScannerResolution
    contrast: winrt.system.Int32
    brightness: winrt.system.Int32
    auto_cropping_mode: ImageScannerAutoCroppingMode
    color_mode: ImageScannerColorMode
    contrast_step: winrt.system.UInt32
    default_brightness: winrt.system.Int32
    default_color_mode: ImageScannerColorMode
    default_contrast: winrt.system.Int32
    actual_resolution: ImageScannerResolution
    max_brightness: winrt.system.Int32
    max_contrast: winrt.system.Int32
    max_resolution: ImageScannerResolution
    max_scan_area: winrt.windows.foundation.Size
    min_brightness: winrt.system.Int32
    brightness_step: winrt.system.UInt32
    min_contrast: winrt.system.Int32
    min_resolution: ImageScannerResolution
    optical_resolution: ImageScannerResolution
    min_scan_area: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageScannerFlatbedConfiguration: ...
    def is_auto_cropping_mode_supported(self, value: ImageScannerAutoCroppingMode, /) -> winrt.system.Boolean: ...
    def is_color_mode_supported(self, value: ImageScannerColorMode, /) -> winrt.system.Boolean: ...
    def is_format_supported(self, value: ImageScannerFormat, /) -> winrt.system.Boolean: ...

class ImageScannerPreviewResult(winrt.system.Object):
    format: ImageScannerFormat
    succeeded: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageScannerPreviewResult: ...

class ImageScannerScanResult(winrt.system.Object):
    scanned_files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageScannerScanResult: ...

class IImageScannerFormatConfiguration(winrt.system.Object):
    default_format: ImageScannerFormat
    format: ImageScannerFormat
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IImageScannerFormatConfiguration: ...
    def is_format_supported(self, value: ImageScannerFormat, /) -> winrt.system.Boolean: ...

class IImageScannerSourceConfiguration(winrt.system.Object):
    actual_resolution: ImageScannerResolution
    auto_cropping_mode: ImageScannerAutoCroppingMode
    brightness: winrt.system.Int32
    brightness_step: winrt.system.UInt32
    color_mode: ImageScannerColorMode
    contrast: winrt.system.Int32
    contrast_step: winrt.system.UInt32
    default_brightness: winrt.system.Int32
    default_color_mode: ImageScannerColorMode
    default_contrast: winrt.system.Int32
    desired_resolution: ImageScannerResolution
    max_brightness: winrt.system.Int32
    max_contrast: winrt.system.Int32
    max_resolution: ImageScannerResolution
    max_scan_area: winrt.windows.foundation.Size
    min_brightness: winrt.system.Int32
    min_contrast: winrt.system.Int32
    min_resolution: ImageScannerResolution
    min_scan_area: winrt.windows.foundation.Size
    optical_resolution: ImageScannerResolution
    selected_scan_region: winrt.windows.foundation.Rect
    default_format: ImageScannerFormat
    format: ImageScannerFormat
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IImageScannerSourceConfiguration: ...
    def is_auto_cropping_mode_supported(self, value: ImageScannerAutoCroppingMode, /) -> winrt.system.Boolean: ...
    def is_color_mode_supported(self, value: ImageScannerColorMode, /) -> winrt.system.Boolean: ...
    def is_format_supported(self, value: ImageScannerFormat, /) -> winrt.system.Boolean: ...

