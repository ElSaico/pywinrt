// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#pragma once

#include "pybase.h"

#if __has_include("py.Windows.Devices.Input.h")
#include "py.Windows.Devices.Input.h"
#endif

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#if __has_include("py.Windows.System.h")
#include "py.Windows.System.h"
#endif

#if __has_include("py.Windows.UI.Core.h")
#include "py.Windows.UI.Core.h"
#endif

#if __has_include("py.Windows.UI.Input.h")
#include "py.Windows.UI.Input.h"
#endif

#if __has_include("py.Windows.UI.Xaml.h")
#include "py.Windows.UI.Xaml.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Controls.h")
#include "py.Windows.UI.Xaml.Controls.h"
#endif

#include <winrt/Windows.Devices.Input.h>
#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.System.h>
#include <winrt/Windows.UI.Core.h>
#include <winrt/Windows.UI.Input.h>
#include <winrt/Windows.UI.Xaml.h>
#include <winrt/Windows.UI.Xaml.Controls.h>

#include <winrt/Windows.UI.Xaml.Input.h>

namespace py::proj::Windows::UI::Xaml::Input
{}

namespace py::impl::Windows::UI::Xaml::Input
{
    struct DoubleTappedEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::DoubleTappedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct HoldingEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::HoldingEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct KeyEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::KeyEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct ManipulationCompletedEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::ManipulationCompletedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct ManipulationDeltaEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::ManipulationDeltaEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct ManipulationInertiaStartingEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::ManipulationInertiaStartingEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct ManipulationStartedEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::ManipulationStartedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct ManipulationStartingEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::ManipulationStartingEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct PointerEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::PointerEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct RightTappedEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::RightTappedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct TappedEventHandler
    {
        static winrt::Windows::UI::Xaml::Input::TappedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };
}

namespace py::wrapper::Windows::UI::Xaml::Input
{
    using AccessKeyDisplayDismissedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs>;
    using AccessKeyDisplayRequestedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs>;
    using AccessKeyInvokedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::AccessKeyInvokedEventArgs>;
    using AccessKeyManager = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::AccessKeyManager>;
    using CanExecuteRequestedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::CanExecuteRequestedEventArgs>;
    using CharacterReceivedRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::CharacterReceivedRoutedEventArgs>;
    using ContextRequestedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ContextRequestedEventArgs>;
    using DoubleTappedRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs>;
    using ExecuteRequestedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ExecuteRequestedEventArgs>;
    using FindNextElementOptions = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::FindNextElementOptions>;
    using FocusManager = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::FocusManager>;
    using FocusManagerGotFocusEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::FocusManagerGotFocusEventArgs>;
    using FocusManagerLostFocusEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::FocusManagerLostFocusEventArgs>;
    using FocusMovementResult = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::FocusMovementResult>;
    using GettingFocusEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::GettingFocusEventArgs>;
    using HoldingRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::HoldingRoutedEventArgs>;
    using InertiaExpansionBehavior = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::InertiaExpansionBehavior>;
    using InertiaRotationBehavior = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::InertiaRotationBehavior>;
    using InertiaTranslationBehavior = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::InertiaTranslationBehavior>;
    using InputScope = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::InputScope>;
    using InputScopeName = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::InputScopeName>;
    using KeyRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs>;
    using KeyboardAccelerator = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::KeyboardAccelerator>;
    using KeyboardAcceleratorInvokedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::KeyboardAcceleratorInvokedEventArgs>;
    using LosingFocusEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::LosingFocusEventArgs>;
    using ManipulationCompletedRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs>;
    using ManipulationDeltaRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs>;
    using ManipulationInertiaStartingRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs>;
    using ManipulationPivot = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ManipulationPivot>;
    using ManipulationStartedRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs>;
    using ManipulationStartingRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs>;
    using NoFocusCandidateFoundEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::NoFocusCandidateFoundEventArgs>;
    using Pointer = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::Pointer>;
    using PointerRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs>;
    using ProcessKeyboardAcceleratorEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ProcessKeyboardAcceleratorEventArgs>;
    using RightTappedRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::RightTappedRoutedEventArgs>;
    using StandardUICommand = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::StandardUICommand>;
    using TappedRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::TappedRoutedEventArgs>;
    using XamlUICommand = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::XamlUICommand>;
    using ICommand = py::winrt_wrapper<winrt::Windows::UI::Xaml::Input::ICommand>;
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::FocusInputDeviceKind> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::FocusNavigationDirection> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::InputScopeNameValue> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::KeyTipPlacementMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::KeyboardAcceleratorPlacementMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::KeyboardNavigationMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::ManipulationModes> = "I";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::StandardUICommandKind> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::XYFocusKeyboardNavigationMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::XYFocusNavigationStrategy> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Input::XYFocusNavigationStrategyOverride> = "i";


    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::FocusInputDeviceKind>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "FocusInputDeviceKind";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::FocusNavigationDirection>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "FocusNavigationDirection";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::InputScopeNameValue>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "InputScopeNameValue";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::KeyTipPlacementMode>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "KeyTipPlacementMode";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::KeyboardAcceleratorPlacementMode>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "KeyboardAcceleratorPlacementMode";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::KeyboardNavigationMode>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "KeyboardNavigationMode";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::ManipulationModes>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "ManipulationModes";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::StandardUICommandKind>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "StandardUICommandKind";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::XYFocusKeyboardNavigationMode>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "XYFocusKeyboardNavigationMode";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::XYFocusNavigationStrategy>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "XYFocusNavigationStrategy";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Input::XYFocusNavigationStrategyOverride>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.input";
        static constexpr const char* type_name = "XYFocusNavigationStrategyOverride";
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::AccessKeyInvokedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::AccessKeyManager>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::CanExecuteRequestedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::CharacterReceivedRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ContextRequestedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ExecuteRequestedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::FindNextElementOptions>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::FocusManager>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::FocusManagerGotFocusEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::FocusManagerLostFocusEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::FocusMovementResult>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::GettingFocusEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::HoldingRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::InertiaExpansionBehavior>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::InertiaRotationBehavior>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::InertiaTranslationBehavior>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::InputScope>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::InputScopeName>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::KeyRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::KeyboardAccelerator>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::KeyboardAcceleratorInvokedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::LosingFocusEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ManipulationPivot>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::NoFocusCandidateFoundEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::Pointer>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ProcessKeyboardAcceleratorEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::RightTappedRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::StandardUICommand>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::TappedRoutedEventArgs>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::XamlUICommand>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::Windows::UI::Xaml::Input::ICommand>
    {
        static PyTypeObject* get_python_type() noexcept;
    };
    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::DoubleTappedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::DoubleTappedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::HoldingEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::HoldingEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::KeyEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::KeyEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::ManipulationCompletedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::ManipulationCompletedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::ManipulationDeltaEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::ManipulationDeltaEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::ManipulationInertiaStartingEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::ManipulationInertiaStartingEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::ManipulationStartedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::ManipulationStartedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::ManipulationStartingEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::ManipulationStartingEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::PointerEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::PointerEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::RightTappedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::RightTappedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Input::TappedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Input::TappedEventHandler;
    };

}
