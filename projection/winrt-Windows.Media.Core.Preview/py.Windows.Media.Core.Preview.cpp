// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.Media.Core.Preview.h"


namespace py::cpp::Windows::Media::Core::Preview
{
    // ----- SoundLevelBroker class --------------------
    static constexpr const char* const type_name_SoundLevelBroker = "SoundLevelBroker";

    static PyObject* _new_SoundLevelBroker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_SoundLevelBroker);
        return nullptr;
    }

    static PyObject* SoundLevelBroker_get_SoundLevel(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Core.Preview.SoundLevelBroker", L"SoundLevel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Media::Core::Preview::SoundLevelBroker::SoundLevel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SoundLevelBroker_add_SoundLevelChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Core.Preview.SoundLevelBroker", L"SoundLevelChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::Media::Core::Preview::SoundLevelBroker::SoundLevelChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SoundLevelBroker_remove_SoundLevelChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Media.Core.Preview.SoundLevelBroker", L"SoundLevelChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Media::Core::Preview::SoundLevelBroker::SoundLevelChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SoundLevelBroker[] = {
        { "add_sound_level_changed", reinterpret_cast<PyCFunction>(SoundLevelBroker_add_SoundLevelChanged), METH_O | METH_STATIC, nullptr },
        { "remove_sound_level_changed", reinterpret_cast<PyCFunction>(SoundLevelBroker_remove_SoundLevelChanged), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SoundLevelBroker[] = {
        { }
    };

    static PyType_Slot _type_slots_SoundLevelBroker[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SoundLevelBroker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SoundLevelBroker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SoundLevelBroker) },
        { },
    };

    static PyType_Spec type_spec_SoundLevelBroker =
    {
        "_winrt_windows_media_core_preview.SoundLevelBroker",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SoundLevelBroker
    };

    static PyGetSetDef getset_SoundLevelBroker_Meta[] = {
        { "sound_level", reinterpret_cast<getter>(SoundLevelBroker_get_SoundLevel), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_SoundLevelBroker_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SoundLevelBroker_Meta) },
        { }
    };

    static PyType_Spec type_spec_SoundLevelBroker_Meta =
    {
        "_winrt_windows_media_core_preview.SoundLevelBroker_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SoundLevelBroker_Meta
    };

    // ----- Windows.Media.Core.Preview Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Media::Core::Preview");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_media_core_preview",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Media::Core::Preview

PyMODINIT_FUNC PyInit__winrt_windows_media_core_preview(void) noexcept
{
    using namespace py::cpp::Windows::Media::Core::Preview;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_SoundLevelBroker_Meta{PyType_FromSpec(&type_spec_SoundLevelBroker_Meta)};
    if (!type_SoundLevelBroker_Meta)
    {
        return nullptr;
    }

    #if PY_VERSION_HEX < 0x03090000
    if (py::register_python_type(module.get(), type_name_SoundLevelBroker, &type_spec_SoundLevelBroker, nullptr, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SoundLevelBroker_Meta.get())) == -1)
    #else
    if (py::register_python_type(module.get(), type_name_SoundLevelBroker, &type_spec_SoundLevelBroker, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SoundLevelBroker_Meta.get())) == -1)
    #endif
    {
        return nullptr;
    }


    return module.detach();
}
