# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import AltitudeReferenceSystem, GeolocationAccessStatus, GeoshapeType, PositionAccuracy, PositionSource, PositionStatus, VisitMonitoringScope, VisitStateChange

Self = typing.TypeVar('Self')

class BasicGeoposition:
    latitude: winrt.system.Double
    longitude: winrt.system.Double
    altitude: winrt.system.Double
    def __new__(cls: typing.Type[BasicGeoposition], latitude: winrt.system.Double, longitude: winrt.system.Double, altitude: winrt.system.Double) -> BasicGeoposition: ...

class CivicAddress(winrt.system.Object):
    city: str
    country: str
    postal_code: str
    state: str
    timestamp: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CivicAddress: ...

class GeoboundingBox(winrt.system.Object):
    center: BasicGeoposition
    max_altitude: winrt.system.Double
    min_altitude: winrt.system.Double
    northwest_corner: BasicGeoposition
    southeast_corner: BasicGeoposition
    altitude_reference_system: AltitudeReferenceSystem
    geoshape_type: GeoshapeType
    spatial_reference_id: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeoboundingBox: ...
    @typing.overload
    def __new__(cls: typing.Type[GeoboundingBox], northwest_corner: BasicGeoposition, southeast_corner: BasicGeoposition) -> GeoboundingBox:...
    @typing.overload
    def __new__(cls: typing.Type[GeoboundingBox], northwest_corner: BasicGeoposition, southeast_corner: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem) -> GeoboundingBox:...
    @typing.overload
    def __new__(cls: typing.Type[GeoboundingBox], northwest_corner: BasicGeoposition, southeast_corner: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> GeoboundingBox:...
    @typing.overload
    @staticmethod
    def try_compute(positions: typing.Iterable[BasicGeoposition], /) -> typing.Optional[GeoboundingBox]: ...
    @typing.overload
    @staticmethod
    def try_compute(positions: typing.Iterable[BasicGeoposition], altitude_ref_system: AltitudeReferenceSystem, /) -> typing.Optional[GeoboundingBox]: ...
    @typing.overload
    @staticmethod
    def try_compute(positions: typing.Iterable[BasicGeoposition], altitude_ref_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32, /) -> typing.Optional[GeoboundingBox]: ...

class Geocircle(winrt.system.Object):
    center: BasicGeoposition
    radius: winrt.system.Double
    altitude_reference_system: AltitudeReferenceSystem
    geoshape_type: GeoshapeType
    spatial_reference_id: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Geocircle: ...
    @typing.overload
    def __new__(cls: typing.Type[Geocircle], position: BasicGeoposition, radius: winrt.system.Double) -> Geocircle:...
    @typing.overload
    def __new__(cls: typing.Type[Geocircle], position: BasicGeoposition, radius: winrt.system.Double, altitude_reference_system: AltitudeReferenceSystem) -> Geocircle:...
    @typing.overload
    def __new__(cls: typing.Type[Geocircle], position: BasicGeoposition, radius: winrt.system.Double, altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> Geocircle:...

class Geocoordinate(winrt.system.Object):
    accuracy: winrt.system.Double
    altitude: typing.Optional[typing.Optional[winrt.system.Double]]
    altitude_accuracy: typing.Optional[typing.Optional[winrt.system.Double]]
    heading: typing.Optional[typing.Optional[winrt.system.Double]]
    latitude: winrt.system.Double
    longitude: winrt.system.Double
    speed: typing.Optional[typing.Optional[winrt.system.Double]]
    timestamp: datetime.datetime
    point: typing.Optional[Geopoint]
    position_source: PositionSource
    satellite_data: typing.Optional[GeocoordinateSatelliteData]
    position_source_timestamp: typing.Optional[typing.Optional[datetime.datetime]]
    is_remote_source: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Geocoordinate: ...

class GeocoordinateSatelliteData(winrt.system.Object):
    horizontal_dilution_of_precision: typing.Optional[typing.Optional[winrt.system.Double]]
    position_dilution_of_precision: typing.Optional[typing.Optional[winrt.system.Double]]
    vertical_dilution_of_precision: typing.Optional[typing.Optional[winrt.system.Double]]
    geometric_dilution_of_precision: typing.Optional[typing.Optional[winrt.system.Double]]
    time_dilution_of_precision: typing.Optional[typing.Optional[winrt.system.Double]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeocoordinateSatelliteData: ...

class Geolocator(winrt.system.Object):
    report_interval: winrt.system.UInt32
    movement_threshold: winrt.system.Double
    desired_accuracy: PositionAccuracy
    location_status: PositionStatus
    desired_accuracy_in_meters: typing.Optional[typing.Optional[winrt.system.UInt32]]
    default_geoposition: typing.ClassVar[typing.Optional[typing.Optional[BasicGeoposition]]]
    is_default_geoposition_recommended: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Geolocator: ...
    def __new__(cls: typing.Type[Geolocator]) -> Geolocator:...
    def allow_fallback_to_consentless_positions(self) -> None: ...
    @typing.overload
    def get_geoposition_async(self) -> winrt.windows.foundation.IAsyncOperation[Geoposition]: ...
    @typing.overload
    def get_geoposition_async(self, maximum_age: datetime.timedelta, timeout: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncOperation[Geoposition]: ...
    @typing.overload
    @staticmethod
    def get_geoposition_history_async(start_time: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Geoposition]]: ...
    @typing.overload
    @staticmethod
    def get_geoposition_history_async(start_time: datetime.datetime, duration: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Geoposition]]: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[GeolocationAccessStatus]: ...
    def add_position_changed(self, handler: winrt.windows.foundation.TypedEventHandler[Geolocator, PositionChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_position_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[Geolocator, StatusChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class Geopath(winrt.system.Object):
    positions: typing.Optional[winrt.windows.foundation.collections.IVectorView[BasicGeoposition]]
    altitude_reference_system: AltitudeReferenceSystem
    geoshape_type: GeoshapeType
    spatial_reference_id: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Geopath: ...
    @typing.overload
    def __new__(cls: typing.Type[Geopath], positions: typing.Iterable[BasicGeoposition]) -> Geopath:...
    @typing.overload
    def __new__(cls: typing.Type[Geopath], positions: typing.Iterable[BasicGeoposition], altitude_reference_system: AltitudeReferenceSystem) -> Geopath:...
    @typing.overload
    def __new__(cls: typing.Type[Geopath], positions: typing.Iterable[BasicGeoposition], altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> Geopath:...

class Geopoint(winrt.system.Object):
    position: BasicGeoposition
    altitude_reference_system: AltitudeReferenceSystem
    geoshape_type: GeoshapeType
    spatial_reference_id: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Geopoint: ...
    @typing.overload
    def __new__(cls: typing.Type[Geopoint], position: BasicGeoposition) -> Geopoint:...
    @typing.overload
    def __new__(cls: typing.Type[Geopoint], position: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem) -> Geopoint:...
    @typing.overload
    def __new__(cls: typing.Type[Geopoint], position: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> Geopoint:...

class Geoposition(winrt.system.Object):
    civic_address: typing.Optional[CivicAddress]
    coordinate: typing.Optional[Geocoordinate]
    venue_data: typing.Optional[VenueData]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Geoposition: ...

class Geovisit(winrt.system.Object):
    position: typing.Optional[Geoposition]
    state_change: VisitStateChange
    timestamp: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Geovisit: ...

class GeovisitMonitor(winrt.system.Object):
    monitoring_scope: VisitMonitoringScope
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeovisitMonitor: ...
    def __new__(cls: typing.Type[GeovisitMonitor]) -> GeovisitMonitor:...
    @staticmethod
    def get_last_report_async() -> winrt.windows.foundation.IAsyncOperation[Geovisit]: ...
    def start(self, value: VisitMonitoringScope, /) -> None: ...
    def stop(self) -> None: ...
    def add_visit_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GeovisitMonitor, GeovisitStateChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_visit_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class GeovisitStateChangedEventArgs(winrt.system.Object):
    visit: typing.Optional[Geovisit]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeovisitStateChangedEventArgs: ...

class GeovisitTriggerDetails(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeovisitTriggerDetails: ...
    def read_reports(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[Geovisit]]: ...

class PositionChangedEventArgs(winrt.system.Object):
    position: typing.Optional[Geoposition]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PositionChangedEventArgs: ...

class StatusChangedEventArgs(winrt.system.Object):
    status: PositionStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StatusChangedEventArgs: ...

class VenueData(winrt.system.Object):
    id: str
    level: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VenueData: ...

class IGeoshape(winrt.system.Object):
    altitude_reference_system: AltitudeReferenceSystem
    geoshape_type: GeoshapeType
    spatial_reference_id: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IGeoshape: ...

