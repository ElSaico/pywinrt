# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.applicationmodel.contacts
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system
import winrt.windows.ui

from . import CellularDtmfMode, DtmfKey, DtmfToneAudioPlayback, PhoneAudioRoutingEndpoint, PhoneCallAudioDevice, PhoneCallDirection, PhoneCallHistoryEntryMedia, PhoneCallHistoryEntryOtherAppReadAccess, PhoneCallHistoryEntryQueryDesiredMedia, PhoneCallHistoryEntryRawAddressKind, PhoneCallHistorySourceIdKind, PhoneCallHistoryStoreAccessType, PhoneCallMedia, PhoneCallOperationStatus, PhoneCallStatus, PhoneLineNetworkOperatorDisplayTextLocation, PhoneLineOperationStatus, PhoneLineTransport, PhoneLineWatcherStatus, PhoneNetworkState, PhoneSimState, PhoneVoicemailType, TransportDeviceAudioRoutingStatus, VoipPhoneCallMedia, VoipPhoneCallRejectReason, VoipPhoneCallResourceReservationStatus, VoipPhoneCallState

Self = typing.TypeVar('Self')

class CallAnswerEventArgs(winrt.system.Object):
    accepted_media: VoipPhoneCallMedia
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CallAnswerEventArgs: ...

class CallRejectEventArgs(winrt.system.Object):
    reject_reason: VoipPhoneCallRejectReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CallRejectEventArgs: ...

class CallStateChangeEventArgs(winrt.system.Object):
    state: VoipPhoneCallState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CallStateChangeEventArgs: ...

class LockScreenCallEndCallDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LockScreenCallEndCallDeferral: ...
    def complete(self) -> None: ...

class LockScreenCallEndRequestedEventArgs(winrt.system.Object):
    deadline: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LockScreenCallEndRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[LockScreenCallEndCallDeferral]: ...

class LockScreenCallUI(winrt.system.Object):
    call_title: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LockScreenCallUI: ...
    def dismiss(self) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[LockScreenCallUI, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_end_requested(self, handler: winrt.windows.foundation.TypedEventHandler[LockScreenCallUI, LockScreenCallEndRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_end_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MuteChangeEventArgs(winrt.system.Object):
    muted: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MuteChangeEventArgs: ...

class PhoneCall(winrt.system.Object):
    audio_device: PhoneCallAudioDevice
    call_id: str
    is_muted: bool
    status: PhoneCallStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCall: ...
    def accept_incoming(self) -> PhoneCallOperationStatus: ...
    def accept_incoming_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def change_audio_device(self, endpoint: PhoneCallAudioDevice, /) -> PhoneCallOperationStatus: ...
    def change_audio_device_async(self, endpoint: PhoneCallAudioDevice, /) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def end(self) -> PhoneCallOperationStatus: ...
    def end_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    @staticmethod
    def get_from_id(call_id: str, /) -> typing.Optional[PhoneCall]: ...
    def get_phone_call_info(self) -> typing.Optional[PhoneCallInfo]: ...
    def get_phone_call_info_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallInfo]: ...
    def hold(self) -> PhoneCallOperationStatus: ...
    def hold_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def mute(self) -> PhoneCallOperationStatus: ...
    def mute_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def reject_incoming(self) -> PhoneCallOperationStatus: ...
    def reject_incoming_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def resume_from_hold(self) -> PhoneCallOperationStatus: ...
    def resume_from_hold_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def send_dtmf_key(self, key: DtmfKey, dtmf_tone_audio_playback: DtmfToneAudioPlayback, /) -> PhoneCallOperationStatus: ...
    def send_dtmf_key_async(self, key: DtmfKey, dtmf_tone_audio_playback: DtmfToneAudioPlayback, /) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def unmute(self) -> PhoneCallOperationStatus: ...
    def unmute_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallOperationStatus]: ...
    def add_audio_device_changed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneCall, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_audio_device_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_muted_changed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneCall, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_muted_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneCall, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PhoneCallBlocking(winrt.system.Object):
    block_unknown_numbers: typing.ClassVar[bool]
    block_private_numbers: typing.ClassVar[bool]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallBlocking: ...
    @staticmethod
    def set_call_blocking_list_async(phone_number_list: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...

class PhoneCallHistoryEntry(winrt.system.Object):
    media: PhoneCallHistoryEntryMedia
    is_missed: bool
    is_incoming: bool
    is_caller_id_blocked: bool
    is_seen: bool
    duration: typing.Optional[typing.Optional[datetime.timedelta]]
    is_emergency: bool
    is_suppressed: bool
    start_time: datetime.datetime
    source_id_kind: PhoneCallHistorySourceIdKind
    address: typing.Optional[PhoneCallHistoryEntryAddress]
    source_id: str
    remote_id: str
    other_app_read_access: PhoneCallHistoryEntryOtherAppReadAccess
    is_ringing: bool
    is_voicemail: bool
    id: str
    source_display_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallHistoryEntry: ...
    def __new__(cls: typing.Type[PhoneCallHistoryEntry]) -> PhoneCallHistoryEntry:...

class PhoneCallHistoryEntryAddress(winrt.system.Object):
    raw_address_kind: PhoneCallHistoryEntryRawAddressKind
    raw_address: str
    display_name: str
    contact_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallHistoryEntryAddress: ...
    @typing.overload
    def __new__(cls: typing.Type[PhoneCallHistoryEntryAddress], raw_address: str, raw_address_kind: PhoneCallHistoryEntryRawAddressKind) -> PhoneCallHistoryEntryAddress:...
    @typing.overload
    def __new__(cls: typing.Type[PhoneCallHistoryEntryAddress]) -> PhoneCallHistoryEntryAddress:...

class PhoneCallHistoryEntryQueryOptions(winrt.system.Object):
    desired_media: PhoneCallHistoryEntryQueryDesiredMedia
    source_ids: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallHistoryEntryQueryOptions: ...
    def __new__(cls: typing.Type[PhoneCallHistoryEntryQueryOptions]) -> PhoneCallHistoryEntryQueryOptions:...

class PhoneCallHistoryEntryReader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallHistoryEntryReader: ...
    def read_batch_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[PhoneCallHistoryEntry]]: ...

class PhoneCallHistoryManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallHistoryManager: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[PhoneCallHistoryManagerForUser]: ...
    @staticmethod
    def request_store_async(access_type: PhoneCallHistoryStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[PhoneCallHistoryStore]: ...

class PhoneCallHistoryManagerForUser(winrt.system.Object):
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallHistoryManagerForUser: ...
    def request_store_async(self, access_type: PhoneCallHistoryStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[PhoneCallHistoryStore]: ...

class PhoneCallHistoryStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallHistoryStore: ...
    def delete_entries_async(self, call_history_entries: typing.Iterable[PhoneCallHistoryEntry], /) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_entry_async(self, call_history_entry: typing.Optional[PhoneCallHistoryEntry], /) -> winrt.windows.foundation.IAsyncAction: ...
    def get_entry_async(self, call_history_entry_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PhoneCallHistoryEntry]: ...
    @typing.overload
    def get_entry_reader(self) -> typing.Optional[PhoneCallHistoryEntryReader]: ...
    @typing.overload
    def get_entry_reader(self, query_options: typing.Optional[PhoneCallHistoryEntryQueryOptions], /) -> typing.Optional[PhoneCallHistoryEntryReader]: ...
    def get_sources_unseen_count_async(self, source_ids: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.UInt32]: ...
    def get_unseen_count_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.UInt32]: ...
    def mark_all_as_seen_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def mark_entries_as_seen_async(self, call_history_entries: typing.Iterable[PhoneCallHistoryEntry], /) -> winrt.windows.foundation.IAsyncAction: ...
    def mark_entry_as_seen_async(self, call_history_entry: typing.Optional[PhoneCallHistoryEntry], /) -> winrt.windows.foundation.IAsyncAction: ...
    def mark_sources_as_seen_async(self, source_ids: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncAction: ...
    def save_entry_async(self, call_history_entry: typing.Optional[PhoneCallHistoryEntry], /) -> winrt.windows.foundation.IAsyncAction: ...

class PhoneCallInfo(winrt.system.Object):
    call_direction: PhoneCallDirection
    display_name: str
    is_hold_supported: bool
    line_id: uuid.UUID
    phone_number: str
    start_time: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallInfo: ...

class PhoneCallManager(winrt.system.Object):
    is_call_active: typing.ClassVar[bool]
    is_call_incoming: typing.ClassVar[bool]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallManager: ...
    @staticmethod
    def request_store_async() -> winrt.windows.foundation.IAsyncOperation[PhoneCallStore]: ...
    @staticmethod
    def show_phone_call_settings_u_i() -> None: ...
    @staticmethod
    def show_phone_call_u_i(phone_number: str, display_name: str, /) -> None: ...
    @staticmethod
    def add_call_state_changed(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_call_state_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PhoneCallStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallStore: ...
    def get_default_line_async(self) -> winrt.windows.foundation.IAsyncOperation[uuid.UUID]: ...
    def is_emergency_phone_number_async(self, number: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def request_line_watcher(self) -> typing.Optional[PhoneLineWatcher]: ...

class PhoneCallVideoCapabilities(winrt.system.Object):
    is_video_calling_capable: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallVideoCapabilities: ...

class PhoneCallVideoCapabilitiesManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallVideoCapabilitiesManager: ...
    @staticmethod
    def get_capabilities_async(phone_number: str, /) -> winrt.windows.foundation.IAsyncOperation[PhoneCallVideoCapabilities]: ...

class PhoneCallsResult(winrt.system.Object):
    all_active_phone_calls: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhoneCall]]
    operation_status: PhoneLineOperationStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallsResult: ...

class PhoneDialOptions(winrt.system.Object):
    number: str
    media: PhoneCallMedia
    display_name: str
    contact_phone: typing.Optional[winrt.windows.applicationmodel.contacts.ContactPhone]
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    audio_endpoint: PhoneAudioRoutingEndpoint
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneDialOptions: ...
    def __new__(cls: typing.Type[PhoneDialOptions]) -> PhoneDialOptions:...

class PhoneLine(winrt.system.Object):
    can_dial: bool
    cellular_details: typing.Optional[PhoneLineCellularDetails]
    display_color: winrt.windows.ui.Color
    display_name: str
    id: uuid.UUID
    line_configuration: typing.Optional[PhoneLineConfiguration]
    network_name: str
    network_state: PhoneNetworkState
    supports_tile: bool
    transport: PhoneLineTransport
    video_calling_capabilities: typing.Optional[PhoneCallVideoCapabilities]
    voicemail: typing.Optional[PhoneVoicemail]
    transport_device_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLine: ...
    def dial(self, number: str, display_name: str, /) -> None: ...
    def dial_with_options(self, options: typing.Optional[PhoneDialOptions], /) -> None: ...
    def dial_with_result(self, number: str, display_name: str, /) -> typing.Optional[PhoneLineDialResult]: ...
    def dial_with_result_async(self, number: str, display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[PhoneLineDialResult]: ...
    def enable_text_reply(self, value: bool, /) -> None: ...
    @staticmethod
    def from_id_async(line_id: uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[PhoneLine]: ...
    def get_all_active_phone_calls(self) -> typing.Optional[PhoneCallsResult]: ...
    def get_all_active_phone_calls_async(self) -> winrt.windows.foundation.IAsyncOperation[PhoneCallsResult]: ...
    def is_immediate_dial_number_async(self, number: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_line_changed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLine, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_line_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PhoneLineCellularDetails(winrt.system.Object):
    is_modem_on: bool
    registration_reject_code: winrt.system.Int32
    sim_slot_index: winrt.system.Int32
    sim_state: PhoneSimState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLineCellularDetails: ...
    def get_network_operator_display_text(self, location: PhoneLineNetworkOperatorDisplayTextLocation, /) -> str: ...

class PhoneLineConfiguration(winrt.system.Object):
    extended_properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    is_video_calling_enabled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLineConfiguration: ...

class PhoneLineDialResult(winrt.system.Object):
    dial_call_status: PhoneCallOperationStatus
    dialed_call: typing.Optional[PhoneCall]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLineDialResult: ...

class PhoneLineTransportDevice(winrt.system.Object):
    device_id: str
    transport: PhoneLineTransport
    audio_routing_status: TransportDeviceAudioRoutingStatus
    in_band_ringing_enabled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLineTransportDevice: ...
    def connect(self) -> bool: ...
    def connect_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @staticmethod
    def from_id(id: str, /) -> typing.Optional[PhoneLineTransportDevice]: ...
    @typing.overload
    @staticmethod
    def get_device_selector() -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector(transport: PhoneLineTransport, /) -> str: ...
    def is_registered(self) -> bool: ...
    def register_app(self) -> None: ...
    def register_app_for_user(self, user: typing.Optional[winrt.windows.system.User], /) -> None: ...
    def request_access_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.devices.enumeration.DeviceAccessStatus]: ...
    def unregister_app(self) -> None: ...
    def unregister_app_for_user(self, user: typing.Optional[winrt.windows.system.User], /) -> None: ...
    def add_audio_routing_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLineTransportDevice, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_audio_routing_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_in_band_ringing_enabled_changed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLineTransportDevice, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_in_band_ringing_enabled_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PhoneLineWatcher(winrt.system.Object):
    status: PhoneLineWatcherStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLineWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_line_added(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_line_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_line_removed(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_line_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_line_updated(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, PhoneLineWatcherEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_line_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_stopped(self, handler: winrt.windows.foundation.TypedEventHandler[PhoneLineWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_stopped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PhoneLineWatcherEventArgs(winrt.system.Object):
    line_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLineWatcherEventArgs: ...

class PhoneVoicemail(winrt.system.Object):
    message_count: winrt.system.Int32
    number: str
    type: PhoneVoicemailType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneVoicemail: ...
    def dial_voicemail_async(self) -> winrt.windows.foundation.IAsyncAction: ...

class VoipCallCoordinator(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VoipCallCoordinator: ...
    def cancel_upgrade(self, call_upgrade_guid: uuid.UUID, /) -> None: ...
    @staticmethod
    def get_default() -> typing.Optional[VoipCallCoordinator]: ...
    def notify_muted(self) -> None: ...
    def notify_unmuted(self) -> None: ...
    def request_incoming_upgrade_to_video_call(self, context: str, contact_name: str, contact_number: str, contact_image: typing.Optional[winrt.windows.foundation.Uri], service_name: str, branding_image: typing.Optional[winrt.windows.foundation.Uri], call_details: str, ringtone: typing.Optional[winrt.windows.foundation.Uri], ring_timeout: datetime.timedelta, /) -> typing.Optional[VoipPhoneCall]: ...
    def request_new_app_initiated_call(self, context: str, contact_name: str, contact_number: str, service_name: str, media: VoipPhoneCallMedia, /) -> typing.Optional[VoipPhoneCall]: ...
    @typing.overload
    def request_new_incoming_call(self, context: str, contact_name: str, contact_number: str, contact_image: typing.Optional[winrt.windows.foundation.Uri], service_name: str, branding_image: typing.Optional[winrt.windows.foundation.Uri], call_details: str, ringtone: typing.Optional[winrt.windows.foundation.Uri], media: VoipPhoneCallMedia, ring_timeout: datetime.timedelta, /) -> typing.Optional[VoipPhoneCall]: ...
    @typing.overload
    def request_new_incoming_call(self, context: str, contact_name: str, contact_number: str, contact_image: typing.Optional[winrt.windows.foundation.Uri], service_name: str, branding_image: typing.Optional[winrt.windows.foundation.Uri], call_details: str, ringtone: typing.Optional[winrt.windows.foundation.Uri], media: VoipPhoneCallMedia, ring_timeout: datetime.timedelta, contact_remote_id: str, /) -> typing.Optional[VoipPhoneCall]: ...
    def request_new_outgoing_call(self, context: str, contact_name: str, service_name: str, media: VoipPhoneCallMedia, /) -> typing.Optional[VoipPhoneCall]: ...
    def request_outgoing_upgrade_to_video_call(self, call_upgrade_guid: uuid.UUID, context: str, contact_name: str, service_name: str, /) -> typing.Optional[VoipPhoneCall]: ...
    @typing.overload
    def reserve_call_resources_async(self) -> winrt.windows.foundation.IAsyncOperation[VoipPhoneCallResourceReservationStatus]: ...
    @typing.overload
    def reserve_call_resources_async(self, task_entry_point: str, /) -> winrt.windows.foundation.IAsyncOperation[VoipPhoneCallResourceReservationStatus]: ...
    def setup_new_accepted_call(self, context: str, contact_name: str, contact_number: str, service_name: str, media: VoipPhoneCallMedia, /) -> typing.Optional[VoipPhoneCall]: ...
    def terminate_cellular_call(self, call_upgrade_guid: uuid.UUID, /) -> None: ...
    def add_mute_state_changed(self, mute_change_handler: winrt.windows.foundation.TypedEventHandler[VoipCallCoordinator, MuteChangeEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_mute_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class VoipPhoneCall(winrt.system.Object):
    start_time: datetime.datetime
    contact_name: str
    call_media: VoipPhoneCallMedia
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VoipPhoneCall: ...
    def notify_call_accepted(self, media: VoipPhoneCallMedia, /) -> None: ...
    def notify_call_active(self) -> None: ...
    def notify_call_ended(self) -> None: ...
    def notify_call_held(self) -> None: ...
    def notify_call_ready(self) -> None: ...
    def try_show_app_u_i(self) -> None: ...
    def add_answer_requested(self, accept_handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallAnswerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_answer_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_end_requested(self, handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_end_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_hold_requested(self, handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_hold_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_reject_requested(self, reject_handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallRejectEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_reject_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_resume_requested(self, handler: winrt.windows.foundation.TypedEventHandler[VoipPhoneCall, CallStateChangeEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resume_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

