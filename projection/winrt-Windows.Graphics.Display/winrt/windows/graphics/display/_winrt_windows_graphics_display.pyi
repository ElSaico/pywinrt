# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.graphics
import winrt.windows.storage.streams

from . import AdvancedColorKind, DisplayBrightnessOverrideOptions, DisplayBrightnessOverrideScenario, DisplayBrightnessScenario, DisplayColorOverrideScenario, DisplayOrientations, HdrMetadataFormat, ResolutionScale
from . import DisplayPropertiesEventHandler

Self = typing.TypeVar('Self')

class NitRange:
    min_nits: winrt.system.Single
    max_nits: winrt.system.Single
    step_size_nits: winrt.system.Single
    def __new__(cls: typing.Type[NitRange], min_nits: winrt.system.Single, max_nits: winrt.system.Single, step_size_nits: winrt.system.Single) -> NitRange: ...

class AdvancedColorInfo(winrt.system.Object):
    blue_primary: winrt.windows.foundation.Point
    current_advanced_color_kind: AdvancedColorKind
    green_primary: winrt.windows.foundation.Point
    max_average_full_frame_luminance_in_nits: winrt.system.Single
    max_luminance_in_nits: winrt.system.Single
    min_luminance_in_nits: winrt.system.Single
    red_primary: winrt.windows.foundation.Point
    sdr_white_level_in_nits: winrt.system.Single
    white_point: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AdvancedColorInfo: ...
    def is_advanced_color_kind_available(self, kind: AdvancedColorKind, /) -> winrt.system.Boolean: ...
    def is_hdr_metadata_format_currently_supported(self, format: HdrMetadataFormat, /) -> winrt.system.Boolean: ...

class BrightnessOverride(winrt.system.Object):
    brightness_level: winrt.system.Double
    is_override_active: winrt.system.Boolean
    is_supported: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BrightnessOverride: ...
    @staticmethod
    def get_default_for_system() -> typing.Optional[BrightnessOverride]: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[BrightnessOverride]: ...
    def get_level_for_scenario(self, scenario: DisplayBrightnessScenario, /) -> winrt.system.Double: ...
    @staticmethod
    def save_for_system_async(value: typing.Optional[BrightnessOverride], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def set_brightness_level(self, brightness_level: winrt.system.Double, options: DisplayBrightnessOverrideOptions, /) -> None: ...
    def set_brightness_scenario(self, scenario: DisplayBrightnessScenario, options: DisplayBrightnessOverrideOptions, /) -> None: ...
    def start_override(self) -> None: ...
    def stop_override(self) -> None: ...
    def add_brightness_level_changed(self, handler: winrt.windows.foundation.TypedEventHandler[BrightnessOverride, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_brightness_level_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_override_active_changed(self, handler: winrt.windows.foundation.TypedEventHandler[BrightnessOverride, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_override_active_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_supported_changed(self, handler: winrt.windows.foundation.TypedEventHandler[BrightnessOverride, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_supported_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class BrightnessOverrideSettings(winrt.system.Object):
    desired_level: winrt.system.Double
    desired_nits: winrt.system.Single
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BrightnessOverrideSettings: ...
    @staticmethod
    def create_from_display_brightness_override_scenario(override_scenario: DisplayBrightnessOverrideScenario, /) -> typing.Optional[BrightnessOverrideSettings]: ...
    @staticmethod
    def create_from_level(level: winrt.system.Double, /) -> typing.Optional[BrightnessOverrideSettings]: ...
    @staticmethod
    def create_from_nits(nits: winrt.system.Single, /) -> typing.Optional[BrightnessOverrideSettings]: ...

class ColorOverrideSettings(winrt.system.Object):
    desired_display_color_override_scenario: DisplayColorOverrideScenario
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorOverrideSettings: ...
    @staticmethod
    def create_from_display_color_override_scenario(override_scenario: DisplayColorOverrideScenario, /) -> typing.Optional[ColorOverrideSettings]: ...

class DisplayEnhancementOverride(winrt.system.Object):
    color_override_settings: typing.Optional[ColorOverrideSettings]
    brightness_override_settings: typing.Optional[BrightnessOverrideSettings]
    can_override: winrt.system.Boolean
    is_override_active: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayEnhancementOverride: ...
    def get_current_display_enhancement_override_capabilities(self) -> typing.Optional[DisplayEnhancementOverrideCapabilities]: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[DisplayEnhancementOverride]: ...
    def request_override(self) -> None: ...
    def stop_override(self) -> None: ...
    def add_can_override_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayEnhancementOverride, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_can_override_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_display_enhancement_override_capabilities_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayEnhancementOverride, DisplayEnhancementOverrideCapabilitiesChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_display_enhancement_override_capabilities_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_override_active_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayEnhancementOverride, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_override_active_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DisplayEnhancementOverrideCapabilities(winrt.system.Object):
    is_brightness_control_supported: winrt.system.Boolean
    is_brightness_nits_control_supported: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayEnhancementOverrideCapabilities: ...
    def get_supported_nit_ranges(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[NitRange]]: ...

class DisplayEnhancementOverrideCapabilitiesChangedEventArgs(winrt.system.Object):
    capabilities: typing.Optional[DisplayEnhancementOverrideCapabilities]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayEnhancementOverrideCapabilitiesChangedEventArgs: ...

class DisplayInformation(winrt.system.Object):
    current_orientation: DisplayOrientations
    logical_dpi: winrt.system.Single
    native_orientation: DisplayOrientations
    raw_dpi_x: winrt.system.Single
    raw_dpi_y: winrt.system.Single
    resolution_scale: ResolutionScale
    stereo_enabled: winrt.system.Boolean
    raw_pixels_per_view_pixel: winrt.system.Double
    diagonal_size_in_inches: typing.Optional[typing.Optional[winrt.system.Double]]
    screen_height_in_raw_pixels: winrt.system.UInt32
    screen_width_in_raw_pixels: winrt.system.UInt32
    auto_rotation_preferences: typing.ClassVar[DisplayOrientations]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayInformation: ...
    def get_advanced_color_info(self) -> typing.Optional[AdvancedColorInfo]: ...
    def get_color_profile_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[DisplayInformation]: ...
    def add_color_profile_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayInformation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_color_profile_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_dpi_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayInformation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_dpi_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_orientation_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayInformation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_orientation_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_stereo_enabled_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayInformation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_stereo_enabled_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_advanced_color_info_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayInformation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_advanced_color_info_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_display_contents_invalidated(handler: winrt.windows.foundation.TypedEventHandler[DisplayInformation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_display_contents_invalidated(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DisplayProperties(winrt.system.Object):
    auto_rotation_preferences: typing.ClassVar[DisplayOrientations]
    current_orientation: typing.ClassVar[DisplayOrientations]
    logical_dpi: typing.ClassVar[winrt.system.Single]
    native_orientation: typing.ClassVar[DisplayOrientations]
    resolution_scale: typing.ClassVar[ResolutionScale]
    stereo_enabled: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayProperties: ...
    @staticmethod
    def get_color_profile_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @staticmethod
    def add_color_profile_changed(handler: typing.Optional[DisplayPropertiesEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_color_profile_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_display_contents_invalidated(handler: typing.Optional[DisplayPropertiesEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_display_contents_invalidated(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_logical_dpi_changed(handler: typing.Optional[DisplayPropertiesEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_logical_dpi_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_orientation_changed(handler: typing.Optional[DisplayPropertiesEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_orientation_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_stereo_enabled_changed(handler: typing.Optional[DisplayPropertiesEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_stereo_enabled_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DisplayServices(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayServices: ...
    @staticmethod
    def find_all() -> winrt.windows.graphics.DisplayId: ...

