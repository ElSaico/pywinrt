# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import DayFormat, DayOfWeekFormat, HourFormat, MinuteFormat, MonthFormat, SecondFormat, YearFormat

Self = typing.TypeVar('Self')

class DateTimeFormatter(winrt.system.Object):
    numeral_system: str
    clock: str
    geographic_region: str
    include_day: DayFormat
    include_day_of_week: DayOfWeekFormat
    include_hour: HourFormat
    include_minute: MinuteFormat
    include_month: MonthFormat
    include_second: SecondFormat
    include_year: YearFormat
    languages: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    calendar: str
    patterns: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    resolved_geographic_region: str
    resolved_language: str
    template: str
    long_date: typing.ClassVar[typing.Optional[DateTimeFormatter]]
    long_time: typing.ClassVar[typing.Optional[DateTimeFormatter]]
    short_date: typing.ClassVar[typing.Optional[DateTimeFormatter]]
    short_time: typing.ClassVar[typing.Optional[DateTimeFormatter]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DateTimeFormatter: ...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], format_template: str) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], format_template: str, languages: typing.Iterable[str]) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], format_template: str, languages: typing.Iterable[str], geographic_region: str, calendar: str, clock: str) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], year_format: YearFormat, month_format: MonthFormat, day_format: DayFormat, day_of_week_format: DayOfWeekFormat) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], hour_format: HourFormat, minute_format: MinuteFormat, second_format: SecondFormat) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], year_format: YearFormat, month_format: MonthFormat, day_format: DayFormat, day_of_week_format: DayOfWeekFormat, hour_format: HourFormat, minute_format: MinuteFormat, second_format: SecondFormat, languages: typing.Iterable[str]) -> DateTimeFormatter:...
    @typing.overload
    def __new__(cls: typing.Type[DateTimeFormatter], year_format: YearFormat, month_format: MonthFormat, day_format: DayFormat, day_of_week_format: DayOfWeekFormat, hour_format: HourFormat, minute_format: MinuteFormat, second_format: SecondFormat, languages: typing.Iterable[str], geographic_region: str, calendar: str, clock: str) -> DateTimeFormatter:...
    @typing.overload
    def format(self, value: datetime.datetime, /) -> str: ...
    @typing.overload
    def format(self, datetime: datetime.datetime, time_zone_id: str, /) -> str: ...

