# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.applicationmodel.appservice
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking.sockets
import winrt.windows.web.http

from . import DevicePortalConnectionClosedReason

Self = typing.TypeVar('Self')

class DevicePortalConnection(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DevicePortalConnection: ...
    @staticmethod
    def get_for_app_service_connection(app_service_connection: typing.Optional[winrt.windows.applicationmodel.appservice.AppServiceConnection], /) -> typing.Optional[DevicePortalConnection]: ...
    @typing.overload
    def get_server_message_web_socket_for_request(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> typing.Optional[winrt.windows.networking.sockets.ServerMessageWebSocket]: ...
    @typing.overload
    def get_server_message_web_socket_for_request(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], message_type: winrt.windows.networking.sockets.SocketMessageType, protocol: str, /) -> typing.Optional[winrt.windows.networking.sockets.ServerMessageWebSocket]: ...
    @typing.overload
    def get_server_message_web_socket_for_request(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], message_type: winrt.windows.networking.sockets.SocketMessageType, protocol: str, outbound_buffer_size_in_bytes: winrt.system.UInt32, max_message_size: winrt.system.UInt32, receive_mode: winrt.windows.networking.sockets.MessageWebSocketReceiveMode, /) -> typing.Optional[winrt.windows.networking.sockets.ServerMessageWebSocket]: ...
    @typing.overload
    def get_server_stream_web_socket_for_request(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> typing.Optional[winrt.windows.networking.sockets.ServerStreamWebSocket]: ...
    @typing.overload
    def get_server_stream_web_socket_for_request(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], protocol: str, outbound_buffer_size_in_bytes: winrt.system.UInt32, no_delay: winrt.system.Boolean, /) -> typing.Optional[winrt.windows.networking.sockets.ServerStreamWebSocket]: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[DevicePortalConnection, DevicePortalConnectionClosedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_request_received(self, handler: winrt.windows.foundation.TypedEventHandler[DevicePortalConnection, DevicePortalConnectionRequestReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_request_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DevicePortalConnectionClosedEventArgs(winrt.system.Object):
    reason: DevicePortalConnectionClosedReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DevicePortalConnectionClosedEventArgs: ...

class DevicePortalConnectionRequestReceivedEventArgs(winrt.system.Object):
    request_message: typing.Optional[winrt.windows.web.http.HttpRequestMessage]
    response_message: typing.Optional[winrt.windows.web.http.HttpResponseMessage]
    is_web_socket_upgrade_request: winrt.system.Boolean
    web_socket_protocols_requested: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DevicePortalConnectionRequestReceivedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

