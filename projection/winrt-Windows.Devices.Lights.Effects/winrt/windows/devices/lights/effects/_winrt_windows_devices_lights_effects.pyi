# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.devices.lights
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.graphics.imaging
import winrt.windows.ui

from . import LampArrayEffectCompletionBehavior, LampArrayEffectStartMode, LampArrayRepetitionMode

Self = typing.TypeVar('Self')

class LampArrayBitmapEffect(winrt.system.Object):
    update_interval: datetime.timedelta
    start_delay: datetime.timedelta
    duration: datetime.timedelta
    suggested_bitmap_size: winrt.windows.foundation.Size
    z_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArrayBitmapEffect: ...
    def __new__(cls: typing.Type[LampArrayBitmapEffect], lamp_array: typing.Optional[winrt.windows.devices.lights.LampArray], lamp_indexes: winrt.system.Array[winrt.system.Int32]) -> LampArrayBitmapEffect:...
    def add_bitmap_requested(self, handler: winrt.windows.foundation.TypedEventHandler[LampArrayBitmapEffect, LampArrayBitmapRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_bitmap_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class LampArrayBitmapRequestedEventArgs(winrt.system.Object):
    since_started: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArrayBitmapRequestedEventArgs: ...
    def update_bitmap(self, bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> None: ...

class LampArrayBlinkEffect(winrt.system.Object):
    sustain_duration: datetime.timedelta
    start_delay: datetime.timedelta
    repetition_mode: LampArrayRepetitionMode
    repetition_delay: datetime.timedelta
    occurrences: winrt.system.Int32
    decay_duration: datetime.timedelta
    color: winrt.windows.ui.Color
    attack_duration: datetime.timedelta
    z_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArrayBlinkEffect: ...
    def __new__(cls: typing.Type[LampArrayBlinkEffect], lamp_array: typing.Optional[winrt.windows.devices.lights.LampArray], lamp_indexes: winrt.system.Array[winrt.system.Int32]) -> LampArrayBlinkEffect:...

class LampArrayColorRampEffect(winrt.system.Object):
    start_delay: datetime.timedelta
    ramp_duration: datetime.timedelta
    completion_behavior: LampArrayEffectCompletionBehavior
    color: winrt.windows.ui.Color
    z_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArrayColorRampEffect: ...
    def __new__(cls: typing.Type[LampArrayColorRampEffect], lamp_array: typing.Optional[winrt.windows.devices.lights.LampArray], lamp_indexes: winrt.system.Array[winrt.system.Int32]) -> LampArrayColorRampEffect:...

class LampArrayCustomEffect(winrt.system.Object):
    update_interval: datetime.timedelta
    duration: datetime.timedelta
    z_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArrayCustomEffect: ...
    def __new__(cls: typing.Type[LampArrayCustomEffect], lamp_array: typing.Optional[winrt.windows.devices.lights.LampArray], lamp_indexes: winrt.system.Array[winrt.system.Int32]) -> LampArrayCustomEffect:...
    def add_update_requested(self, handler: winrt.windows.foundation.TypedEventHandler[LampArrayCustomEffect, LampArrayUpdateRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_update_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class LampArrayEffectPlaylist(winrt.system.Object, typing.Sequence[ILampArrayEffect]):
    repetition_mode: LampArrayRepetitionMode
    occurrences: winrt.system.Int32
    effect_start_mode: LampArrayEffectStartMode
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> ILampArrayEffect: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ILampArrayEffect]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArrayEffectPlaylist: ...
    def __new__(cls: typing.Type[LampArrayEffectPlaylist]) -> LampArrayEffectPlaylist:...
    def append(self, effect: typing.Optional[ILampArrayEffect], /) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[ILampArrayEffect]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[ILampArrayEffect]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[ILampArrayEffect], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[ILampArrayEffect], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def override_z_index(self, z_index: winrt.system.Int32, /) -> None: ...
    def pause(self) -> None: ...
    @staticmethod
    def pause_all(value: typing.Iterable[LampArrayEffectPlaylist], /) -> None: ...
    def start(self) -> None: ...
    @staticmethod
    def start_all(value: typing.Iterable[LampArrayEffectPlaylist], /) -> None: ...
    def stop(self) -> None: ...
    @staticmethod
    def stop_all(value: typing.Iterable[LampArrayEffectPlaylist], /) -> None: ...

class LampArraySolidEffect(winrt.system.Object):
    z_index: winrt.system.Int32
    start_delay: datetime.timedelta
    duration: datetime.timedelta
    completion_behavior: LampArrayEffectCompletionBehavior
    color: winrt.windows.ui.Color
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArraySolidEffect: ...
    def __new__(cls: typing.Type[LampArraySolidEffect], lamp_array: typing.Optional[winrt.windows.devices.lights.LampArray], lamp_indexes: winrt.system.Array[winrt.system.Int32]) -> LampArraySolidEffect:...

class LampArrayUpdateRequestedEventArgs(winrt.system.Object):
    since_started: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArrayUpdateRequestedEventArgs: ...
    def set_color(self, desired_color: winrt.windows.ui.Color, /) -> None: ...
    def set_color_for_index(self, lamp_index: winrt.system.Int32, desired_color: winrt.windows.ui.Color, /) -> None: ...
    def set_colors_for_indices(self, desired_colors: winrt.system.Array[winrt.windows.ui.Color], lamp_indexes: winrt.system.Array[winrt.system.Int32], /) -> None: ...
    def set_single_color_for_indices(self, desired_color: winrt.windows.ui.Color, lamp_indexes: winrt.system.Array[winrt.system.Int32], /) -> None: ...

class ILampArrayEffect(winrt.system.Object):
    z_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILampArrayEffect: ...

