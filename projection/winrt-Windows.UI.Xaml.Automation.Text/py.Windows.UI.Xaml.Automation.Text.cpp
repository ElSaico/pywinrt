// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.UI.Xaml.Automation.Text.h"


namespace py::cpp::Windows::UI::Xaml::Automation::Text
{
    struct module_state
    {
        PyObject* type_TextPatternRangeEndpoint;
        PyObject* type_TextUnit;
    };

    static PyObject* register_TextPatternRangeEndpoint(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        WINRT_ASSERT(state);

        if (state->type_TextPatternRangeEndpoint)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_TextPatternRangeEndpoint = type;
        Py_INCREF(state->type_TextPatternRangeEndpoint);


        Py_RETURN_NONE;
    }

    static PyObject* register_TextUnit(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        WINRT_ASSERT(state);

        if (state->type_TextUnit)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_TextUnit = type;
        Py_INCREF(state->type_TextUnit);


        Py_RETURN_NONE;
    }

    // ----- Windows.UI.Xaml.Automation.Text Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Xaml::Automation::Text");

    static PyMethodDef module_methods[] = {
        {"_register_TextPatternRangeEndpoint", register_TextPatternRangeEndpoint, METH_O, "registers type"},
        {"_register_TextUnit", register_TextUnit, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_TextPatternRangeEndpoint);
        Py_VISIT(state->type_TextUnit);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_TextPatternRangeEndpoint);
        Py_CLEAR(state->type_TextUnit);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_Windows_UI_Xaml_Automation_Text",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::UI::Xaml::Automation::Text

PyMODINIT_FUNC PyInit__winrt_Windows_UI_Xaml_Automation_Text(void) noexcept
{
    using namespace py::cpp::Windows::UI::Xaml::Automation::Text;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    WINRT_ASSERT(state);


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Automation::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Automation::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextPatternRangeEndpoint;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::UI::Xaml::Automation::Text::TextUnit>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Automation::Text;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Automation::Text");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_TextUnit;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Automation::Text::TextUnit is not registered");
        return nullptr;
    }

    return python_type;
}
