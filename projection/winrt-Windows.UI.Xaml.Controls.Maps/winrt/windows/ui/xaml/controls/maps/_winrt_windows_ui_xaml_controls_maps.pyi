# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.devices.geolocation
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.foundation.numerics
import winrt.windows.services.maps
import winrt.windows.services.maps.localsearch
import winrt.windows.storage.streams
import winrt.windows.ui
import winrt.windows.ui.xaml

class MapAnimationKind(enum.IntEnum):
    DEFAULT = 0
    NONE = 1
    LINEAR = 2
    BOW = 3

class MapCameraChangeReason(enum.IntEnum):
    SYSTEM = 0
    USER_INTERACTION = 1
    PROGRAMMATIC = 2

class MapColorScheme(enum.IntEnum):
    LIGHT = 0
    DARK = 1

class MapElementCollisionBehavior(enum.IntEnum):
    HIDE = 0
    REMAIN_VISIBLE = 1

class MapInteractionMode(enum.IntEnum):
    AUTO = 0
    DISABLED = 1
    GESTURE_ONLY = 2
    POINTER_AND_KEYBOARD = 2
    CONTROL_ONLY = 3
    GESTURE_AND_CONTROL = 4
    POINTER_KEYBOARD_AND_CONTROL = 4
    POINTER_ONLY = 5

class MapLoadingStatus(enum.IntEnum):
    LOADING = 0
    LOADED = 1
    DATA_UNAVAILABLE = 2
    DOWNLOADED_MAPS_MANAGER_UNAVAILABLE = 3

class MapModel3DShadingOption(enum.IntEnum):
    DEFAULT = 0
    FLAT = 1
    SMOOTH = 2

class MapPanInteractionMode(enum.IntEnum):
    AUTO = 0
    DISABLED = 1

class MapProjection(enum.IntEnum):
    WEB_MERCATOR = 0
    GLOBE = 1

class MapStyle(enum.IntEnum):
    NONE = 0
    ROAD = 1
    AERIAL = 2
    AERIAL_WITH_ROADS = 3
    TERRAIN = 4
    AERIAL3_D = 5
    AERIAL3_D_WITH_ROADS = 6
    CUSTOM = 7

class MapTileAnimationState(enum.IntEnum):
    STOPPED = 0
    PAUSED = 1
    PLAYING = 2

class MapTileLayer(enum.IntEnum):
    LABEL_OVERLAY = 0
    ROAD_OVERLAY = 1
    AREA_OVERLAY = 2
    BACKGROUND_OVERLAY = 3
    BACKGROUND_REPLACEMENT = 4

class MapVisibleRegionKind(enum.IntEnum):
    NEAR = 0
    FULL = 1

class MapWatermarkMode(enum.IntEnum):
    AUTOMATIC = 0
    ON = 1

Self = typing.TypeVar('Self')

class MapZoomLevelRange:
    min: winrt.system.Double
    max: winrt.system.Double
    def __new__(cls: typing.Type[MapZoomLevelRange], min: winrt.system.Double, max: winrt.system.Double) -> MapZoomLevelRange: ...

class CustomMapTileDataSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CustomMapTileDataSource: ...
    def __new__(cls: typing.Type[CustomMapTileDataSource]) -> CustomMapTileDataSource:...
    def add_bitmap_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CustomMapTileDataSource, MapTileBitmapRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_bitmap_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class HttpMapTileDataSource(winrt.system.Object):
    uri_format_string: str
    allow_caching: winrt.system.Boolean
    additional_request_headers: typing.Optional[winrt.windows.foundation.collections.IMap[str, str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMapTileDataSource: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpMapTileDataSource]) -> HttpMapTileDataSource:...
    @typing.overload
    def __new__(cls: typing.Type[HttpMapTileDataSource], uri_format_string: str) -> HttpMapTileDataSource:...
    def add_uri_requested(self, handler: winrt.windows.foundation.TypedEventHandler[HttpMapTileDataSource, MapTileUriRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_uri_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class LocalMapTileDataSource(winrt.system.Object):
    uri_format_string: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LocalMapTileDataSource: ...
    @typing.overload
    def __new__(cls: typing.Type[LocalMapTileDataSource]) -> LocalMapTileDataSource:...
    @typing.overload
    def __new__(cls: typing.Type[LocalMapTileDataSource], uri_format_string: str) -> LocalMapTileDataSource:...
    def add_uri_requested(self, handler: winrt.windows.foundation.TypedEventHandler[LocalMapTileDataSource, MapTileUriRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_uri_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MapActualCameraChangedEventArgs(winrt.system.Object):
    camera: typing.Optional[MapCamera]
    change_reason: MapCameraChangeReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapActualCameraChangedEventArgs: ...
    def __new__(cls: typing.Type[MapActualCameraChangedEventArgs]) -> MapActualCameraChangedEventArgs:...

class MapActualCameraChangingEventArgs(winrt.system.Object):
    camera: typing.Optional[MapCamera]
    change_reason: MapCameraChangeReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapActualCameraChangingEventArgs: ...
    def __new__(cls: typing.Type[MapActualCameraChangingEventArgs]) -> MapActualCameraChangingEventArgs:...

class MapBillboard(winrt.system.Object):
    normalized_anchor_point: winrt.windows.foundation.Point
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    image: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    collision_behavior_desired: MapElementCollisionBehavior
    reference_camera: typing.Optional[MapCamera]
    collision_behavior_desired_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    location_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    normalized_anchor_point_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapBillboard: ...
    def __new__(cls: typing.Type[MapBillboard], camera: typing.Optional[MapCamera]) -> MapBillboard:...

class MapCamera(winrt.system.Object):
    roll: winrt.system.Double
    pitch: winrt.system.Double
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    heading: winrt.system.Double
    field_of_view: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapCamera: ...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]) -> MapCamera:...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], heading_in_degrees: winrt.system.Double) -> MapCamera:...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double) -> MapCamera:...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, roll_in_degrees: winrt.system.Double, field_of_view_in_degrees: winrt.system.Double) -> MapCamera:...

class MapContextRequestedEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_elements: typing.Optional[winrt.windows.foundation.collections.IVectorView[MapElement]]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapContextRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapContextRequestedEventArgs]) -> MapContextRequestedEventArgs:...

class MapControl(winrt.system.Object):
    zoom_level: winrt.system.Double
    watermark_mode: MapWatermarkMode
    transform_origin: winrt.windows.foundation.Point
    traffic_flow_visible: winrt.system.Boolean
    style: MapStyle
    pedestrian_features_visible: winrt.system.Boolean
    map_service_token: str
    center: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    heading: winrt.system.Double
    desired_pitch: winrt.system.Double
    color_scheme: MapColorScheme
    landmarks_visible: winrt.system.Boolean
    children: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.xaml.DependencyObject]]
    loading_status: MapLoadingStatus
    map_elements: typing.Optional[winrt.windows.foundation.collections.IVector[MapElement]]
    max_zoom_level: winrt.system.Double
    min_zoom_level: winrt.system.Double
    pitch: winrt.system.Double
    routes: typing.Optional[winrt.windows.foundation.collections.IVector[MapRouteView]]
    tile_sources: typing.Optional[winrt.windows.foundation.collections.IVector[MapTileSource]]
    rotate_interaction_mode: MapInteractionMode
    zoom_interaction_mode: MapInteractionMode
    transit_features_visible: winrt.system.Boolean
    tilt_interaction_mode: MapInteractionMode
    scene: typing.Optional[MapScene]
    business_landmarks_visible: winrt.system.Boolean
    pan_interaction_mode: MapPanInteractionMode
    custom_experience: typing.Optional[MapCustomExperience]
    actual_camera: typing.Optional[MapCamera]
    is3_d_supported: winrt.system.Boolean
    is_streetside_supported: winrt.system.Boolean
    target_camera: typing.Optional[MapCamera]
    transit_features_enabled: winrt.system.Boolean
    business_landmarks_enabled: winrt.system.Boolean
    view_padding: winrt.windows.ui.xaml.Thickness
    style_sheet: typing.Optional[MapStyleSheet]
    map_projection: MapProjection
    layers: typing.Optional[winrt.windows.foundation.collections.IVector[MapLayer]]
    region: str
    can_tilt_down: winrt.system.Boolean
    can_tilt_up: winrt.system.Boolean
    can_zoom_in: winrt.system.Boolean
    can_zoom_out: winrt.system.Boolean
    center_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    zoom_level_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    children_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    color_scheme_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    desired_pitch_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    heading_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    landmarks_visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    loading_status_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    location_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    map_elements_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    map_service_token_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    normalized_anchor_point_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pedestrian_features_visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pitch_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    routes_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    style_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    tile_sources_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    traffic_flow_visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    transform_origin_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    watermark_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    business_landmarks_visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is3_d_supported_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_streetside_supported_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pan_interaction_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    rotate_interaction_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    scene_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    tilt_interaction_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    transit_features_visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    zoom_interaction_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    business_landmarks_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    transit_features_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    map_projection_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    style_sheet_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    view_padding_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    layers_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    region_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    can_tilt_up_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    can_zoom_in_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    can_zoom_out_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    can_tilt_down_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControl: ...
    def __new__(cls: typing.Type[MapControl]) -> MapControl:...
    @typing.overload
    def find_map_elements_at_offset(self, offset: winrt.windows.foundation.Point, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[MapElement]]: ...
    @typing.overload
    def find_map_elements_at_offset(self, offset: winrt.windows.foundation.Point, radius: winrt.system.Double, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[MapElement]]: ...
    @staticmethod
    def get_location(element: typing.Optional[winrt.windows.ui.xaml.DependencyObject], /) -> typing.Optional[winrt.windows.devices.geolocation.Geopoint]: ...
    @typing.overload
    def get_location_from_offset(self, offset: winrt.windows.foundation.Point, /) -> typing.Optional[winrt.windows.devices.geolocation.Geopoint]: ...
    @typing.overload
    def get_location_from_offset(self, offset: winrt.windows.foundation.Point, desired_reference_system: winrt.windows.devices.geolocation.AltitudeReferenceSystem, /) -> typing.Optional[winrt.windows.devices.geolocation.Geopoint]: ...
    @staticmethod
    def get_normalized_anchor_point(element: typing.Optional[winrt.windows.ui.xaml.DependencyObject], /) -> winrt.windows.foundation.Point: ...
    def get_offset_from_location(self, location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.Point: ...
    def get_visible_region(self, region: MapVisibleRegionKind, /) -> typing.Optional[winrt.windows.devices.geolocation.Geopath]: ...
    def is_location_in_view(self, location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.system.Boolean: ...
    @staticmethod
    def set_location(element: typing.Optional[winrt.windows.ui.xaml.DependencyObject], value: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> None: ...
    @staticmethod
    def set_normalized_anchor_point(element: typing.Optional[winrt.windows.ui.xaml.DependencyObject], value: winrt.windows.foundation.Point, /) -> None: ...
    def start_continuous_pan(self, horizontal_pixels_per_second: winrt.system.Double, vertical_pixels_per_second: winrt.system.Double, /) -> None: ...
    def start_continuous_rotate(self, rate_in_degrees_per_second: winrt.system.Double, /) -> None: ...
    def start_continuous_tilt(self, rate_in_degrees_per_second: winrt.system.Double, /) -> None: ...
    def start_continuous_zoom(self, rate_of_change_per_second: winrt.system.Double, /) -> None: ...
    def stop_continuous_pan(self) -> None: ...
    def stop_continuous_rotate(self) -> None: ...
    def stop_continuous_tilt(self) -> None: ...
    def stop_continuous_zoom(self) -> None: ...
    @typing.overload
    def try_get_location_from_offset(self, offset: winrt.windows.foundation.Point, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[winrt.windows.devices.geolocation.Geopoint]]: ...
    @typing.overload
    def try_get_location_from_offset(self, offset: winrt.windows.foundation.Point, desired_reference_system: winrt.windows.devices.geolocation.AltitudeReferenceSystem, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[winrt.windows.devices.geolocation.Geopoint]]: ...
    def try_pan_async(self, horizontal_pixels: winrt.system.Double, vertical_pixels: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_pan_to_async(self, location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_rotate_async(self, degrees: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_rotate_to_async(self, angle_in_degrees: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_set_scene_async(self, scene: typing.Optional[MapScene], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_set_scene_async(self, scene: typing.Optional[MapScene], animation_kind: MapAnimationKind, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[winrt.windows.devices.geolocation.Geopoint], zoom_level: typing.Optional[winrt.system.Double], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[winrt.windows.devices.geolocation.Geopoint], zoom_level: typing.Optional[winrt.system.Double], heading: typing.Optional[winrt.system.Double], desired_pitch: typing.Optional[winrt.system.Double], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[winrt.windows.devices.geolocation.Geopoint], zoom_level: typing.Optional[winrt.system.Double], heading: typing.Optional[winrt.system.Double], desired_pitch: typing.Optional[winrt.system.Double], animation: MapAnimationKind, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_set_view_bounds_async(self, bounds: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox], margin: typing.Optional[winrt.windows.ui.xaml.Thickness], animation: MapAnimationKind, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_tilt_async(self, degrees: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_tilt_to_async(self, angle_in_degrees: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_zoom_in_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_zoom_out_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_zoom_to_async(self, zoom_level: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def add_center_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_center_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_heading_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_heading_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_loading_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_loading_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_double_tapped(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_double_tapped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_holding(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_holding(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_tapped(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_tapped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pitch_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pitch_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_transform_origin_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_transform_origin_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_zoom_level_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_zoom_level_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_camera_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapActualCameraChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_actual_camera_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_camera_changing(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapActualCameraChangingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_actual_camera_changing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_custom_experience_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapCustomExperienceChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_custom_experience_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_click(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapElementClickEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_element_click(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapElementPointerEnteredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_entered(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapElementPointerExitedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_target_camera_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapTargetCameraChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_target_camera_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_right_tapped(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapRightTappedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_right_tapped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_context_requested(self, handler: winrt.windows.foundation.TypedEventHandler[MapControl, MapContextRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_context_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MapControlBusinessLandmarkClickEventArgs(winrt.system.Object):
    local_locations: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.services.maps.localsearch.LocalLocation]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkClickEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkClickEventArgs]) -> MapControlBusinessLandmarkClickEventArgs:...

class MapControlBusinessLandmarkPointerEnteredEventArgs(winrt.system.Object):
    local_locations: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.services.maps.localsearch.LocalLocation]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkPointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkPointerEnteredEventArgs]) -> MapControlBusinessLandmarkPointerEnteredEventArgs:...

class MapControlBusinessLandmarkPointerExitedEventArgs(winrt.system.Object):
    local_locations: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.services.maps.localsearch.LocalLocation]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkPointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkPointerExitedEventArgs]) -> MapControlBusinessLandmarkPointerExitedEventArgs:...

class MapControlBusinessLandmarkRightTappedEventArgs(winrt.system.Object):
    local_locations: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.services.maps.localsearch.LocalLocation]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkRightTappedEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkRightTappedEventArgs]) -> MapControlBusinessLandmarkRightTappedEventArgs:...

class MapControlDataHelper(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlDataHelper: ...
    def __new__(cls: typing.Type[MapControlDataHelper], map: typing.Optional[MapControl]) -> MapControlDataHelper:...
    @staticmethod
    def create_map_control(raster_render_mode: winrt.system.Boolean, /) -> typing.Optional[MapControl]: ...
    def add_business_landmark_click(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkClickEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_business_landmark_click(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_business_landmark_right_tapped(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkRightTappedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_business_landmark_right_tapped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_click(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlTransitFeatureClickEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_transit_feature_click(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_right_tapped(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlTransitFeatureRightTappedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_transit_feature_right_tapped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_business_landmark_pointer_entered(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkPointerEnteredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_business_landmark_pointer_entered(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_business_landmark_pointer_exited(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkPointerExitedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_business_landmark_pointer_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_pointer_entered(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlTransitFeaturePointerEnteredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_transit_feature_pointer_entered(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_pointer_exited(self, value: winrt.windows.foundation.TypedEventHandler[MapControl, MapControlTransitFeaturePointerExitedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_transit_feature_pointer_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MapControlTransitFeatureClickEventArgs(winrt.system.Object):
    display_name: str
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    transit_properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeatureClickEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeatureClickEventArgs]) -> MapControlTransitFeatureClickEventArgs:...

class MapControlTransitFeaturePointerEnteredEventArgs(winrt.system.Object):
    display_name: str
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    transit_properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeaturePointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeaturePointerEnteredEventArgs]) -> MapControlTransitFeaturePointerEnteredEventArgs:...

class MapControlTransitFeaturePointerExitedEventArgs(winrt.system.Object):
    display_name: str
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    transit_properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeaturePointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeaturePointerExitedEventArgs]) -> MapControlTransitFeaturePointerExitedEventArgs:...

class MapControlTransitFeatureRightTappedEventArgs(winrt.system.Object):
    display_name: str
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    transit_properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeatureRightTappedEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeatureRightTappedEventArgs]) -> MapControlTransitFeatureRightTappedEventArgs:...

class MapCustomExperience(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapCustomExperience: ...
    def __new__(cls: typing.Type[MapCustomExperience]) -> MapCustomExperience:...

class MapCustomExperienceChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapCustomExperienceChangedEventArgs: ...
    def __new__(cls: typing.Type[MapCustomExperienceChangedEventArgs]) -> MapCustomExperienceChangedEventArgs:...

class MapElement(winrt.system.Object):
    z_index: winrt.system.Int32
    visible: winrt.system.Boolean
    map_tab_index: winrt.system.Int32
    tag: typing.Optional[winrt.system.Object]
    map_style_sheet_entry_state: str
    map_style_sheet_entry: str
    is_enabled: winrt.system.Boolean
    visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    z_index_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    map_tab_index_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    map_style_sheet_entry_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    map_style_sheet_entry_state_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    tag_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElement: ...
    def __new__(cls: typing.Type[MapElement]) -> MapElement:...

class MapElement3D(winrt.system.Object):
    scale: winrt.windows.foundation.numerics.Vector3
    roll: winrt.system.Double
    pitch: winrt.system.Double
    model: typing.Optional[MapModel3D]
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    heading: winrt.system.Double
    heading_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    location_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pitch_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    roll_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    scale_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElement3D: ...
    def __new__(cls: typing.Type[MapElement3D]) -> MapElement3D:...

class MapElementClickEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_elements: typing.Optional[winrt.windows.foundation.collections.IVector[MapElement]]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementClickEventArgs: ...
    def __new__(cls: typing.Type[MapElementClickEventArgs]) -> MapElementClickEventArgs:...

class MapElementPointerEnteredEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_element: typing.Optional[MapElement]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementPointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapElementPointerEnteredEventArgs]) -> MapElementPointerEnteredEventArgs:...

class MapElementPointerExitedEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_element: typing.Optional[MapElement]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementPointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapElementPointerExitedEventArgs]) -> MapElementPointerExitedEventArgs:...

class MapElementsLayer(winrt.system.Object):
    map_elements: typing.Optional[winrt.windows.foundation.collections.IVector[MapElement]]
    map_elements_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayer: ...
    def __new__(cls: typing.Type[MapElementsLayer]) -> MapElementsLayer:...
    def add_map_context_requested(self, handler: winrt.windows.foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerContextRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_context_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_click(self, handler: winrt.windows.foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerClickEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_element_click(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerPointerEnteredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_entered(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerPointerExitedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MapElementsLayerClickEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_elements: typing.Optional[winrt.windows.foundation.collections.IVector[MapElement]]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerClickEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerClickEventArgs]) -> MapElementsLayerClickEventArgs:...

class MapElementsLayerContextRequestedEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_elements: typing.Optional[winrt.windows.foundation.collections.IVectorView[MapElement]]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerContextRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerContextRequestedEventArgs]) -> MapElementsLayerContextRequestedEventArgs:...

class MapElementsLayerPointerEnteredEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_element: typing.Optional[MapElement]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerPointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerPointerEnteredEventArgs]) -> MapElementsLayerPointerEnteredEventArgs:...

class MapElementsLayerPointerExitedEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    map_element: typing.Optional[MapElement]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerPointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerPointerExitedEventArgs]) -> MapElementsLayerPointerExitedEventArgs:...

class MapIcon(winrt.system.Object):
    title: str
    normalized_anchor_point: winrt.windows.foundation.Point
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    image: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    collision_behavior_desired: MapElementCollisionBehavior
    location_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    normalized_anchor_point_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    title_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    collision_behavior_desired_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapIcon: ...
    def __new__(cls: typing.Type[MapIcon]) -> MapIcon:...

class MapInputEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapInputEventArgs: ...
    def __new__(cls: typing.Type[MapInputEventArgs]) -> MapInputEventArgs:...

class MapItemsControl(winrt.system.Object):
    items_source: typing.Optional[winrt.system.Object]
    item_template: typing.Optional[winrt.windows.ui.xaml.DataTemplate]
    items: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.xaml.DependencyObject]]
    item_template_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    items_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    items_source_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapItemsControl: ...
    def __new__(cls: typing.Type[MapItemsControl]) -> MapItemsControl:...

class MapLayer(winrt.system.Object):
    z_index: winrt.system.Int32
    visible: winrt.system.Boolean
    map_tab_index: winrt.system.Int32
    map_tab_index_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    z_index_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapLayer: ...
    def __new__(cls: typing.Type[MapLayer]) -> MapLayer:...

class MapModel3D(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapModel3D: ...
    def __new__(cls: typing.Type[MapModel3D]) -> MapModel3D:...
    @typing.overload
    @staticmethod
    def create_from3_m_f_async(source: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], /) -> winrt.windows.foundation.IAsyncOperation[MapModel3D]: ...
    @typing.overload
    @staticmethod
    def create_from3_m_f_async(source: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], shading_option: MapModel3DShadingOption, /) -> winrt.windows.foundation.IAsyncOperation[MapModel3D]: ...

class MapPolygon(winrt.system.Object):
    stroke_thickness: winrt.system.Double
    stroke_dashed: winrt.system.Boolean
    stroke_color: winrt.windows.ui.Color
    path: typing.Optional[winrt.windows.devices.geolocation.Geopath]
    fill_color: winrt.windows.ui.Color
    paths: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.devices.geolocation.Geopath]]
    path_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    stroke_dashed_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    stroke_thickness_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapPolygon: ...
    def __new__(cls: typing.Type[MapPolygon]) -> MapPolygon:...

class MapPolyline(winrt.system.Object):
    stroke_thickness: winrt.system.Double
    stroke_dashed: winrt.system.Boolean
    stroke_color: winrt.windows.ui.Color
    path: typing.Optional[winrt.windows.devices.geolocation.Geopath]
    path_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    stroke_dashed_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapPolyline: ...
    def __new__(cls: typing.Type[MapPolyline]) -> MapPolyline:...

class MapRightTappedEventArgs(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRightTappedEventArgs: ...
    def __new__(cls: typing.Type[MapRightTappedEventArgs]) -> MapRightTappedEventArgs:...

class MapRouteView(winrt.system.Object):
    route_color: winrt.windows.ui.Color
    outline_color: winrt.windows.ui.Color
    route: typing.Optional[winrt.windows.services.maps.MapRoute]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRouteView: ...
    def __new__(cls: typing.Type[MapRouteView], route: typing.Optional[winrt.windows.services.maps.MapRoute]) -> MapRouteView:...

class MapScene(winrt.system.Object):
    target_camera: typing.Optional[MapCamera]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapScene: ...
    @typing.overload
    @staticmethod
    def create_from_bounding_box(bounds: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    @staticmethod
    def create_from_bounding_box(bounds: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    @staticmethod
    def create_from_camera(camera: typing.Optional[MapCamera], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    @staticmethod
    def create_from_location(location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    @staticmethod
    def create_from_location(location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    @typing.overload
    @staticmethod
    def create_from_location_and_radius(location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], radius_in_meters: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    @typing.overload
    @staticmethod
    def create_from_location_and_radius(location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], radius_in_meters: winrt.system.Double, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    @typing.overload
    @staticmethod
    def create_from_locations(locations: typing.Iterable[winrt.windows.devices.geolocation.Geopoint], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    @staticmethod
    def create_from_locations(locations: typing.Iterable[winrt.windows.devices.geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    def add_target_camera_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MapScene, MapTargetCameraChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_target_camera_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MapStyleSheet(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapStyleSheet: ...
    @staticmethod
    def aerial() -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def aerial_with_overlay() -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def combine(style_sheets: typing.Iterable[MapStyleSheet], /) -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def parse_from_json(style_as_json: str, /) -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def road_dark() -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def road_high_contrast_dark() -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def road_high_contrast_light() -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def road_light() -> typing.Optional[MapStyleSheet]: ...
    @staticmethod
    def try_parse_from_json(style_as_json: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[MapStyleSheet]]: ...

class MapStyleSheetEntries(winrt.system.Object):
    admin_district: typing.ClassVar[str]
    admin_district_capital: typing.ClassVar[str]
    airport: typing.ClassVar[str]
    area: typing.ClassVar[str]
    arterial_road: typing.ClassVar[str]
    building: typing.ClassVar[str]
    business: typing.ClassVar[str]
    capital: typing.ClassVar[str]
    cemetery: typing.ClassVar[str]
    continent: typing.ClassVar[str]
    controlled_access_highway: typing.ClassVar[str]
    country_region: typing.ClassVar[str]
    country_region_capital: typing.ClassVar[str]
    district: typing.ClassVar[str]
    driving_route: typing.ClassVar[str]
    education: typing.ClassVar[str]
    education_building: typing.ClassVar[str]
    food_point: typing.ClassVar[str]
    forest: typing.ClassVar[str]
    golf_course: typing.ClassVar[str]
    high_speed_ramp: typing.ClassVar[str]
    highway: typing.ClassVar[str]
    indigenous_peoples_reserve: typing.ClassVar[str]
    island: typing.ClassVar[str]
    major_road: typing.ClassVar[str]
    medical: typing.ClassVar[str]
    medical_building: typing.ClassVar[str]
    military: typing.ClassVar[str]
    natural_point: typing.ClassVar[str]
    nautical: typing.ClassVar[str]
    neighborhood: typing.ClassVar[str]
    park: typing.ClassVar[str]
    peak: typing.ClassVar[str]
    playing_field: typing.ClassVar[str]
    point: typing.ClassVar[str]
    point_of_interest: typing.ClassVar[str]
    political: typing.ClassVar[str]
    populated_place: typing.ClassVar[str]
    railway: typing.ClassVar[str]
    ramp: typing.ClassVar[str]
    reserve: typing.ClassVar[str]
    river: typing.ClassVar[str]
    road: typing.ClassVar[str]
    road_exit: typing.ClassVar[str]
    road_shield: typing.ClassVar[str]
    route_line: typing.ClassVar[str]
    runway: typing.ClassVar[str]
    sand: typing.ClassVar[str]
    shopping_center: typing.ClassVar[str]
    stadium: typing.ClassVar[str]
    street: typing.ClassVar[str]
    structure: typing.ClassVar[str]
    toll_road: typing.ClassVar[str]
    trail: typing.ClassVar[str]
    transit: typing.ClassVar[str]
    transit_building: typing.ClassVar[str]
    transportation: typing.ClassVar[str]
    unpaved_street: typing.ClassVar[str]
    vegetation: typing.ClassVar[str]
    volcanic_peak: typing.ClassVar[str]
    walking_route: typing.ClassVar[str]
    water: typing.ClassVar[str]
    water_point: typing.ClassVar[str]
    water_route: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapStyleSheetEntries: ...

class MapStyleSheetEntryStates(winrt.system.Object):
    disabled: typing.ClassVar[str]
    hover: typing.ClassVar[str]
    selected: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapStyleSheetEntryStates: ...

class MapTargetCameraChangedEventArgs(winrt.system.Object):
    camera: typing.Optional[MapCamera]
    change_reason: MapCameraChangeReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTargetCameraChangedEventArgs: ...
    def __new__(cls: typing.Type[MapTargetCameraChangedEventArgs]) -> MapTargetCameraChangedEventArgs:...

class MapTileBitmapRequest(winrt.system.Object):
    pixel_data: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileBitmapRequest: ...
    def __new__(cls: typing.Type[MapTileBitmapRequest]) -> MapTileBitmapRequest:...
    def get_deferral(self) -> typing.Optional[MapTileBitmapRequestDeferral]: ...

class MapTileBitmapRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileBitmapRequestDeferral: ...
    def __new__(cls: typing.Type[MapTileBitmapRequestDeferral]) -> MapTileBitmapRequestDeferral:...
    def complete(self) -> None: ...

class MapTileBitmapRequestedEventArgs(winrt.system.Object):
    request: typing.Optional[MapTileBitmapRequest]
    x: winrt.system.Int32
    y: winrt.system.Int32
    zoom_level: winrt.system.Int32
    frame_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileBitmapRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapTileBitmapRequestedEventArgs]) -> MapTileBitmapRequestedEventArgs:...

class MapTileDataSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileDataSource: ...
    def __new__(cls: typing.Type[MapTileDataSource]) -> MapTileDataSource:...

class MapTileSource(winrt.system.Object):
    zoom_level_range: MapZoomLevelRange
    z_index: winrt.system.Int32
    visible: winrt.system.Boolean
    tile_pixel_size: winrt.system.Int32
    layer: MapTileLayer
    is_transparency_enabled: winrt.system.Boolean
    is_retry_enabled: winrt.system.Boolean
    is_fading_enabled: winrt.system.Boolean
    data_source: typing.Optional[MapTileDataSource]
    bounds: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox]
    allow_overstretch: winrt.system.Boolean
    frame_duration: datetime.timedelta
    frame_count: winrt.system.Int32
    auto_play: winrt.system.Boolean
    animation_state: MapTileAnimationState
    allow_overstretch_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    bounds_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    data_source_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_fading_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_retry_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_transparency_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    layer_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    tile_pixel_size_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    visible_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    z_index_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    zoom_level_range_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    animation_state_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    auto_play_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    frame_count_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    frame_duration_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileSource: ...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource]) -> MapTileSource:...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource]) -> MapTileSource:...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource], zoom_level_range: MapZoomLevelRange) -> MapTileSource:...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource], zoom_level_range: MapZoomLevelRange, bounds: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox]) -> MapTileSource:...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource], zoom_level_range: MapZoomLevelRange, bounds: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox], tile_size_in_pixels: winrt.system.Int32) -> MapTileSource:...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def stop(self) -> None: ...

class MapTileUriRequest(winrt.system.Object):
    uri: typing.Optional[winrt.windows.foundation.Uri]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileUriRequest: ...
    def __new__(cls: typing.Type[MapTileUriRequest]) -> MapTileUriRequest:...
    def get_deferral(self) -> typing.Optional[MapTileUriRequestDeferral]: ...

class MapTileUriRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileUriRequestDeferral: ...
    def __new__(cls: typing.Type[MapTileUriRequestDeferral]) -> MapTileUriRequestDeferral:...
    def complete(self) -> None: ...

class MapTileUriRequestedEventArgs(winrt.system.Object):
    request: typing.Optional[MapTileUriRequest]
    x: winrt.system.Int32
    y: winrt.system.Int32
    zoom_level: winrt.system.Int32
    frame_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileUriRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapTileUriRequestedEventArgs]) -> MapTileUriRequestedEventArgs:...

class StreetsideExperience(winrt.system.Object):
    zoom_buttons_visible: winrt.system.Boolean
    street_labels_visible: winrt.system.Boolean
    overview_map_visible: winrt.system.Boolean
    exit_button_visible: winrt.system.Boolean
    cursor_visible: winrt.system.Boolean
    address_text_visible: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StreetsideExperience: ...
    @typing.overload
    def __new__(cls: typing.Type[StreetsideExperience], panorama: typing.Optional[StreetsidePanorama]) -> StreetsideExperience:...
    @typing.overload
    def __new__(cls: typing.Type[StreetsideExperience], panorama: typing.Optional[StreetsidePanorama], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, field_of_view_in_degrees: winrt.system.Double) -> StreetsideExperience:...

class StreetsidePanorama(winrt.system.Object):
    location: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StreetsidePanorama: ...
    @typing.overload
    @staticmethod
    def find_nearby_async(location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[StreetsidePanorama]: ...
    @typing.overload
    @staticmethod
    def find_nearby_async(location: typing.Optional[winrt.windows.devices.geolocation.Geopoint], radius_in_meters: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[StreetsidePanorama]: ...

