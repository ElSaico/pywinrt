# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.data.json
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system

from . import DiagnosticActionState

Self = typing.TypeVar('Self')

class DiagnosticActionResult(winrt.system.Object):
    extended_error: winrt.windows.foundation.HResult
    results: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiagnosticActionResult: ...

class DiagnosticInvoker(winrt.system.Object):
    is_supported: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiagnosticInvoker: ...
    @staticmethod
    def get_default() -> typing.Optional[DiagnosticInvoker]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[DiagnosticInvoker]: ...
    def run_diagnostic_action_async(self, context: typing.Optional[winrt.windows.data.json.JsonObject], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[DiagnosticActionResult, DiagnosticActionState]: ...
    def run_diagnostic_action_from_string_async(self, context: str, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[DiagnosticActionResult, DiagnosticActionState]: ...

class ProcessCpuUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessCpuUsage: ...
    def get_report(self) -> typing.Optional[ProcessCpuUsageReport]: ...

class ProcessCpuUsageReport(winrt.system.Object):
    kernel_time: datetime.timedelta
    user_time: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessCpuUsageReport: ...

class ProcessDiagnosticInfo(winrt.system.Object):
    cpu_usage: typing.Optional[ProcessCpuUsage]
    disk_usage: typing.Optional[ProcessDiskUsage]
    executable_file_name: str
    memory_usage: typing.Optional[ProcessMemoryUsage]
    parent: typing.Optional[ProcessDiagnosticInfo]
    process_id: winrt.system.UInt32
    process_start_time: datetime.datetime
    is_packaged: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessDiagnosticInfo: ...
    def get_app_diagnostic_infos(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.system.AppDiagnosticInfo]]: ...
    @staticmethod
    def get_for_current_process() -> typing.Optional[ProcessDiagnosticInfo]: ...
    @staticmethod
    def get_for_processes() -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ProcessDiagnosticInfo]]: ...
    @staticmethod
    def try_get_for_process_id(process_id: winrt.system.UInt32, /) -> typing.Optional[ProcessDiagnosticInfo]: ...

class ProcessDiskUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessDiskUsage: ...
    def get_report(self) -> typing.Optional[ProcessDiskUsageReport]: ...

class ProcessDiskUsageReport(winrt.system.Object):
    bytes_read_count: winrt.system.Int64
    bytes_written_count: winrt.system.Int64
    other_bytes_count: winrt.system.Int64
    other_operation_count: winrt.system.Int64
    read_operation_count: winrt.system.Int64
    write_operation_count: winrt.system.Int64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessDiskUsageReport: ...

class ProcessMemoryUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessMemoryUsage: ...
    def get_report(self) -> typing.Optional[ProcessMemoryUsageReport]: ...

class ProcessMemoryUsageReport(winrt.system.Object):
    non_paged_pool_size_in_bytes: winrt.system.UInt64
    page_fault_count: winrt.system.UInt32
    page_file_size_in_bytes: winrt.system.UInt64
    paged_pool_size_in_bytes: winrt.system.UInt64
    peak_non_paged_pool_size_in_bytes: winrt.system.UInt64
    peak_page_file_size_in_bytes: winrt.system.UInt64
    peak_paged_pool_size_in_bytes: winrt.system.UInt64
    peak_virtual_memory_size_in_bytes: winrt.system.UInt64
    peak_working_set_size_in_bytes: winrt.system.UInt64
    private_page_count: winrt.system.UInt64
    virtual_memory_size_in_bytes: winrt.system.UInt64
    working_set_size_in_bytes: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessMemoryUsageReport: ...

class SystemCpuUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemCpuUsage: ...
    def get_report(self) -> typing.Optional[SystemCpuUsageReport]: ...

class SystemCpuUsageReport(winrt.system.Object):
    idle_time: datetime.timedelta
    kernel_time: datetime.timedelta
    user_time: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemCpuUsageReport: ...

class SystemDiagnosticInfo(winrt.system.Object):
    cpu_usage: typing.Optional[SystemCpuUsage]
    memory_usage: typing.Optional[SystemMemoryUsage]
    preferred_architecture: typing.ClassVar[winrt.windows.system.ProcessorArchitecture]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemDiagnosticInfo: ...
    @staticmethod
    def get_for_current_system() -> typing.Optional[SystemDiagnosticInfo]: ...
    @staticmethod
    def is_architecture_supported(type: winrt.windows.system.ProcessorArchitecture, /) -> winrt.system.Boolean: ...

class SystemMemoryUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemMemoryUsage: ...
    def get_report(self) -> typing.Optional[SystemMemoryUsageReport]: ...

class SystemMemoryUsageReport(winrt.system.Object):
    available_size_in_bytes: winrt.system.UInt64
    committed_size_in_bytes: winrt.system.UInt64
    total_physical_size_in_bytes: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemMemoryUsageReport: ...

