# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.applicationmodel
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.management.deployment

from . import EnterpriseEnrollmentStatus, EnterpriseStatus

Self = typing.TypeVar('Self')

class Enterprise(winrt.system.Object):
    enrollment_valid_from: datetime.datetime
    enrollment_valid_to: datetime.datetime
    id: uuid.UUID
    name: str
    status: EnterpriseStatus
    workplace_id: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Enterprise: ...

class EnterpriseEnrollmentManager(winrt.system.Object):
    current_enterprise: typing.ClassVar[typing.Optional[Enterprise]]
    enrolled_enterprises: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[Enterprise]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EnterpriseEnrollmentManager: ...
    @staticmethod
    def request_enrollment_async(enrollment_token: str, /) -> winrt.windows.foundation.IAsyncOperation[EnterpriseEnrollmentResult]: ...
    @staticmethod
    def request_unenrollment_async(enterprise: typing.Optional[Enterprise], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @staticmethod
    def validate_enterprises_async() -> winrt.windows.foundation.IAsyncAction: ...

class EnterpriseEnrollmentResult(winrt.system.Object):
    enrolled_enterprise: typing.Optional[Enterprise]
    status: EnterpriseEnrollmentStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EnterpriseEnrollmentResult: ...

class InstallationManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InstallationManager: ...
    @typing.overload
    @staticmethod
    def add_package_async(title: str, source_location: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[PackageInstallResult, winrt.system.UInt32]: ...
    @typing.overload
    @staticmethod
    def add_package_async(title: str, source_location: typing.Optional[winrt.windows.foundation.Uri], instance_id: str, offer_id: str, license: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[PackageInstallResult, winrt.system.UInt32]: ...
    @typing.overload
    @staticmethod
    def find_packages() -> typing.Optional[winrt.windows.foundation.collections.IIterable[winrt.windows.applicationmodel.Package]]: ...
    @typing.overload
    @staticmethod
    def find_packages(package_name: str, package_publisher: str, /) -> typing.Optional[winrt.windows.foundation.collections.IIterable[winrt.windows.applicationmodel.Package]]: ...
    @staticmethod
    def find_packages_for_current_publisher() -> typing.Optional[winrt.windows.foundation.collections.IIterable[winrt.windows.applicationmodel.Package]]: ...
    @staticmethod
    def get_pending_package_installs() -> typing.Optional[winrt.windows.foundation.collections.IIterable[winrt.windows.foundation.IAsyncOperationWithProgress[PackageInstallResult, winrt.system.UInt32]]]: ...
    @staticmethod
    def register_package_async(manifest_uri: typing.Optional[winrt.windows.foundation.Uri], dependency_package_uris: typing.Iterable[winrt.windows.foundation.Uri], deployment_options: winrt.windows.management.deployment.DeploymentOptions, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[PackageInstallResult, winrt.system.UInt32]: ...
    @staticmethod
    def remove_package_async(package_full_name: str, removal_options: winrt.windows.management.deployment.RemovalOptions, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[PackageInstallResult, winrt.system.UInt32]: ...

class PackageInstallResult(winrt.system.Object):
    install_state: winrt.windows.management.deployment.PackageInstallState
    product_id: str
    error_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageInstallResult: ...

