# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage
import winrt.windows.storage.streams

from . import NodeType

Self = typing.TypeVar('Self')

class DtdEntity(winrt.system.Object):
    notation_name: typing.Optional[winrt.system.Object]
    public_id: typing.Optional[winrt.system.Object]
    system_id: typing.Optional[winrt.system.Object]
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DtdEntity: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class DtdNotation(winrt.system.Object):
    public_id: typing.Optional[winrt.system.Object]
    system_id: typing.Optional[winrt.system.Object]
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DtdNotation: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class XmlAttribute(winrt.system.Object):
    value: str
    specified: bool
    name: str
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlAttribute: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class XmlCDataSection(winrt.system.Object):
    data: str
    length: winrt.system.UInt32
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlCDataSection: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def split_text(self, offset: winrt.system.UInt32, /) -> typing.Optional[IXmlText]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...

class XmlComment(winrt.system.Object):
    data: str
    length: winrt.system.UInt32
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlComment: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...

class XmlDocument(winrt.system.Object):
    doctype: typing.Optional[XmlDocumentType]
    document_element: typing.Optional[XmlElement]
    document_uri: str
    implementation: typing.Optional[XmlDomImplementation]
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    owner_document: typing.Optional[XmlDocument]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDocument: ...
    def __new__(cls: typing.Type[XmlDocument]) -> XmlDocument:...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def create_attribute(self, name: str, /) -> typing.Optional[XmlAttribute]: ...
    def create_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], qualified_name: str, /) -> typing.Optional[XmlAttribute]: ...
    def create_c_data_section(self, data: str, /) -> typing.Optional[XmlCDataSection]: ...
    def create_comment(self, data: str, /) -> typing.Optional[XmlComment]: ...
    def create_document_fragment(self) -> typing.Optional[XmlDocumentFragment]: ...
    def create_element(self, tag_name: str, /) -> typing.Optional[XmlElement]: ...
    def create_element_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], qualified_name: str, /) -> typing.Optional[XmlElement]: ...
    def create_entity_reference(self, name: str, /) -> typing.Optional[XmlEntityReference]: ...
    def create_processing_instruction(self, target: str, data: str, /) -> typing.Optional[XmlProcessingInstruction]: ...
    def create_text_node(self, data: str, /) -> typing.Optional[XmlText]: ...
    def get_element_by_id(self, element_id: str, /) -> typing.Optional[XmlElement]: ...
    def get_elements_by_tag_name(self, tag_name: str, /) -> typing.Optional[XmlNodeList]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def import_node(self, node: typing.Optional[IXmlNode], deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    @typing.overload
    @staticmethod
    def load_from_file_async(file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...
    @typing.overload
    @staticmethod
    def load_from_file_async(file: typing.Optional[winrt.windows.storage.IStorageFile], load_settings: typing.Optional[XmlLoadSettings], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...
    @typing.overload
    @staticmethod
    def load_from_uri_async(uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...
    @typing.overload
    @staticmethod
    def load_from_uri_async(uri: typing.Optional[winrt.windows.foundation.Uri], load_settings: typing.Optional[XmlLoadSettings], /) -> winrt.windows.foundation.IAsyncOperation[XmlDocument]: ...
    @typing.overload
    def load_xml(self, xml: str, /) -> None: ...
    @typing.overload
    def load_xml(self, xml: str, load_settings: typing.Optional[XmlLoadSettings], /) -> None: ...
    @typing.overload
    def load_xml_from_buffer(self, buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...
    @typing.overload
    def load_xml_from_buffer(self, buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], load_settings: typing.Optional[XmlLoadSettings], /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def save_to_file_async(self, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncAction: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class XmlDocumentFragment(winrt.system.Object):
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    parent_node: typing.Optional[IXmlNode]
    child_nodes: typing.Optional[XmlNodeList]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDocumentFragment: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class XmlDocumentType(winrt.system.Object):
    entities: typing.Optional[XmlNamedNodeMap]
    name: str
    notations: typing.Optional[XmlNamedNodeMap]
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDocumentType: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class XmlDomImplementation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlDomImplementation: ...
    def has_feature(self, feature: str, version: typing.Optional[winrt.system.Object], /) -> bool: ...

class XmlElement(winrt.system.Object):
    tag_name: str
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    namespace_uri: typing.Optional[winrt.system.Object]
    node_type: NodeType
    node_name: str
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    parent_node: typing.Optional[IXmlNode]
    child_nodes: typing.Optional[XmlNodeList]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlElement: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_attribute(self, attribute_name: str, /) -> str: ...
    def get_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], local_name: str, /) -> str: ...
    def get_attribute_node(self, attribute_name: str, /) -> typing.Optional[XmlAttribute]: ...
    def get_attribute_node_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], local_name: str, /) -> typing.Optional[XmlAttribute]: ...
    def get_elements_by_tag_name(self, tag_name: str, /) -> typing.Optional[XmlNodeList]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_attribute(self, attribute_name: str, /) -> None: ...
    def remove_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], local_name: str, /) -> None: ...
    def remove_attribute_node(self, attribute_node: typing.Optional[XmlAttribute], /) -> typing.Optional[XmlAttribute]: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def set_attribute(self, attribute_name: str, attribute_value: str, /) -> None: ...
    def set_attribute_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], qualified_name: str, value: str, /) -> None: ...
    def set_attribute_node(self, new_attribute: typing.Optional[XmlAttribute], /) -> typing.Optional[XmlAttribute]: ...
    def set_attribute_node_n_s(self, new_attribute: typing.Optional[XmlAttribute], /) -> typing.Optional[XmlAttribute]: ...

class XmlEntityReference(winrt.system.Object):
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    parent_node: typing.Optional[IXmlNode]
    child_nodes: typing.Optional[XmlNodeList]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlEntityReference: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class XmlLoadSettings(winrt.system.Object):
    validate_on_parse: bool
    resolve_externals: bool
    prohibit_dtd: bool
    max_element_depth: winrt.system.UInt32
    element_content_white_space: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlLoadSettings: ...
    def __new__(cls: typing.Type[XmlLoadSettings]) -> XmlLoadSettings:...

class XmlNamedNodeMap(winrt.system.Object, typing.Sequence[IXmlNode]):
    length: winrt.system.UInt32
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> IXmlNode: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[IXmlNode]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlNamedNodeMap: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IXmlNode]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[IXmlNode], /) -> winrt.system.UInt32: ...
    def get_named_item(self, name: str, /) -> typing.Optional[IXmlNode]: ...
    def get_named_item_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], name: str, /) -> typing.Optional[IXmlNode]: ...
    def index_of(self, value: typing.Optional[IXmlNode], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def item(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...
    def remove_named_item(self, name: str, /) -> typing.Optional[IXmlNode]: ...
    def remove_named_item_n_s(self, namespace_uri: typing.Optional[winrt.system.Object], name: str, /) -> typing.Optional[IXmlNode]: ...
    def set_named_item(self, node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def set_named_item_n_s(self, node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...

class XmlNodeList(winrt.system.Object, typing.Sequence[IXmlNode]):
    length: winrt.system.UInt32
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> IXmlNode: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[IXmlNode]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlNodeList: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IXmlNode]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[IXmlNode], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[IXmlNode], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def item(self, index: winrt.system.UInt32, /) -> typing.Optional[IXmlNode]: ...

class XmlProcessingInstruction(winrt.system.Object):
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    attributes: typing.Optional[XmlNamedNodeMap]
    first_child: typing.Optional[IXmlNode]
    child_nodes: typing.Optional[XmlNodeList]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    owner_document: typing.Optional[XmlDocument]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    data: str
    target: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlProcessingInstruction: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class XmlText(winrt.system.Object):
    data: str
    length: winrt.system.UInt32
    prefix: typing.Optional[winrt.system.Object]
    node_value: typing.Optional[winrt.system.Object]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    attributes: typing.Optional[XmlNamedNodeMap]
    owner_document: typing.Optional[XmlDocument]
    child_nodes: typing.Optional[XmlNodeList]
    parent_node: typing.Optional[IXmlNode]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XmlText: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def split_text(self, offset: winrt.system.UInt32, /) -> typing.Optional[IXmlText]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...

class IXmlCharacterData(winrt.system.Object):
    data: str
    length: winrt.system.UInt32
    attributes: typing.Optional[XmlNamedNodeMap]
    child_nodes: typing.Optional[XmlNodeList]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    node_value: typing.Optional[winrt.system.Object]
    owner_document: typing.Optional[XmlDocument]
    parent_node: typing.Optional[IXmlNode]
    prefix: typing.Optional[winrt.system.Object]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlCharacterData: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...

class IXmlNode(winrt.system.Object):
    attributes: typing.Optional[XmlNamedNodeMap]
    child_nodes: typing.Optional[XmlNodeList]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    node_value: typing.Optional[winrt.system.Object]
    owner_document: typing.Optional[XmlDocument]
    parent_node: typing.Optional[IXmlNode]
    prefix: typing.Optional[winrt.system.Object]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlNode: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class IXmlNodeSelector(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlNodeSelector: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...

class IXmlNodeSerializer(winrt.system.Object):
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlNodeSerializer: ...
    def get_xml(self) -> str: ...

class IXmlText(winrt.system.Object):
    data: str
    length: winrt.system.UInt32
    attributes: typing.Optional[XmlNamedNodeMap]
    child_nodes: typing.Optional[XmlNodeList]
    first_child: typing.Optional[IXmlNode]
    last_child: typing.Optional[IXmlNode]
    local_name: typing.Optional[winrt.system.Object]
    namespace_uri: typing.Optional[winrt.system.Object]
    next_sibling: typing.Optional[IXmlNode]
    node_name: str
    node_type: NodeType
    node_value: typing.Optional[winrt.system.Object]
    owner_document: typing.Optional[XmlDocument]
    parent_node: typing.Optional[IXmlNode]
    prefix: typing.Optional[winrt.system.Object]
    previous_sibling: typing.Optional[IXmlNode]
    inner_text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXmlText: ...
    def append_child(self, new_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def append_data(self, data: str, /) -> None: ...
    def clone_node(self, deep: bool, /) -> typing.Optional[IXmlNode]: ...
    def delete_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> None: ...
    def get_xml(self) -> str: ...
    def has_child_nodes(self) -> bool: ...
    def insert_before(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def insert_data(self, offset: winrt.system.UInt32, data: str, /) -> None: ...
    def normalize(self) -> None: ...
    def remove_child(self, child_node: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_child(self, new_child: typing.Optional[IXmlNode], reference_child: typing.Optional[IXmlNode], /) -> typing.Optional[IXmlNode]: ...
    def replace_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, data: str, /) -> None: ...
    def select_nodes(self, xpath: str, /) -> typing.Optional[XmlNodeList]: ...
    def select_nodes_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[XmlNodeList]: ...
    def select_single_node(self, xpath: str, /) -> typing.Optional[IXmlNode]: ...
    def select_single_node_n_s(self, xpath: str, namespaces: typing.Optional[winrt.system.Object], /) -> typing.Optional[IXmlNode]: ...
    def split_text(self, offset: winrt.system.UInt32, /) -> typing.Optional[IXmlText]: ...
    def substring_data(self, offset: winrt.system.UInt32, count: winrt.system.UInt32, /) -> str: ...

