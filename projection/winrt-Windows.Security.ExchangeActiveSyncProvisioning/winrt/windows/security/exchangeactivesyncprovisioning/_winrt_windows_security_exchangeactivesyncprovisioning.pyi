# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation

from . import EasDisallowConvenienceLogonResult, EasEncryptionProviderType, EasMaxInactivityTimeLockResult, EasMaxPasswordFailedAttemptsResult, EasMinPasswordComplexCharactersResult, EasMinPasswordLengthResult, EasPasswordExpirationResult, EasPasswordHistoryResult, EasRequireEncryptionResult

Self = typing.TypeVar('Self')

class EasClientDeviceInformation(winrt.system.Object):
    friendly_name: str
    id: winrt.system.Guid
    operating_system: str
    system_manufacturer: str
    system_product_name: str
    system_sku: str
    system_firmware_version: str
    system_hardware_version: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EasClientDeviceInformation: ...
    def __new__(cls: typing.Type[EasClientDeviceInformation]) -> EasClientDeviceInformation:...

class EasClientSecurityPolicy(winrt.system.Object):
    require_encryption: winrt.system.Boolean
    password_history: winrt.system.UInt32
    password_expiration: datetime.timedelta
    min_password_length: winrt.system.UInt8
    min_password_complex_characters: winrt.system.UInt8
    max_password_failed_attempts: winrt.system.UInt8
    max_inactivity_time_lock: datetime.timedelta
    disallow_convenience_logon: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EasClientSecurityPolicy: ...
    def __new__(cls: typing.Type[EasClientSecurityPolicy]) -> EasClientSecurityPolicy:...
    def apply_async(self) -> winrt.windows.foundation.IAsyncOperation[EasComplianceResults]: ...
    def check_compliance(self) -> typing.Optional[EasComplianceResults]: ...

class EasComplianceResults(winrt.system.Object):
    compliant: winrt.system.Boolean
    disallow_convenience_logon_result: EasDisallowConvenienceLogonResult
    max_inactivity_time_lock_result: EasMaxInactivityTimeLockResult
    max_password_failed_attempts_result: EasMaxPasswordFailedAttemptsResult
    min_password_complex_characters_result: EasMinPasswordComplexCharactersResult
    min_password_length_result: EasMinPasswordLengthResult
    password_expiration_result: EasPasswordExpirationResult
    password_history_result: EasPasswordHistoryResult
    require_encryption_result: EasRequireEncryptionResult
    encryption_provider_type: EasEncryptionProviderType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EasComplianceResults: ...

