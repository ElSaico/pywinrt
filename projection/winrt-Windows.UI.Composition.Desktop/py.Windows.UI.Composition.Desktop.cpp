// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.UI.Composition.Desktop.h"


namespace py::cpp::Windows::UI::Composition::Desktop
{
    struct module_state
    {
        PyTypeObject* type_DesktopWindowTarget;
    };

    // ----- DesktopWindowTarget class --------------------
    static constexpr const char* const type_name_DesktopWindowTarget = "DesktopWindowTarget";

    static PyObject* _new_DesktopWindowTarget(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_DesktopWindowTarget);
        return nullptr;
    }

    static void _dealloc_DesktopWindowTarget(py::wrapper::Windows::UI::Composition::Desktop::DesktopWindowTarget* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DesktopWindowTarget_get_IsTopmost(py::wrapper::Windows::UI::Composition::Desktop::DesktopWindowTarget* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Composition.Desktop.DesktopWindowTarget", L"IsTopmost"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsTopmost());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DesktopWindowTarget(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Composition::Desktop::DesktopWindowTarget>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DesktopWindowTarget(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Composition::Desktop::DesktopWindowTarget>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DesktopWindowTarget[] = {
        { "_assign_array_", _assign_array_DesktopWindowTarget, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DesktopWindowTarget), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DesktopWindowTarget[] = {
        { "is_topmost", reinterpret_cast<getter>(DesktopWindowTarget_get_IsTopmost), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DesktopWindowTarget[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DesktopWindowTarget) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DesktopWindowTarget) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DesktopWindowTarget) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DesktopWindowTarget) },
        { },
    };

    static PyType_Spec type_spec_DesktopWindowTarget =
    {
        "_winrt_Windows_UI_Composition_Desktop.DesktopWindowTarget",
        sizeof(py::wrapper::Windows::UI::Composition::Desktop::DesktopWindowTarget),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DesktopWindowTarget
    };

    // ----- Windows.UI.Composition.Desktop Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Composition::Desktop");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_DesktopWindowTarget);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_DesktopWindowTarget);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_Windows_UI_Composition_Desktop",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::UI::Composition::Desktop

PyMODINIT_FUNC PyInit__winrt_Windows_UI_Composition_Desktop(void) noexcept
{
    using namespace py::cpp::Windows::UI::Composition::Desktop;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    WINRT_ASSERT(state);

    state->type_DesktopWindowTarget = py::register_python_type(module.get(), type_name_DesktopWindowTarget, &type_spec_DesktopWindowTarget, object_bases.get(), nullptr);
    if (!state->type_DesktopWindowTarget)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Composition::Desktop::DesktopWindowTarget>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Composition::Desktop;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Composition::Desktop");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DesktopWindowTarget;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Composition::Desktop::DesktopWindowTarget is not registered");
        return nullptr;
    }

    return python_type;
}
