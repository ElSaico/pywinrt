# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.ui
import winrt.windows.ui.core
import winrt.windows.ui.popups
import winrt.windows.ui.windowmanagement

from . import ApplicationViewBoundsMode, ApplicationViewMode, ApplicationViewOrientation, ApplicationViewState, ApplicationViewSwitchingOptions, ApplicationViewWindowingMode, FullScreenSystemOverlayMode, HandPreference, ScreenCaptureDisabledBehavior, UIColorType, UIElementType, UserInteractionMode, ViewSizePreference

Self = typing.TypeVar('Self')

class AccessibilitySettings(winrt.system.Object):
    high_contrast: winrt.system.Boolean
    high_contrast_scheme: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccessibilitySettings: ...
    def __new__(cls: typing.Type[AccessibilitySettings]) -> AccessibilitySettings:...
    def add_high_contrast_changed(self, handler: winrt.windows.foundation.TypedEventHandler[AccessibilitySettings, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_high_contrast_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ActivationViewSwitcher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivationViewSwitcher: ...
    def is_view_presented_on_activation_virtual_desktop(self, view_id: winrt.system.Int32, /) -> winrt.system.Boolean: ...
    @typing.overload
    def show_as_standalone_async(self, view_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_as_standalone_async(self, view_id: winrt.system.Int32, size_preference: ViewSizePreference, /) -> winrt.windows.foundation.IAsyncAction: ...

class ApplicationView(winrt.system.Object):
    title: str
    is_screen_capture_enabled: winrt.system.Boolean
    adjacent_to_left_display_edge: winrt.system.Boolean
    adjacent_to_right_display_edge: winrt.system.Boolean
    id: winrt.system.Int32
    is_full_screen: winrt.system.Boolean
    is_on_lock_screen: winrt.system.Boolean
    orientation: ApplicationViewOrientation
    suppress_system_overlays: winrt.system.Boolean
    visible_bounds: winrt.windows.foundation.Rect
    desired_bounds_mode: ApplicationViewBoundsMode
    full_screen_system_overlay_mode: FullScreenSystemOverlayMode
    title_bar: typing.Optional[ApplicationViewTitleBar]
    is_full_screen_mode: winrt.system.Boolean
    view_mode: ApplicationViewMode
    persisted_state_id: str
    windowing_environment: typing.Optional[winrt.windows.ui.windowmanagement.WindowingEnvironment]
    u_i_context: typing.Optional[winrt.windows.ui.UIContext]
    value: typing.ClassVar[ApplicationViewState]
    terminate_app_on_final_view_close: typing.ClassVar[winrt.system.Boolean]
    preferred_launch_windowing_mode: typing.ClassVar[ApplicationViewWindowingMode]
    preferred_launch_view_size: typing.ClassVar[winrt.windows.foundation.Size]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationView: ...
    @staticmethod
    def clear_all_persisted_state() -> None: ...
    @staticmethod
    def clear_persisted_state(key: str, /) -> None: ...
    def exit_full_screen_mode(self) -> None: ...
    @staticmethod
    def get_application_view_id_for_window(window: typing.Optional[winrt.windows.ui.core.ICoreWindow], /) -> winrt.system.Int32: ...
    def get_display_regions(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.ui.windowmanagement.DisplayRegion]]: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[ApplicationView]: ...
    def is_view_mode_supported(self, view_mode: ApplicationViewMode, /) -> winrt.system.Boolean: ...
    def set_desired_bounds_mode(self, bounds_mode: ApplicationViewBoundsMode, /) -> winrt.system.Boolean: ...
    def set_preferred_min_size(self, min_size: winrt.windows.foundation.Size, /) -> None: ...
    def show_standard_system_overlays(self) -> None: ...
    def try_consolidate_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_enter_full_screen_mode(self) -> winrt.system.Boolean: ...
    @typing.overload
    def try_enter_view_mode_async(self, view_mode: ApplicationViewMode, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_enter_view_mode_async(self, view_mode: ApplicationViewMode, view_mode_preferences: typing.Optional[ViewModePreferences], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_resize_view(self, value: winrt.windows.foundation.Size, /) -> winrt.system.Boolean: ...
    @staticmethod
    def try_unsnap() -> winrt.system.Boolean: ...
    @staticmethod
    def try_unsnap_to_fullscreen() -> winrt.system.Boolean: ...
    def add_consolidated(self, handler: winrt.windows.foundation.TypedEventHandler[ApplicationView, ApplicationViewConsolidatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_consolidated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_visible_bounds_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ApplicationView, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_visible_bounds_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ApplicationViewConsolidatedEventArgs(winrt.system.Object):
    is_user_initiated: winrt.system.Boolean
    is_app_initiated: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationViewConsolidatedEventArgs: ...

class ApplicationViewScaling(winrt.system.Object):
    disable_layout_scaling: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationViewScaling: ...
    @staticmethod
    def try_set_disable_layout_scaling(disable_layout_scaling: winrt.system.Boolean, /) -> winrt.system.Boolean: ...

class ApplicationViewSwitcher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationViewSwitcher: ...
    @staticmethod
    def disable_showing_main_view_on_activation() -> None: ...
    @staticmethod
    def disable_system_view_activation_policy() -> None: ...
    @staticmethod
    def prepare_for_custom_animated_switch_async(to_view_id: winrt.system.Int32, from_view_id: winrt.system.Int32, options: ApplicationViewSwitchingOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def switch_async(view_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    @staticmethod
    def switch_async(to_view_id: winrt.system.Int32, from_view_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    @staticmethod
    def switch_async(to_view_id: winrt.system.Int32, from_view_id: winrt.system.Int32, options: ApplicationViewSwitchingOptions, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    @staticmethod
    def try_show_as_standalone_async(view_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def try_show_as_standalone_async(view_id: winrt.system.Int32, size_preference: ViewSizePreference, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def try_show_as_standalone_async(view_id: winrt.system.Int32, size_preference: ViewSizePreference, anchor_view_id: winrt.system.Int32, anchor_size_preference: ViewSizePreference, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def try_show_as_view_mode_async(view_id: winrt.system.Int32, view_mode: ApplicationViewMode, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def try_show_as_view_mode_async(view_id: winrt.system.Int32, view_mode: ApplicationViewMode, view_mode_preferences: typing.Optional[ViewModePreferences], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

class ApplicationViewTitleBar(winrt.system.Object):
    inactive_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    inactive_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_pressed_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_pressed_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_inactive_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_inactive_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_hover_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_hover_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationViewTitleBar: ...

class ApplicationViewTransferContext(winrt.system.Object):
    view_id: winrt.system.Int32
    data_package_format_id: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationViewTransferContext: ...
    def __new__(cls: typing.Type[ApplicationViewTransferContext]) -> ApplicationViewTransferContext:...

class InputPane(winrt.system.Object):
    occluded_rect: winrt.windows.foundation.Rect
    visible: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InputPane: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[InputPane]: ...
    @staticmethod
    def get_for_u_i_context(context: typing.Optional[winrt.windows.ui.UIContext], /) -> typing.Optional[InputPane]: ...
    def try_hide(self) -> winrt.system.Boolean: ...
    def try_show(self) -> winrt.system.Boolean: ...
    def add_hiding(self, handler: winrt.windows.foundation.TypedEventHandler[InputPane, InputPaneVisibilityEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_hiding(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_showing(self, handler: winrt.windows.foundation.TypedEventHandler[InputPane, InputPaneVisibilityEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_showing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class InputPaneVisibilityEventArgs(winrt.system.Object):
    ensured_focused_element_in_view: winrt.system.Boolean
    occluded_rect: winrt.windows.foundation.Rect
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InputPaneVisibilityEventArgs: ...

class ProjectionManager(winrt.system.Object):
    projection_display_available: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProjectionManager: ...
    @staticmethod
    def get_device_selector() -> str: ...
    @typing.overload
    @staticmethod
    def request_start_projecting_async(projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def request_start_projecting_async(projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, selection: winrt.windows.foundation.Rect, preffered_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def start_projecting_async(projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    @staticmethod
    def start_projecting_async(projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, display_device_info: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation], /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def stop_projecting_async(projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def swap_displays_for_views_async(projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def add_projection_display_available_changed(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_projection_display_available_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class StatusBar(winrt.system.Object):
    foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    background_opacity: winrt.system.Double
    background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    occluded_rect: winrt.windows.foundation.Rect
    progress_indicator: typing.Optional[StatusBarProgressIndicator]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StatusBar: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[StatusBar]: ...
    def hide_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def show_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def add_hiding(self, event_handler: winrt.windows.foundation.TypedEventHandler[StatusBar, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_hiding(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_showing(self, event_handler: winrt.windows.foundation.TypedEventHandler[StatusBar, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_showing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class StatusBarProgressIndicator(winrt.system.Object):
    text: str
    progress_value: typing.Optional[typing.Optional[winrt.system.Double]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StatusBarProgressIndicator: ...
    def hide_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def show_async(self) -> winrt.windows.foundation.IAsyncAction: ...

class UISettings(winrt.system.Object):
    animations_enabled: winrt.system.Boolean
    caret_blink_rate: winrt.system.UInt32
    caret_browsing_enabled: winrt.system.Boolean
    caret_width: winrt.system.UInt32
    cursor_size: winrt.windows.foundation.Size
    double_click_time: winrt.system.UInt32
    hand_preference: HandPreference
    message_duration: winrt.system.UInt32
    mouse_hover_time: winrt.system.UInt32
    scroll_bar_arrow_size: winrt.windows.foundation.Size
    scroll_bar_size: winrt.windows.foundation.Size
    scroll_bar_thumb_box_size: winrt.windows.foundation.Size
    text_scale_factor: winrt.system.Double
    advanced_effects_enabled: winrt.system.Boolean
    auto_hide_scroll_bars: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UISettings: ...
    def __new__(cls: typing.Type[UISettings]) -> UISettings:...
    def get_color_value(self, desired_color: UIColorType, /) -> winrt.windows.ui.Color: ...
    def u_i_element_color(self, desired_element: UIElementType, /) -> winrt.windows.ui.Color: ...
    def add_text_scale_factor_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UISettings, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_text_scale_factor_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_color_values_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UISettings, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_color_values_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_advanced_effects_enabled_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UISettings, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_advanced_effects_enabled_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_auto_hide_scroll_bars_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UISettings, UISettingsAutoHideScrollBarsChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_auto_hide_scroll_bars_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_animations_enabled_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UISettings, UISettingsAnimationsEnabledChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_animations_enabled_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_message_duration_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UISettings, UISettingsMessageDurationChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_message_duration_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class UISettingsAnimationsEnabledChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UISettingsAnimationsEnabledChangedEventArgs: ...

class UISettingsAutoHideScrollBarsChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UISettingsAutoHideScrollBarsChangedEventArgs: ...

class UISettingsMessageDurationChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UISettingsMessageDurationChangedEventArgs: ...

class UIViewSettings(winrt.system.Object):
    user_interaction_mode: UserInteractionMode
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UIViewSettings: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[UIViewSettings]: ...

class ViewModePreferences(winrt.system.Object):
    view_size_preference: ViewSizePreference
    custom_size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ViewModePreferences: ...
    @staticmethod
    def create_default(mode: ApplicationViewMode, /) -> typing.Optional[ViewModePreferences]: ...

