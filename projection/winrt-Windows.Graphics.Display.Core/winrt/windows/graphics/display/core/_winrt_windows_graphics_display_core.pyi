# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import HdmiDisplayColorSpace, HdmiDisplayHdrOption, HdmiDisplayPixelEncoding

Self = typing.TypeVar('Self')

class HdmiDisplayHdr2086Metadata:
    red_primary_x: winrt.system.UInt16
    red_primary_y: winrt.system.UInt16
    green_primary_x: winrt.system.UInt16
    green_primary_y: winrt.system.UInt16
    blue_primary_x: winrt.system.UInt16
    blue_primary_y: winrt.system.UInt16
    white_point_x: winrt.system.UInt16
    white_point_y: winrt.system.UInt16
    max_mastering_luminance: winrt.system.UInt16
    min_mastering_luminance: winrt.system.UInt16
    max_content_light_level: winrt.system.UInt16
    max_frame_average_light_level: winrt.system.UInt16
    def __init__(self, red_primary_x: winrt.system.UInt16, red_primary_y: winrt.system.UInt16, green_primary_x: winrt.system.UInt16, green_primary_y: winrt.system.UInt16, blue_primary_x: winrt.system.UInt16, blue_primary_y: winrt.system.UInt16, white_point_x: winrt.system.UInt16, white_point_y: winrt.system.UInt16, max_mastering_luminance: winrt.system.UInt16, min_mastering_luminance: winrt.system.UInt16, max_content_light_level: winrt.system.UInt16, max_frame_average_light_level: winrt.system.UInt16) -> None: ...

class HdmiDisplayInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HdmiDisplayInformation: ...
    def get_current_display_mode(self) -> typing.Optional[HdmiDisplayMode]: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[HdmiDisplayInformation]: ...
    def get_supported_display_modes(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HdmiDisplayMode]]: ...
    @typing.overload
    def request_set_current_display_mode_async(self, mode: typing.Optional[HdmiDisplayMode], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_set_current_display_mode_async(self, mode: typing.Optional[HdmiDisplayMode], hdr_option: HdmiDisplayHdrOption, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_set_current_display_mode_async(self, mode: typing.Optional[HdmiDisplayMode], hdr_option: HdmiDisplayHdrOption, hdr_metadata: HdmiDisplayHdr2086Metadata, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def set_default_display_mode_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def add_display_modes_changed(self, value: winrt.windows.foundation.TypedEventHandler[HdmiDisplayInformation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_display_modes_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class HdmiDisplayMode(winrt.system.Object):
    bits_per_pixel: winrt.system.UInt16
    color_space: HdmiDisplayColorSpace
    is2086_metadata_supported: bool
    is_sdr_luminance_supported: bool
    is_smpte2084_supported: bool
    pixel_encoding: HdmiDisplayPixelEncoding
    refresh_rate: winrt.system.Double
    resolution_height_in_raw_pixels: winrt.system.UInt32
    resolution_width_in_raw_pixels: winrt.system.UInt32
    stereo_enabled: bool
    is_dolby_vision_low_latency_supported: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HdmiDisplayMode: ...
    def is_equal(self, mode: typing.Optional[HdmiDisplayMode], /) -> bool: ...

