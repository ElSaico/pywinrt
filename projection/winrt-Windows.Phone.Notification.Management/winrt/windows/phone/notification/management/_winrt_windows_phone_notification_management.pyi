# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.applicationmodel.appointments
import winrt.windows.applicationmodel.email
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams

from . import AccessoryNotificationType, CalendarChangedEvent, PhoneCallAudioEndpoint, PhoneCallDirection, PhoneCallState, PhoneCallTransport, PhoneLineRegistrationState, PhoneMediaType, PhoneNotificationType, PlaybackCapability, PlaybackCommand, PlaybackStatus, ReminderState, VibrateState

Self = typing.TypeVar('Self')

class AccessoryManager(winrt.system.Object):
    phone_mute: typing.ClassVar[winrt.system.Boolean]
    phone_call_audio_endpoint: typing.ClassVar[PhoneCallAudioEndpoint]
    battery_saver_state: typing.ClassVar[winrt.system.Boolean]
    do_not_disturb_enabled: typing.ClassVar[winrt.system.Boolean]
    driving_mode_enabled: typing.ClassVar[winrt.system.Boolean]
    media_playback_capabilities: typing.ClassVar[PlaybackCapability]
    media_playback_status: typing.ClassVar[PlaybackStatus]
    phone_line_details: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[PhoneLineDetails]]]
    is_phone_pin_locked: typing.ClassVar[winrt.system.Boolean]
    speed_dial_list: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[SpeedDialEntry]]]
    volume_info: typing.ClassVar[typing.Optional[VolumeInfo]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccessoryManager: ...
    @typing.overload
    @staticmethod
    def accept_phone_call(phone_call_id: winrt.system.UInt32, /) -> None: ...
    @typing.overload
    @staticmethod
    def accept_phone_call(phone_call_id: winrt.system.UInt32, end_point: PhoneCallAudioEndpoint, /) -> None: ...
    @typing.overload
    @staticmethod
    def accept_phone_call_with_video(phone_call_id: winrt.system.UInt32, /) -> None: ...
    @typing.overload
    @staticmethod
    def accept_phone_call_with_video(phone_call_id: winrt.system.UInt32, end_point: PhoneCallAudioEndpoint, /) -> None: ...
    @staticmethod
    def clear_toast(instance_id: str, /) -> None: ...
    @staticmethod
    def decrease_volume(step: winrt.system.Int32, /) -> None: ...
    @staticmethod
    def disable_all_accessory_notification_types() -> None: ...
    @staticmethod
    def disable_email_notification_email_account(email_account: str, /) -> None: ...
    @staticmethod
    def disable_notifications_for_application(app_id: str, /) -> None: ...
    @staticmethod
    def dismiss_alarm(alarm_id: winrt.system.Guid, /) -> None: ...
    @staticmethod
    def dismiss_alarm_by_instance_id(instance_id: str, /) -> None: ...
    @staticmethod
    def dismiss_reminder(reminder_id: winrt.system.Guid, /) -> None: ...
    @staticmethod
    def dismiss_reminder_by_instance_id(instance_id: str, /) -> None: ...
    @staticmethod
    def enable_accessory_notification_types(accessory_notification_types: winrt.system.Int32, /) -> None: ...
    @staticmethod
    def enable_email_notification_email_account(email_account: str, /) -> None: ...
    @staticmethod
    def enable_email_notification_folder_filter(email_account: str, folders: winrt.windows.foundation.collections.IVectorView[str], /) -> None: ...
    @staticmethod
    def enable_notifications_for_application(app_id: str, /) -> None: ...
    @staticmethod
    def end_phone_call(phone_call_id: winrt.system.UInt32, /) -> None: ...
    @staticmethod
    def get_all_email_accounts() -> typing.Optional[winrt.windows.foundation.collections.IVectorView[EmailAccountInfo]]: ...
    @staticmethod
    def get_app_icon(app_id: str, /) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @staticmethod
    def get_apps() -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, AppNotificationInfo]]: ...
    @staticmethod
    def get_enabled_accessory_notification_types() -> winrt.system.Int32: ...
    @staticmethod
    def get_folders(email_account: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[EmailFolderInfo]]: ...
    @staticmethod
    def get_media_metadata() -> typing.Optional[MediaMetadata]: ...
    @staticmethod
    def get_next_trigger_details() -> typing.Optional[IAccessoryNotificationTriggerDetails]: ...
    @staticmethod
    def get_phone_line_details(phone_line: winrt.system.Guid, /) -> typing.Optional[PhoneLineDetails]: ...
    @staticmethod
    def get_user_consent() -> winrt.system.Boolean: ...
    @staticmethod
    def hold_phone_call(phone_call_id: winrt.system.UInt32, hold_call: winrt.system.Boolean, /) -> None: ...
    @staticmethod
    def increase_volume(step: winrt.system.Int32, /) -> None: ...
    @staticmethod
    def is_notification_enabled_for_application(app_id: str, /) -> winrt.system.Boolean: ...
    @typing.overload
    @staticmethod
    def make_phone_call(phone_line: winrt.system.Guid, phone_number: str, /) -> None: ...
    @typing.overload
    @staticmethod
    def make_phone_call(phone_line: winrt.system.Guid, phone_number: str, end_point: PhoneCallAudioEndpoint, /) -> None: ...
    @typing.overload
    @staticmethod
    def make_phone_call_with_video(phone_line: winrt.system.Guid, phone_number: str, /) -> None: ...
    @typing.overload
    @staticmethod
    def make_phone_call_with_video(phone_line: winrt.system.Guid, phone_number: str, end_point: PhoneCallAudioEndpoint, /) -> None: ...
    @staticmethod
    def perform_media_playback_command(command: PlaybackCommand, /) -> None: ...
    @staticmethod
    def process_trigger_details(p_details: typing.Optional[IAccessoryNotificationTriggerDetails], /) -> None: ...
    @staticmethod
    def register_accessory_app() -> str: ...
    @typing.overload
    @staticmethod
    def reject_phone_call(phone_call_id: winrt.system.UInt32, /) -> None: ...
    @typing.overload
    @staticmethod
    def reject_phone_call(phone_call_id: winrt.system.UInt32, text_response_i_d: winrt.system.UInt32, /) -> None: ...
    @staticmethod
    def ring_device() -> None: ...
    @staticmethod
    def set_mute(mute: winrt.system.Boolean, /) -> None: ...
    @staticmethod
    def set_ringer_vibrate(ringer: winrt.system.Boolean, vibrate: winrt.system.Boolean, /) -> None: ...
    @typing.overload
    @staticmethod
    def snooze_alarm(alarm_id: winrt.system.Guid, /) -> None: ...
    @typing.overload
    @staticmethod
    def snooze_alarm(alarm_id: winrt.system.Guid, time_span: datetime.timedelta, /) -> None: ...
    @staticmethod
    def snooze_alarm_by_instance_id(instance_id: str, /) -> None: ...
    @typing.overload
    @staticmethod
    def snooze_reminder(reminder_id: winrt.system.Guid, /) -> None: ...
    @typing.overload
    @staticmethod
    def snooze_reminder(reminder_id: winrt.system.Guid, time_span: datetime.timedelta, /) -> None: ...
    @staticmethod
    def snooze_reminder_by_instance_id(instance_id: str, /) -> None: ...
    @staticmethod
    def swap_phone_calls(phone_call_id_to_hold: winrt.system.UInt32, phone_call_id_on_hold: winrt.system.UInt32, /) -> None: ...
    @staticmethod
    def update_email_read_status(message_entry_id: typing.Optional[BinaryId], is_read: winrt.system.Boolean, /) -> None: ...

class AlarmNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    alarm_id: winrt.system.Guid
    reminder_state: ReminderState
    timestamp: datetime.datetime
    title: str
    instance_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AlarmNotificationTriggerDetails: ...

class AppNotificationInfo(winrt.system.Object):
    id: str
    name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppNotificationInfo: ...

class BinaryId(winrt.system.Object):
    id: winrt.system.UInt8
    length: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BinaryId: ...

class CalendarChangedNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    event_type: CalendarChangedEvent
    item_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarChangedNotificationTriggerDetails: ...

class CortanaTileNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    content: str
    emphasized_text: str
    large_content1: str
    large_content2: str
    non_wrapped_small_content1: str
    non_wrapped_small_content2: str
    non_wrapped_small_content3: str
    non_wrapped_small_content4: str
    source: str
    tile_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaTileNotificationTriggerDetails: ...

class EmailAccountInfo(winrt.system.Object):
    display_name: str
    is_notification_enabled: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EmailAccountInfo: ...

class EmailFolderInfo(winrt.system.Object):
    display_name: str
    is_notification_enabled: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EmailFolderInfo: ...

class EmailNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    account_name: str
    email_message: typing.Optional[winrt.windows.applicationmodel.email.EmailMessage]
    parent_folder_name: str
    sender_address: str
    sender_name: str
    timestamp: datetime.datetime
    message_entry_id: typing.Optional[BinaryId]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EmailNotificationTriggerDetails: ...

class EmailReadNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    account_name: str
    is_read: winrt.system.Boolean
    message_entry_id: typing.Optional[BinaryId]
    parent_folder_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EmailReadNotificationTriggerDetails: ...

class MediaControlsTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    media_metadata: typing.Optional[MediaMetadata]
    playback_status: PlaybackStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaControlsTriggerDetails: ...

class MediaMetadata(winrt.system.Object):
    album: str
    artist: str
    duration: datetime.timedelta
    subtitle: str
    thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    title: str
    track: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaMetadata: ...

class PhoneCallDetails(winrt.system.Object):
    call_direction: PhoneCallDirection
    call_id: winrt.system.UInt32
    call_media_type: PhoneMediaType
    call_transport: PhoneCallTransport
    conference_call_id: winrt.system.UInt32
    contact_name: str
    end_time: datetime.datetime
    phone_line: winrt.system.Guid
    phone_number: str
    preset_text_responses: typing.Optional[winrt.windows.foundation.collections.IVectorView[TextResponse]]
    start_time: datetime.datetime
    state: PhoneCallState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallDetails: ...

class PhoneLineDetails(winrt.system.Object):
    default_outgoing_line: winrt.system.Boolean
    display_name: str
    line_id: winrt.system.Guid
    line_number: str
    registration_state: PhoneLineRegistrationState
    voicemail_count: winrt.system.UInt32
    missed_call_count: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneLineDetails: ...

class PhoneNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    call_details: typing.Optional[PhoneCallDetails]
    phone_line_changed_id: winrt.system.Guid
    phone_notification_type: PhoneNotificationType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneNotificationTriggerDetails: ...

class ReminderNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    appointment: typing.Optional[winrt.windows.applicationmodel.appointments.Appointment]
    description: str
    details: str
    reminder_id: winrt.system.Guid
    reminder_state: ReminderState
    timestamp: datetime.datetime
    title: str
    instance_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ReminderNotificationTriggerDetails: ...

class SpeedDialEntry(winrt.system.Object):
    contact_name: str
    number_type: str
    phone_number: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpeedDialEntry: ...

class TextResponse(winrt.system.Object):
    content: str
    id: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextResponse: ...

class ToastNotificationTriggerDetails(winrt.system.Object):
    started_processing: winrt.system.Boolean
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    time_created: datetime.datetime
    suppress_popup: winrt.system.Boolean
    text1: str
    text2: str
    text3: str
    text4: str
    instance_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToastNotificationTriggerDetails: ...

class VolumeInfo(winrt.system.Object):
    call_volume: winrt.system.UInt32
    is_muted: winrt.system.Boolean
    is_vibrate_enabled: VibrateState
    media_volume: winrt.system.UInt32
    system_volume: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VolumeInfo: ...

class IAccessoryNotificationTriggerDetails(winrt.system.Object):
    accessory_notification_type: AccessoryNotificationType
    app_display_name: str
    app_id: str
    started_processing: winrt.system.Boolean
    time_created: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAccessoryNotificationTriggerDetails: ...

