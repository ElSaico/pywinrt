# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.credentials
import winrt.windows.system
import winrt.windows.ui.popups

from . import SettingsEdgeLocation, SupportedWebAccountActions, WebAccountAction
from . import CredentialCommandCredentialDeletedHandler, WebAccountCommandInvokedHandler, WebAccountProviderCommandInvokedHandler

Self = typing.TypeVar('Self')

class AccountsSettingsPane(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccountsSettingsPane: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[AccountsSettingsPane]: ...
    @staticmethod
    def show() -> None: ...
    @staticmethod
    def show_add_account_async() -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def show_add_account_for_user_async(user: typing.Optional[winrt.windows.system.User], /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def show_manage_accounts_async() -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def show_manage_accounts_for_user_async(user: typing.Optional[winrt.windows.system.User], /) -> winrt.windows.foundation.IAsyncAction: ...
    def add_account_commands_requested(self, handler: winrt.windows.foundation.TypedEventHandler[AccountsSettingsPane, AccountsSettingsPaneCommandsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_account_commands_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class AccountsSettingsPaneCommandsRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccountsSettingsPaneCommandsRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[AccountsSettingsPaneEventDeferral]: ...
    @_property
    def header_text(self) -> str: ...
    @header_text.setter
    def header_text(self, value: str) -> None: ...
    @_property
    def commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[SettingsCommand]]: ...
    @_property
    def credential_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[CredentialCommand]]: ...
    @_property
    def web_account_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[WebAccountCommand]]: ...
    @_property
    def web_account_provider_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[WebAccountProviderCommand]]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

class AccountsSettingsPaneEventDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccountsSettingsPaneEventDeferral: ...
    def complete(self) -> None: ...

class CredentialCommand(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CredentialCommand: ...
    @typing.overload
    def __new__(cls: typing.Type[CredentialCommand], password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> CredentialCommand:...
    @typing.overload
    def __new__(cls: typing.Type[CredentialCommand], password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], deleted: typing.Optional[CredentialCommandCredentialDeletedHandler]) -> CredentialCommand:...
    @_property
    def credential_deleted(self) -> typing.Optional[CredentialCommandCredentialDeletedHandler]: ...
    @_property
    def password_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...

class SettingsCommand(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsCommand: ...
    def __new__(cls: typing.Type[SettingsCommand], settings_command_id: typing.Optional[winrt.system.Object], label: str, handler: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]) -> SettingsCommand:...
    @_property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> None: ...
    @_property
    def invoked(self) -> typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]: ...
    @invoked.setter
    def invoked(self, value: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]) -> None: ...
    @_property
    def id(self) -> typing.Optional[winrt.system.Object]: ...
    @id.setter
    def id(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    accounts_command: typing.ClassVar[typing.Optional[SettingsCommand]]

class SettingsPane(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsPane: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[SettingsPane]: ...
    @staticmethod
    def show() -> None: ...
    def add_commands_requested(self, handler: winrt.windows.foundation.TypedEventHandler[SettingsPane, SettingsPaneCommandsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_commands_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    edge: typing.ClassVar[SettingsEdgeLocation]

class SettingsPaneCommandsRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsPaneCommandsRequest: ...
    @_property
    def application_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[SettingsCommand]]: ...

class SettingsPaneCommandsRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsPaneCommandsRequestedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[SettingsPaneCommandsRequest]: ...

class WebAccountCommand(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountCommand: ...
    def __new__(cls: typing.Type[WebAccountCommand], web_account: typing.Optional[winrt.windows.security.credentials.WebAccount], invoked: typing.Optional[WebAccountCommandInvokedHandler], actions: SupportedWebAccountActions) -> WebAccountCommand:...
    @_property
    def actions(self) -> SupportedWebAccountActions: ...
    @_property
    def invoked(self) -> typing.Optional[WebAccountCommandInvokedHandler]: ...
    @_property
    def web_account(self) -> typing.Optional[winrt.windows.security.credentials.WebAccount]: ...

class WebAccountInvokedArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountInvokedArgs: ...
    @_property
    def action(self) -> WebAccountAction: ...

class WebAccountProviderCommand(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountProviderCommand: ...
    def __new__(cls: typing.Type[WebAccountProviderCommand], web_account_provider: typing.Optional[winrt.windows.security.credentials.WebAccountProvider], invoked: typing.Optional[WebAccountProviderCommandInvokedHandler]) -> WebAccountProviderCommand:...
    @_property
    def invoked(self) -> typing.Optional[WebAccountProviderCommandInvokedHandler]: ...
    @_property
    def web_account_provider(self) -> typing.Optional[winrt.windows.security.credentials.WebAccountProvider]: ...

