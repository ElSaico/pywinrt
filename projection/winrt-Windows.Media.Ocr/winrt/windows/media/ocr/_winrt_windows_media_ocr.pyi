# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.globalization
import winrt.windows.graphics.imaging

Self = typing.TypeVar('Self')

class OcrEngine(winrt.system.Object):
    recognizer_language: typing.Optional[winrt.windows.globalization.Language]
    available_recognizer_languages: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.globalization.Language]]]
    max_image_dimension: typing.ClassVar[winrt.system.UInt32]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OcrEngine: ...
    @staticmethod
    def is_language_supported(language: typing.Optional[winrt.windows.globalization.Language], /) -> bool: ...
    def recognize_async(self, bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> winrt.windows.foundation.IAsyncOperation[OcrResult]: ...
    @staticmethod
    def try_create_from_language(language: typing.Optional[winrt.windows.globalization.Language], /) -> typing.Optional[OcrEngine]: ...
    @staticmethod
    def try_create_from_user_profile_languages() -> typing.Optional[OcrEngine]: ...

class OcrLine(winrt.system.Object):
    text: str
    words: typing.Optional[winrt.windows.foundation.collections.IVectorView[OcrWord]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OcrLine: ...

class OcrResult(winrt.system.Object):
    lines: typing.Optional[winrt.windows.foundation.collections.IVectorView[OcrLine]]
    text: str
    text_angle: typing.Optional[typing.Optional[winrt.system.Double]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OcrResult: ...

class OcrWord(winrt.system.Object):
    bounding_rect: winrt.windows.foundation.Rect
    text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OcrWord: ...

