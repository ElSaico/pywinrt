# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system

from . import GameSaveErrorStatus

Self = typing.TypeVar('Self')

class GameSaveBlobGetResult(winrt.system.Object):
    status: GameSaveErrorStatus
    value: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.IBuffer]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobGetResult: ...

class GameSaveBlobInfo(winrt.system.Object):
    name: str
    size: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobInfo: ...

class GameSaveBlobInfoGetResult(winrt.system.Object):
    status: GameSaveErrorStatus
    value: typing.Optional[winrt.windows.foundation.collections.IVectorView[GameSaveBlobInfo]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobInfoGetResult: ...

class GameSaveBlobInfoQuery(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobInfoQuery: ...
    @typing.overload
    def get_blob_info_async(self) -> winrt.windows.foundation.IAsyncOperation[GameSaveBlobInfoGetResult]: ...
    @typing.overload
    def get_blob_info_async(self, start_index: winrt.system.UInt32, max_number_of_items: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveBlobInfoGetResult]: ...
    def get_item_count_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.UInt32]: ...

class GameSaveContainer(winrt.system.Object):
    name: str
    provider: typing.Optional[GameSaveProvider]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainer: ...
    def create_blob_info_query(self, blob_name_prefix: str, /) -> typing.Optional[GameSaveBlobInfoQuery]: ...
    def get_async(self, blobs_to_read: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[GameSaveBlobGetResult]: ...
    def read_async(self, blobs_to_read: winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...
    def submit_property_set_updates_async(self, blobs_to_write: typing.Optional[winrt.windows.foundation.collections.IPropertySet], blobs_to_delete: typing.Iterable[str], display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...
    def submit_updates_async(self, blobs_to_write: winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.IBuffer], blobs_to_delete: typing.Iterable[str], display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...

class GameSaveContainerInfo(winrt.system.Object):
    display_name: str
    last_modified_time: datetime.datetime
    name: str
    needs_sync: bool
    total_size: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainerInfo: ...

class GameSaveContainerInfoGetResult(winrt.system.Object):
    status: GameSaveErrorStatus
    value: typing.Optional[winrt.windows.foundation.collections.IVectorView[GameSaveContainerInfo]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainerInfoGetResult: ...

class GameSaveContainerInfoQuery(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainerInfoQuery: ...
    @typing.overload
    def get_container_info_async(self) -> winrt.windows.foundation.IAsyncOperation[GameSaveContainerInfoGetResult]: ...
    @typing.overload
    def get_container_info_async(self, start_index: winrt.system.UInt32, max_number_of_items: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveContainerInfoGetResult]: ...
    def get_item_count_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.UInt32]: ...

class GameSaveOperationResult(winrt.system.Object):
    status: GameSaveErrorStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveOperationResult: ...

class GameSaveProvider(winrt.system.Object):
    containers_changed_since_last_sync: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveProvider: ...
    def create_container(self, name: str, /) -> typing.Optional[GameSaveContainer]: ...
    @typing.overload
    def create_container_info_query(self) -> typing.Optional[GameSaveContainerInfoQuery]: ...
    @typing.overload
    def create_container_info_query(self, container_name_prefix: str, /) -> typing.Optional[GameSaveContainerInfoQuery]: ...
    def delete_container_async(self, name: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...
    @staticmethod
    def get_for_user_async(user: typing.Optional[winrt.windows.system.User], service_config_id: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveProviderGetResult]: ...
    def get_remaining_bytes_in_quota_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Int64]: ...
    @staticmethod
    def get_sync_on_demand_for_user_async(user: typing.Optional[winrt.windows.system.User], service_config_id: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveProviderGetResult]: ...

class GameSaveProviderGetResult(winrt.system.Object):
    status: GameSaveErrorStatus
    value: typing.Optional[GameSaveProvider]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveProviderGetResult: ...

