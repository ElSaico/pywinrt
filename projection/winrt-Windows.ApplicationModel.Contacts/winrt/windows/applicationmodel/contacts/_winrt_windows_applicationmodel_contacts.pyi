# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.data.text
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.popups
import winrt.windows.ui.viewmanagement

class ContactAddressKind(enum.IntEnum):
    HOME = 0
    WORK = 1
    OTHER = 2

class ContactAnnotationOperations(enum.IntFlag):
    NONE = 0
    CONTACT_PROFILE = 0x1
    MESSAGE = 0x2
    AUDIO_CALL = 0x4
    VIDEO_CALL = 0x8
    SOCIAL_FEEDS = 0x10
    SHARE = 0x20

class ContactAnnotationStoreAccessType(enum.IntEnum):
    APP_ANNOTATIONS_READ_WRITE = 0
    ALL_ANNOTATIONS_READ_WRITE = 1

class ContactBatchStatus(enum.IntEnum):
    SUCCESS = 0
    SERVER_SEARCH_SYNC_MANAGER_ERROR = 1
    SERVER_SEARCH_UNKNOWN_ERROR = 2

class ContactCardHeaderKind(enum.IntEnum):
    DEFAULT = 0
    BASIC = 1
    ENTERPRISE = 2

class ContactCardTabKind(enum.IntEnum):
    DEFAULT = 0
    EMAIL = 1
    MESSAGING = 2
    PHONE = 3
    VIDEO = 4
    ORGANIZATIONAL_HIERARCHY = 5

class ContactChangeType(enum.IntEnum):
    CREATED = 0
    MODIFIED = 1
    DELETED = 2
    CHANGE_TRACKING_LOST = 3

class ContactDateKind(enum.IntEnum):
    BIRTHDAY = 0
    ANNIVERSARY = 1
    OTHER = 2

class ContactEmailKind(enum.IntEnum):
    PERSONAL = 0
    WORK = 1
    OTHER = 2

class ContactFieldCategory(enum.IntEnum):
    NONE = 0
    HOME = 1
    WORK = 2
    MOBILE = 3
    OTHER = 4

class ContactFieldType(enum.IntEnum):
    EMAIL = 0
    PHONE_NUMBER = 1
    LOCATION = 2
    INSTANT_MESSAGE = 3
    CUSTOM = 4
    CONNECTED_SERVICE_ACCOUNT = 5
    IMPORTANT_DATE = 6
    ADDRESS = 7
    SIGNIFICANT_OTHER = 8
    NOTES = 9
    WEBSITE = 10
    JOB_INFO = 11

class ContactListOtherAppReadAccess(enum.IntEnum):
    SYSTEM_ONLY = 0
    LIMITED = 1
    FULL = 2
    NONE = 3

class ContactListOtherAppWriteAccess(enum.IntEnum):
    NONE = 0
    SYSTEM_ONLY = 1
    LIMITED = 2

class ContactListSyncStatus(enum.IntEnum):
    IDLE = 0
    SYNCING = 1
    UP_TO_DATE = 2
    AUTHENTICATION_ERROR = 3
    POLICY_ERROR = 4
    UNKNOWN_ERROR = 5
    MANUAL_ACCOUNT_REMOVAL_REQUIRED = 6

class ContactMatchReasonKind(enum.IntEnum):
    NAME = 0
    EMAIL_ADDRESS = 1
    PHONE_NUMBER = 2
    JOB_INFO = 3
    YOMI_NAME = 4
    OTHER = 5

class ContactNameOrder(enum.IntEnum):
    FIRST_NAME_LAST_NAME = 0
    LAST_NAME_FIRST_NAME = 1

class ContactPhoneKind(enum.IntEnum):
    HOME = 0
    MOBILE = 1
    WORK = 2
    OTHER = 3
    PAGER = 4
    BUSINESS_FAX = 5
    HOME_FAX = 6
    COMPANY = 7
    ASSISTANT = 8
    RADIO = 9

class ContactQueryDesiredFields(enum.IntFlag):
    NONE = 0
    PHONE_NUMBER = 0x1
    EMAIL_ADDRESS = 0x2
    POSTAL_ADDRESS = 0x4

class ContactQuerySearchFields(enum.IntFlag):
    NONE = 0
    NAME = 0x1
    EMAIL = 0x2
    PHONE = 0x4
    ALL = 0xffffffff

class ContactQuerySearchScope(enum.IntEnum):
    LOCAL = 0
    SERVER = 1

class ContactRelationship(enum.IntEnum):
    OTHER = 0
    SPOUSE = 1
    PARTNER = 2
    SIBLING = 3
    PARENT = 4
    CHILD = 5

class ContactSelectionMode(enum.IntEnum):
    CONTACTS = 0
    FIELDS = 1

class ContactStoreAccessType(enum.IntEnum):
    APP_CONTACTS_READ_WRITE = 0
    ALL_CONTACTS_READ_ONLY = 1
    ALL_CONTACTS_READ_WRITE = 2

class PinnedContactSurface(enum.IntEnum):
    START_MENU = 0
    TASKBAR = 1

Self = typing.TypeVar('Self')

class AggregateContactManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AggregateContactManager: ...
    def find_raw_contacts_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Contact]]: ...
    def set_remote_identification_information_async(self, contact_list_id: str, remote_source_id: str, account_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def try_link_contacts_async(self, primary_contact: typing.Optional[Contact], secondary_contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def try_set_preferred_source_for_picture_async(self, aggregate_contact: typing.Optional[Contact], raw_contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def unlink_raw_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncAction: ...

class Contact(winrt.system.Object):
    thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    name: str
    fields: typing.Optional[winrt.windows.foundation.collections.IVector[IContactField]]
    id: str
    notes: str
    connected_service_accounts: typing.Optional[winrt.windows.foundation.collections.IVector[ContactConnectedServiceAccount]]
    emails: typing.Optional[winrt.windows.foundation.collections.IVector[ContactEmail]]
    addresses: typing.Optional[winrt.windows.foundation.collections.IVector[ContactAddress]]
    important_dates: typing.Optional[winrt.windows.foundation.collections.IVector[ContactDate]]
    job_info: typing.Optional[winrt.windows.foundation.collections.IVector[ContactJobInfo]]
    data_suppliers: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    phones: typing.Optional[winrt.windows.foundation.collections.IVector[ContactPhone]]
    provider_properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    significant_others: typing.Optional[winrt.windows.foundation.collections.IVector[ContactSignificantOther]]
    websites: typing.Optional[winrt.windows.foundation.collections.IVector[ContactWebsite]]
    source_display_picture: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    text_tone_token: str
    display_name_override: str
    display_picture_user_update_time: datetime.datetime
    nickname: str
    remote_id: str
    ring_tone_token: str
    contact_list_id: str
    large_display_picture: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    small_display_picture: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    sort_name: str
    aggregate_id: str
    full_name: str
    is_aggregate: winrt.system.Boolean
    is_display_picture_manually_set: winrt.system.Boolean
    is_me: winrt.system.Boolean
    yomi_given_name: str
    honorific_name_suffix: str
    yomi_family_name: str
    middle_name: str
    last_name: str
    honorific_name_prefix: str
    first_name: str
    display_name: str
    yomi_display_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Contact: ...
    def __new__(cls: typing.Type[Contact]) -> Contact:...

class ContactAddress(winrt.system.Object):
    street_address: str
    region: str
    postal_code: str
    locality: str
    kind: ContactAddressKind
    description: str
    country: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAddress: ...
    def __new__(cls: typing.Type[ContactAddress]) -> ContactAddress:...

class ContactAnnotation(winrt.system.Object):
    supported_operations: ContactAnnotationOperations
    remote_id: str
    contact_id: str
    annotation_list_id: str
    id: str
    is_disabled: winrt.system.Boolean
    provider_properties: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    contact_list_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAnnotation: ...
    def __new__(cls: typing.Type[ContactAnnotation]) -> ContactAnnotation:...

class ContactAnnotationList(winrt.system.Object):
    id: str
    provider_package_family_name: str
    user_data_account_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAnnotationList: ...
    def delete_annotation_async(self, annotation: typing.Optional[ContactAnnotation], /) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def find_annotations_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def find_annotations_by_remote_id_async(self, remote_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def get_annotation_async(self, annotation_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotation]: ...
    def try_save_annotation_async(self, annotation: typing.Optional[ContactAnnotation], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

class ContactAnnotationStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAnnotationStore: ...
    @typing.overload
    def create_annotation_list_async(self) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationList]: ...
    @typing.overload
    def create_annotation_list_async(self, user_data_account_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationList]: ...
    def disable_annotation_async(self, annotation: typing.Optional[ContactAnnotation], /) -> winrt.windows.foundation.IAsyncAction: ...
    def find_annotation_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotationList]]: ...
    def find_annotations_for_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def find_annotations_for_contact_list_async(self, contact_list_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def find_contact_ids_by_email_async(self, email_address: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[str]]: ...
    def find_contact_ids_by_phone_number_async(self, phone_number: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[str]]: ...
    def get_annotation_list_async(self, annotation_list_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationList]: ...

class ContactBatch(winrt.system.Object):
    contacts: typing.Optional[winrt.windows.foundation.collections.IVectorView[Contact]]
    status: ContactBatchStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactBatch: ...

class ContactCardDelayedDataLoader(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactCardDelayedDataLoader: ...
    def close(self) -> None: ...
    def set_data(self, contact: typing.Optional[Contact], /) -> None: ...

class ContactCardOptions(winrt.system.Object):
    initial_tab_kind: ContactCardTabKind
    header_kind: ContactCardHeaderKind
    server_search_contact_list_ids: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactCardOptions: ...
    def __new__(cls: typing.Type[ContactCardOptions]) -> ContactCardOptions:...

class ContactChange(winrt.system.Object):
    change_type: ContactChangeType
    contact: typing.Optional[Contact]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChange: ...

class ContactChangeReader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangeReader: ...
    def accept_changes(self) -> None: ...
    def accept_changes_through(self, last_change_to_accept: typing.Optional[ContactChange], /) -> None: ...
    def read_batch_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactChange]]: ...

class ContactChangeTracker(winrt.system.Object):
    is_tracking: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangeTracker: ...
    def enable(self) -> None: ...
    def get_change_reader(self) -> typing.Optional[ContactChangeReader]: ...
    def reset(self) -> None: ...

class ContactChangedDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangedDeferral: ...
    def complete(self) -> None: ...

class ContactChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangedEventArgs: ...
    def get_deferral(self) -> typing.Optional[ContactChangedDeferral]: ...

class ContactConnectedServiceAccount(winrt.system.Object):
    service_name: str
    id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactConnectedServiceAccount: ...
    def __new__(cls: typing.Type[ContactConnectedServiceAccount]) -> ContactConnectedServiceAccount:...

class ContactDate(winrt.system.Object):
    year: typing.Optional[typing.Optional[winrt.system.Int32]]
    month: typing.Optional[typing.Optional[winrt.system.UInt32]]
    kind: ContactDateKind
    description: str
    day: typing.Optional[typing.Optional[winrt.system.UInt32]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactDate: ...
    def __new__(cls: typing.Type[ContactDate]) -> ContactDate:...

class ContactEmail(winrt.system.Object):
    kind: ContactEmailKind
    description: str
    address: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactEmail: ...
    def __new__(cls: typing.Type[ContactEmail]) -> ContactEmail:...

class ContactField(winrt.system.Object):
    category: ContactFieldCategory
    name: str
    type: ContactFieldType
    value: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactField: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactField], value: str, type: ContactFieldType) -> ContactField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactField], value: str, type: ContactFieldType, category: ContactFieldCategory) -> ContactField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactField], name: str, value: str, type: ContactFieldType, category: ContactFieldCategory) -> ContactField:...

class ContactFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactFieldFactory: ...
    def __new__(cls: typing.Type[ContactFieldFactory]) -> ContactFieldFactory:...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, name: str, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, service: str, display_text: str, verb: typing.Optional[winrt.windows.foundation.Uri], /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, street: str, city: str, region: str, country: str, postal_code: str, /) -> typing.Optional[ContactLocationField]: ...

class ContactGroup(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactGroup: ...

class ContactInformation(winrt.system.Object):
    custom_fields: typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]
    emails: typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]
    instant_messages: typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactInstantMessageField]]
    locations: typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactLocationField]]
    name: str
    phone_numbers: typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactInformation: ...
    def get_thumbnail_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]: ...
    def query_custom_fields(self, custom_name: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]: ...

class ContactInstantMessageField(winrt.system.Object):
    category: ContactFieldCategory
    name: str
    type: ContactFieldType
    value: str
    display_text: str
    launch_uri: typing.Optional[winrt.windows.foundation.Uri]
    service: str
    user_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactInstantMessageField: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactInstantMessageField], user_name: str) -> ContactInstantMessageField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactInstantMessageField], user_name: str, category: ContactFieldCategory) -> ContactInstantMessageField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactInstantMessageField], user_name: str, category: ContactFieldCategory, service: str, display_text: str, verb: typing.Optional[winrt.windows.foundation.Uri]) -> ContactInstantMessageField:...

class ContactJobInfo(winrt.system.Object):
    title: str
    office: str
    manager: str
    description: str
    department: str
    company_yomi_name: str
    company_name: str
    company_address: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactJobInfo: ...
    def __new__(cls: typing.Type[ContactJobInfo]) -> ContactJobInfo:...

class ContactLaunchActionVerbs(winrt.system.Object):
    call: typing.ClassVar[str]
    map: typing.ClassVar[str]
    message: typing.ClassVar[str]
    post: typing.ClassVar[str]
    video_call: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactLaunchActionVerbs: ...

class ContactList(winrt.system.Object):
    supports_server_search: winrt.system.Boolean
    is_hidden: winrt.system.Boolean
    other_app_write_access: ContactListOtherAppWriteAccess
    display_name: str
    other_app_read_access: ContactListOtherAppReadAccess
    change_tracker: typing.Optional[ContactChangeTracker]
    source_display_name: str
    id: str
    sync_manager: typing.Optional[ContactListSyncManager]
    user_data_account_id: str
    sync_constraints: typing.Optional[ContactListSyncConstraints]
    limited_write_operations: typing.Optional[ContactListLimitedWriteOperations]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactList: ...
    def delete_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncAction: ...
    def get_change_tracker(self, identity: str, /) -> typing.Optional[ContactChangeTracker]: ...
    def get_contact_async(self, contact_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def get_contact_from_remote_id_async(self, remote_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    @typing.overload
    def get_contact_reader(self) -> typing.Optional[ContactReader]: ...
    @typing.overload
    def get_contact_reader(self, options: typing.Optional[ContactQueryOptions], /) -> typing.Optional[ContactReader]: ...
    def get_me_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def register_sync_manager_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def save_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncAction: ...
    def add_contact_changed(self, value: winrt.windows.foundation.TypedEventHandler[ContactList, ContactChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contact_changed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ContactListLimitedWriteOperations(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactListLimitedWriteOperations: ...
    def try_create_or_update_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_delete_contact_async(self, contact_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

class ContactListSyncConstraints(winrt.system.Object):
    can_sync_descriptions: winrt.system.Boolean
    max_company_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_child_relationships: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_business_fax_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_birthday_dates: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_assistant_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_other_addresses: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_anniversary_dates: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_home_addresses: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_other_dates: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_mobile_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_job_info: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_home_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_home_fax_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_other_email_addresses: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_personal_email_addresses: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_partner_relationships: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_parent_relationships: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_pager_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_other_relationships: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_other_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_radio_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_work_phone_numbers: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_work_email_addresses: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_work_addresses: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_websites: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_spouse_relationships: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_sibling_relationships: typing.Optional[typing.Optional[winrt.system.Int32]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactListSyncConstraints: ...

class ContactListSyncManager(winrt.system.Object):
    status: ContactListSyncStatus
    last_successful_sync_time: datetime.datetime
    last_attempted_sync_time: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactListSyncManager: ...
    def sync_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def add_sync_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ContactListSyncManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_sync_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ContactLocationField(winrt.system.Object):
    category: ContactFieldCategory
    name: str
    type: ContactFieldType
    value: str
    city: str
    country: str
    postal_code: str
    region: str
    street: str
    unstructured_address: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactLocationField: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactLocationField], unstructured_address: str) -> ContactLocationField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactLocationField], unstructured_address: str, category: ContactFieldCategory) -> ContactLocationField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactLocationField], unstructured_address: str, category: ContactFieldCategory, street: str, city: str, region: str, country: str, postal_code: str) -> ContactLocationField:...

class ContactManager(winrt.system.Object):
    system_sort_order: typing.ClassVar[ContactNameOrder]
    system_display_name_order: typing.ClassVar[ContactNameOrder]
    include_middle_name_in_system_display_and_sort: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactManager: ...
    @typing.overload
    @staticmethod
    def convert_contact_to_v_card_async(contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    @typing.overload
    @staticmethod
    def convert_contact_to_v_card_async(contact: typing.Optional[Contact], max_bytes: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    @staticmethod
    def convert_v_card_to_contact_async(v_card: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[ContactManagerForUser]: ...
    @staticmethod
    def is_show_contact_card_supported() -> winrt.system.Boolean: ...
    @staticmethod
    def is_show_delay_loaded_contact_card_supported() -> winrt.system.Boolean: ...
    @staticmethod
    def is_show_full_contact_card_supported_async() -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @staticmethod
    def request_annotation_store_async(access_type: ContactAnnotationStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationStore]: ...
    @typing.overload
    @staticmethod
    def request_store_async() -> winrt.windows.foundation.IAsyncOperation[ContactStore]: ...
    @typing.overload
    @staticmethod
    def request_store_async(access_type: ContactStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactStore]: ...
    @typing.overload
    @staticmethod
    def show_contact_card(contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, /) -> None: ...
    @typing.overload
    @staticmethod
    def show_contact_card(contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> None: ...
    @typing.overload
    @staticmethod
    def show_contact_card(contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, contact_card_options: typing.Optional[ContactCardOptions], /) -> None: ...
    @typing.overload
    @staticmethod
    def show_delay_loaded_contact_card(contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> typing.Optional[ContactCardDelayedDataLoader]: ...
    @typing.overload
    @staticmethod
    def show_delay_loaded_contact_card(contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, contact_card_options: typing.Optional[ContactCardOptions], /) -> typing.Optional[ContactCardDelayedDataLoader]: ...
    @staticmethod
    def show_full_contact_card(contact: typing.Optional[Contact], full_contact_card_options: typing.Optional[FullContactCardOptions], /) -> None: ...

class ContactManagerForUser(winrt.system.Object):
    system_sort_order: ContactNameOrder
    system_display_name_order: ContactNameOrder
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactManagerForUser: ...
    @typing.overload
    def convert_contact_to_v_card_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    @typing.overload
    def convert_contact_to_v_card_async(self, contact: typing.Optional[Contact], max_bytes: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    def convert_v_card_to_contact_async(self, v_card: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def request_annotation_store_async(self, access_type: ContactAnnotationStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationStore]: ...
    def request_store_async(self, access_type: ContactStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactStore]: ...
    def show_full_contact_card(self, contact: typing.Optional[Contact], full_contact_card_options: typing.Optional[FullContactCardOptions], /) -> None: ...

class ContactMatchReason(winrt.system.Object):
    field: ContactMatchReasonKind
    segments: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.data.text.TextSegment]]
    text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactMatchReason: ...

class ContactPanel(winrt.system.Object):
    header_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPanel: ...
    def close_panel(self) -> None: ...
    def add_closing(self, handler: winrt.windows.foundation.TypedEventHandler[ContactPanel, ContactPanelClosingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_launch_full_app_requested(self, handler: winrt.windows.foundation.TypedEventHandler[ContactPanel, ContactPanelLaunchFullAppRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_launch_full_app_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ContactPanelClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPanelClosingEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class ContactPanelLaunchFullAppRequestedEventArgs(winrt.system.Object):
    handled: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPanelLaunchFullAppRequestedEventArgs: ...

class ContactPhone(winrt.system.Object):
    number: str
    kind: ContactPhoneKind
    description: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPhone: ...
    def __new__(cls: typing.Type[ContactPhone]) -> ContactPhone:...

class ContactPicker(winrt.system.Object):
    selection_mode: ContactSelectionMode
    commit_button_text: str
    desired_fields: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    desired_fields_with_contact_field_type: typing.Optional[winrt.windows.foundation.collections.IVector[ContactFieldType]]
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPicker: ...
    def __new__(cls: typing.Type[ContactPicker]) -> ContactPicker:...
    @staticmethod
    def create_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[ContactPicker]: ...
    @staticmethod
    def is_supported_async() -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def pick_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def pick_contacts_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[Contact]]: ...
    def pick_multiple_contacts_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactInformation]]: ...
    def pick_single_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[ContactInformation]: ...

class ContactQueryOptions(winrt.system.Object):
    include_contacts_from_hidden_lists: winrt.system.Boolean
    desired_operations: ContactAnnotationOperations
    desired_fields: ContactQueryDesiredFields
    annotation_list_ids: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    contact_list_ids: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    text_search: typing.Optional[ContactQueryTextSearch]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactQueryOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactQueryOptions], text: str) -> ContactQueryOptions:...
    @typing.overload
    def __new__(cls: typing.Type[ContactQueryOptions], text: str, fields: ContactQuerySearchFields) -> ContactQueryOptions:...
    @typing.overload
    def __new__(cls: typing.Type[ContactQueryOptions]) -> ContactQueryOptions:...

class ContactQueryTextSearch(winrt.system.Object):
    text: str
    search_scope: ContactQuerySearchScope
    fields: ContactQuerySearchFields
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactQueryTextSearch: ...

class ContactReader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactReader: ...
    def get_matching_properties_with_match_reason(self, contact: typing.Optional[Contact], /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactMatchReason]]: ...
    def read_batch_async(self) -> winrt.windows.foundation.IAsyncOperation[ContactBatch]: ...

class ContactSignificantOther(winrt.system.Object):
    name: str
    description: str
    relationship: ContactRelationship
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactSignificantOther: ...
    def __new__(cls: typing.Type[ContactSignificantOther]) -> ContactSignificantOther:...

class ContactStore(winrt.system.Object):
    aggregate_contact_manager: typing.Optional[AggregateContactManager]
    change_tracker: typing.Optional[ContactChangeTracker]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactStore: ...
    @typing.overload
    def create_contact_list_async(self, display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactList]: ...
    @typing.overload
    def create_contact_list_async(self, display_name: str, user_data_account_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactList]: ...
    def find_contact_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactList]]: ...
    @typing.overload
    def find_contacts_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Contact]]: ...
    @typing.overload
    def find_contacts_async(self, search_text: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Contact]]: ...
    def get_change_tracker(self, identity: str, /) -> typing.Optional[ContactChangeTracker]: ...
    def get_contact_async(self, contact_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def get_contact_list_async(self, contact_list_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactList]: ...
    @typing.overload
    def get_contact_reader(self) -> typing.Optional[ContactReader]: ...
    @typing.overload
    def get_contact_reader(self, options: typing.Optional[ContactQueryOptions], /) -> typing.Optional[ContactReader]: ...
    def get_me_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def add_contact_changed(self, value: winrt.windows.foundation.TypedEventHandler[ContactStore, ContactChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contact_changed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ContactStoreNotificationTriggerDetails(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactStoreNotificationTriggerDetails: ...

class ContactWebsite(winrt.system.Object):
    uri: typing.Optional[winrt.windows.foundation.Uri]
    description: str
    raw_value: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactWebsite: ...
    def __new__(cls: typing.Type[ContactWebsite]) -> ContactWebsite:...

class FullContactCardOptions(winrt.system.Object):
    desired_remaining_view: winrt.windows.ui.viewmanagement.ViewSizePreference
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FullContactCardOptions: ...
    def __new__(cls: typing.Type[FullContactCardOptions]) -> FullContactCardOptions:...

class KnownContactField(winrt.system.Object):
    email: typing.ClassVar[str]
    instant_message: typing.ClassVar[str]
    location: typing.ClassVar[str]
    phone_number: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KnownContactField: ...
    @staticmethod
    def convert_name_to_type(name: str, /) -> ContactFieldType: ...
    @staticmethod
    def convert_type_to_name(type: ContactFieldType, /) -> str: ...

class PinnedContactIdsQueryResult(winrt.system.Object):
    contact_ids: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PinnedContactIdsQueryResult: ...

class PinnedContactManager(winrt.system.Object):
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PinnedContactManager: ...
    @staticmethod
    def get_default() -> typing.Optional[PinnedContactManager]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[PinnedContactManager]: ...
    def get_pinned_contact_ids_async(self) -> winrt.windows.foundation.IAsyncOperation[PinnedContactIdsQueryResult]: ...
    def is_contact_pinned(self, contact: typing.Optional[Contact], surface: PinnedContactSurface, /) -> winrt.system.Boolean: ...
    def is_pin_surface_supported(self, surface: PinnedContactSurface, /) -> winrt.system.Boolean: ...
    @staticmethod
    def is_supported() -> winrt.system.Boolean: ...
    def request_pin_contact_async(self, contact: typing.Optional[Contact], surface: PinnedContactSurface, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def request_pin_contacts_async(self, contacts: typing.Iterable[Contact], surface: PinnedContactSurface, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def request_unpin_contact_async(self, contact: typing.Optional[Contact], surface: PinnedContactSurface, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def signal_contact_activity(self, contact: typing.Optional[Contact], /) -> None: ...

class IContactField(winrt.system.Object):
    category: ContactFieldCategory
    name: str
    type: ContactFieldType
    value: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactField: ...

class IContactFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactFieldFactory: ...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, name: str, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...

class IContactInstantMessageFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactInstantMessageFieldFactory: ...
    @typing.overload
    def create_instant_message(self, user_name: str, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, service: str, display_text: str, verb: typing.Optional[winrt.windows.foundation.Uri], /) -> typing.Optional[ContactInstantMessageField]: ...

class IContactLocationFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactLocationFieldFactory: ...
    @typing.overload
    def create_location(self, unstructured_address: str, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, street: str, city: str, region: str, country: str, postal_code: str, /) -> typing.Optional[ContactLocationField]: ...

