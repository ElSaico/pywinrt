# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.applicationmodel.appointments
import winrt.windows.applicationmodel.contacts
import winrt.windows.applicationmodel.email
import winrt.windows.applicationmodel.userdatatasks
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system

from . import UserDataAccountContentKinds, UserDataAccountOtherAppReadAccess, UserDataAccountStoreAccessType

Self = typing.TypeVar('Self')

class UserDataAccount(winrt.system.Object):
    user_display_name: str
    other_app_read_access: UserDataAccountOtherAppReadAccess
    icon: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    device_account_type_id: str
    id: str
    package_family_name: str
    is_protected_under_lock: bool
    enterprise_id: str
    display_name: str
    explict_read_access_package_family_names: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    can_show_create_contact_group: bool
    provider_properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataAccount: ...
    def delete_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def find_appointment_calendars_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.appointments.AppointmentCalendar]]: ...
    def find_contact_annotation_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.contacts.ContactAnnotationList]]: ...
    def find_contact_groups_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.contacts.ContactGroup]]: ...
    def find_contact_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.contacts.ContactList]]: ...
    def find_email_mailboxes_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.email.EmailMailbox]]: ...
    def find_user_data_task_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.applicationmodel.userdatatasks.UserDataTaskList]]: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def try_show_create_contact_group_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...

class UserDataAccountManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataAccountManager: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[UserDataAccountManagerForUser]: ...
    @staticmethod
    def request_store_async(store_access_type: UserDataAccountStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[UserDataAccountStore]: ...
    @staticmethod
    def show_account_error_resolver_async(id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def show_account_settings_async(id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def show_add_account_async(content_kinds: UserDataAccountContentKinds, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...

class UserDataAccountManagerForUser(winrt.system.Object):
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataAccountManagerForUser: ...
    def request_store_async(self, store_access_type: UserDataAccountStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[UserDataAccountStore]: ...

class UserDataAccountStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataAccountStore: ...
    @typing.overload
    def create_account_async(self, user_display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataAccount]: ...
    @typing.overload
    def create_account_async(self, user_display_name: str, package_relative_app_id: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataAccount]: ...
    @typing.overload
    def create_account_async(self, user_display_name: str, package_relative_app_id: str, enterprise_id: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataAccount]: ...
    def find_accounts_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UserDataAccount]]: ...
    def get_account_async(self, id: str, /) -> winrt.windows.foundation.IAsyncOperation[UserDataAccount]: ...
    def add_store_changed(self, handler: winrt.windows.foundation.TypedEventHandler[UserDataAccountStore, UserDataAccountStoreChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_store_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class UserDataAccountStoreChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataAccountStoreChangedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

