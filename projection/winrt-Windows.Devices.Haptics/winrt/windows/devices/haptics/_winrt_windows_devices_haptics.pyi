# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import VibrationAccessStatus

Self = typing.TypeVar('Self')

class KnownSimpleHapticsControllerWaveforms(winrt.system.Object):
    buzz_continuous: typing.ClassVar[winrt.system.UInt16]
    click: typing.ClassVar[winrt.system.UInt16]
    press: typing.ClassVar[winrt.system.UInt16]
    release: typing.ClassVar[winrt.system.UInt16]
    rumble_continuous: typing.ClassVar[winrt.system.UInt16]
    brush_continuous: typing.ClassVar[winrt.system.UInt16]
    chisel_marker_continuous: typing.ClassVar[winrt.system.UInt16]
    eraser_continuous: typing.ClassVar[winrt.system.UInt16]
    error: typing.ClassVar[winrt.system.UInt16]
    galaxy_pen_continuous: typing.ClassVar[winrt.system.UInt16]
    hover: typing.ClassVar[winrt.system.UInt16]
    ink_continuous: typing.ClassVar[winrt.system.UInt16]
    marker_continuous: typing.ClassVar[winrt.system.UInt16]
    pencil_continuous: typing.ClassVar[winrt.system.UInt16]
    success: typing.ClassVar[winrt.system.UInt16]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KnownSimpleHapticsControllerWaveforms: ...

class SimpleHapticsController(winrt.system.Object):
    id: str
    is_intensity_supported: bool
    is_play_count_supported: bool
    is_play_duration_supported: bool
    is_replay_pause_interval_supported: bool
    supported_feedback: typing.Optional[winrt.windows.foundation.collections.IVectorView[SimpleHapticsControllerFeedback]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SimpleHapticsController: ...
    @typing.overload
    def send_haptic_feedback(self, feedback: typing.Optional[SimpleHapticsControllerFeedback], /) -> None: ...
    @typing.overload
    def send_haptic_feedback(self, feedback: typing.Optional[SimpleHapticsControllerFeedback], intensity: winrt.system.Double, /) -> None: ...
    def send_haptic_feedback_for_duration(self, feedback: typing.Optional[SimpleHapticsControllerFeedback], intensity: winrt.system.Double, play_duration: datetime.timedelta, /) -> None: ...
    def send_haptic_feedback_for_play_count(self, feedback: typing.Optional[SimpleHapticsControllerFeedback], intensity: winrt.system.Double, play_count: winrt.system.Int32, replay_pause_interval: datetime.timedelta, /) -> None: ...
    def stop_feedback(self) -> None: ...

class SimpleHapticsControllerFeedback(winrt.system.Object):
    duration: datetime.timedelta
    waveform: winrt.system.UInt16
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SimpleHapticsControllerFeedback: ...

class VibrationDevice(winrt.system.Object):
    id: str
    simple_haptics_controller: typing.Optional[SimpleHapticsController]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VibrationDevice: ...
    @staticmethod
    def find_all_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[VibrationDevice]]: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[VibrationDevice]: ...
    @staticmethod
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[VibrationDevice]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[VibrationAccessStatus]: ...

