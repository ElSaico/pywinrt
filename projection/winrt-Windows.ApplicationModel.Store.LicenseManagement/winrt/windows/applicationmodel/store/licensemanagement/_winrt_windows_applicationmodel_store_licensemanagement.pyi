# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams

from . import LicenseRefreshOption

Self = typing.TypeVar('Self')

class LicenseManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LicenseManager: ...
    @staticmethod
    def add_license_async(license: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def get_satisfaction_infos_async(content_ids: typing.Iterable[str], key_ids: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[LicenseSatisfactionResult]: ...
    @staticmethod
    def refresh_licenses_async(refresh_option: LicenseRefreshOption, /) -> winrt.windows.foundation.IAsyncAction: ...

class LicenseSatisfactionInfo(winrt.system.Object):
    is_satisfied: bool
    satisfied_by_device: bool
    satisfied_by_install_media: bool
    satisfied_by_open_license: bool
    satisfied_by_pass: bool
    satisfied_by_signed_in_user: bool
    satisfied_by_trial: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LicenseSatisfactionInfo: ...

class LicenseSatisfactionResult(winrt.system.Object):
    extended_error: winrt.windows.foundation.HResult
    license_satisfaction_infos: typing.Optional[winrt.windows.foundation.collections.IMapView[str, LicenseSatisfactionInfo]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LicenseSatisfactionResult: ...

