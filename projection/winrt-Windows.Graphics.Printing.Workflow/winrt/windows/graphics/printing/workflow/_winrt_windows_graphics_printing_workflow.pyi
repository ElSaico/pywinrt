# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.applicationmodel.activation
import winrt.windows.devices.printers
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.graphics.printing.printticket
import winrt.windows.storage
import winrt.windows.storage.streams
import winrt.windows.system

from . import PdlConversionHostBasedProcessingOperations, PrintWorkflowAttributesMergePolicy, PrintWorkflowJobAbortReason, PrintWorkflowPdlConversionType, PrintWorkflowPrinterJobStatus, PrintWorkflowSessionStatus, PrintWorkflowSubmittedStatus, PrintWorkflowUICompletionStatus

Self = typing.TypeVar('Self')

class PrintWorkflowBackgroundSession(winrt.system.Object):
    status: PrintWorkflowSessionStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowBackgroundSession: ...
    def start(self) -> None: ...
    def add_setup_requested(self, setup_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowBackgroundSession, PrintWorkflowBackgroundSetupRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_setup_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_submitted(self, submitted_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowBackgroundSession, PrintWorkflowSubmittedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_submitted(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PrintWorkflowBackgroundSetupRequestedEventArgs(winrt.system.Object):
    configuration: typing.Optional[PrintWorkflowConfiguration]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowBackgroundSetupRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def get_user_print_ticket_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket]: ...
    def set_requires_u_i(self) -> None: ...

class PrintWorkflowConfiguration(winrt.system.Object):
    job_title: str
    session_id: str
    source_app_display_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowConfiguration: ...
    def abort_print_flow(self, reason: PrintWorkflowJobAbortReason, /) -> None: ...

class PrintWorkflowForegroundSession(winrt.system.Object):
    status: PrintWorkflowSessionStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowForegroundSession: ...
    def start(self) -> None: ...
    def add_setup_requested(self, setup_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowForegroundSession, PrintWorkflowForegroundSetupRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_setup_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_xps_data_available(self, xps_data_available_event_handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowForegroundSession, PrintWorkflowXpsDataAvailableEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_xps_data_available(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PrintWorkflowForegroundSetupRequestedEventArgs(winrt.system.Object):
    configuration: typing.Optional[PrintWorkflowConfiguration]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowForegroundSetupRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def get_user_print_ticket_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket]: ...

class PrintWorkflowJobActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    session: typing.Optional[PrintWorkflowJobUISession]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowJobActivatedEventArgs: ...

class PrintWorkflowJobBackgroundSession(winrt.system.Object):
    status: PrintWorkflowSessionStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowJobBackgroundSession: ...
    def start(self) -> None: ...
    def add_job_starting(self, handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobBackgroundSession, PrintWorkflowJobStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_job_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pdl_modification_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobBackgroundSession, PrintWorkflowPdlModificationRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pdl_modification_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PrintWorkflowJobNotificationEventArgs(winrt.system.Object):
    configuration: typing.Optional[PrintWorkflowConfiguration]
    printer_job: typing.Optional[PrintWorkflowPrinterJob]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowJobNotificationEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class PrintWorkflowJobStartingEventArgs(winrt.system.Object):
    configuration: typing.Optional[PrintWorkflowConfiguration]
    printer: typing.Optional[winrt.windows.devices.printers.IppPrintDevice]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowJobStartingEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def set_skip_system_rendering(self) -> None: ...

class PrintWorkflowJobTriggerDetails(winrt.system.Object):
    print_workflow_job_session: typing.Optional[PrintWorkflowJobBackgroundSession]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowJobTriggerDetails: ...

class PrintWorkflowJobUISession(winrt.system.Object):
    status: PrintWorkflowSessionStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowJobUISession: ...
    def start(self) -> None: ...
    def add_job_notification(self, handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobUISession, PrintWorkflowJobNotificationEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_job_notification(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pdl_data_available(self, handler: winrt.windows.foundation.TypedEventHandler[PrintWorkflowJobUISession, PrintWorkflowPdlDataAvailableEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pdl_data_available(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PrintWorkflowObjectModelSourceFileContent(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowObjectModelSourceFileContent: ...
    def __new__(cls: typing.Type[PrintWorkflowObjectModelSourceFileContent], xps_stream: typing.Optional[winrt.windows.storage.streams.IInputStream]) -> PrintWorkflowObjectModelSourceFileContent:...

class PrintWorkflowObjectModelTargetPackage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowObjectModelTargetPackage: ...

class PrintWorkflowPdlConverter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowPdlConverter: ...
    @typing.overload
    def convert_pdl_async(self, print_ticket: typing.Optional[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket], input_stream: typing.Optional[winrt.windows.storage.streams.IInputStream], output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def convert_pdl_async(self, print_ticket: typing.Optional[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket], input_stream: typing.Optional[winrt.windows.storage.streams.IInputStream], output_stream: typing.Optional[winrt.windows.storage.streams.IOutputStream], host_based_processing_operations: PdlConversionHostBasedProcessingOperations, /) -> winrt.windows.foundation.IAsyncAction: ...

class PrintWorkflowPdlDataAvailableEventArgs(winrt.system.Object):
    configuration: typing.Optional[PrintWorkflowConfiguration]
    printer_job: typing.Optional[PrintWorkflowPrinterJob]
    source_content: typing.Optional[PrintWorkflowPdlSourceContent]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowPdlDataAvailableEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class PrintWorkflowPdlModificationRequestedEventArgs(winrt.system.Object):
    configuration: typing.Optional[PrintWorkflowConfiguration]
    printer_job: typing.Optional[PrintWorkflowPrinterJob]
    source_content: typing.Optional[PrintWorkflowPdlSourceContent]
    u_i_launcher: typing.Optional[PrintWorkflowUILauncher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowPdlModificationRequestedEventArgs: ...
    def create_job_on_printer(self, target_content_type: str, /) -> typing.Optional[PrintWorkflowPdlTargetStream]: ...
    @typing.overload
    def create_job_on_printer_with_attributes(self, job_attributes: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.windows.devices.printers.IppAttributeValue]], target_content_type: str, /) -> typing.Optional[PrintWorkflowPdlTargetStream]: ...
    @typing.overload
    def create_job_on_printer_with_attributes(self, job_attributes: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.windows.devices.printers.IppAttributeValue]], target_content_type: str, operation_attributes: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.windows.devices.printers.IppAttributeValue]], job_attributes_merge_policy: PrintWorkflowAttributesMergePolicy, operation_attributes_merge_policy: PrintWorkflowAttributesMergePolicy, /) -> typing.Optional[PrintWorkflowPdlTargetStream]: ...
    @typing.overload
    def create_job_on_printer_with_attributes_buffer(self, job_attributes_buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], target_content_type: str, /) -> typing.Optional[PrintWorkflowPdlTargetStream]: ...
    @typing.overload
    def create_job_on_printer_with_attributes_buffer(self, job_attributes_buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], target_content_type: str, operation_attributes_buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], job_attributes_merge_policy: PrintWorkflowAttributesMergePolicy, operation_attributes_merge_policy: PrintWorkflowAttributesMergePolicy, /) -> typing.Optional[PrintWorkflowPdlTargetStream]: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def get_pdl_converter(self, conversion_type: PrintWorkflowPdlConversionType, /) -> typing.Optional[PrintWorkflowPdlConverter]: ...

class PrintWorkflowPdlSourceContent(winrt.system.Object):
    content_type: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowPdlSourceContent: ...
    def get_content_file_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    def get_input_stream(self) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...

class PrintWorkflowPdlTargetStream(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowPdlTargetStream: ...
    def complete_stream_submission(self, status: PrintWorkflowSubmittedStatus, /) -> None: ...
    def get_output_stream(self) -> typing.Optional[winrt.windows.storage.streams.IOutputStream]: ...

class PrintWorkflowPrinterJob(winrt.system.Object):
    job_id: winrt.system.Int32
    printer: typing.Optional[winrt.windows.devices.printers.IppPrintDevice]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowPrinterJob: ...
    def get_job_attributes(self, attribute_names: typing.Iterable[str], /) -> typing.Optional[winrt.windows.foundation.collections.IMap[str, winrt.windows.devices.printers.IppAttributeValue]]: ...
    def get_job_attributes_as_buffer(self, attribute_names: typing.Iterable[str], /) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    def get_job_print_ticket(self) -> typing.Optional[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket]: ...
    def get_job_status(self) -> PrintWorkflowPrinterJobStatus: ...
    def set_job_attributes(self, job_attributes: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.windows.devices.printers.IppAttributeValue]], /) -> typing.Optional[winrt.windows.devices.printers.IppSetAttributesResult]: ...
    def set_job_attributes_from_buffer(self, job_attributes_buffer: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> typing.Optional[winrt.windows.devices.printers.IppSetAttributesResult]: ...

class PrintWorkflowSourceContent(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowSourceContent: ...
    def get_job_print_ticket_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket]: ...
    def get_source_spool_data_as_stream_content(self) -> typing.Optional[PrintWorkflowSpoolStreamContent]: ...
    def get_source_spool_data_as_xps_object_model(self) -> typing.Optional[PrintWorkflowObjectModelSourceFileContent]: ...

class PrintWorkflowSpoolStreamContent(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowSpoolStreamContent: ...
    def get_input_stream(self) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...

class PrintWorkflowStreamTarget(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowStreamTarget: ...
    def get_output_stream(self) -> typing.Optional[winrt.windows.storage.streams.IOutputStream]: ...

class PrintWorkflowSubmittedEventArgs(winrt.system.Object):
    operation: typing.Optional[PrintWorkflowSubmittedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowSubmittedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def get_target(self, job_print_ticket: typing.Optional[winrt.windows.graphics.printing.printticket.WorkflowPrintTicket], /) -> typing.Optional[PrintWorkflowTarget]: ...

class PrintWorkflowSubmittedOperation(winrt.system.Object):
    configuration: typing.Optional[PrintWorkflowConfiguration]
    xps_content: typing.Optional[PrintWorkflowSourceContent]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowSubmittedOperation: ...
    def complete(self, status: PrintWorkflowSubmittedStatus, /) -> None: ...

class PrintWorkflowTarget(winrt.system.Object):
    target_as_stream: typing.Optional[PrintWorkflowStreamTarget]
    target_as_xps_object_model_package: typing.Optional[PrintWorkflowObjectModelTargetPackage]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowTarget: ...

class PrintWorkflowTriggerDetails(winrt.system.Object):
    print_workflow_session: typing.Optional[PrintWorkflowBackgroundSession]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowTriggerDetails: ...

class PrintWorkflowUIActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    print_workflow_session: typing.Optional[PrintWorkflowForegroundSession]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowUIActivatedEventArgs: ...

class PrintWorkflowUILauncher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowUILauncher: ...
    def is_u_i_launch_enabled(self) -> bool: ...
    def launch_and_complete_u_i_async(self) -> winrt.windows.foundation.IAsyncOperation[PrintWorkflowUICompletionStatus]: ...

class PrintWorkflowXpsDataAvailableEventArgs(winrt.system.Object):
    operation: typing.Optional[PrintWorkflowSubmittedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintWorkflowXpsDataAvailableEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

