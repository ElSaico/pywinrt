# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.playback

from . import GraphicsTrustStatus, HdcpProtection, HdcpSetProtectionResult, ProtectionCapabilityResult, RenewalStatus, RevocationAndRenewalReasons
from . import ComponentLoadFailedEventHandler, RebootNeededEventHandler, ServiceRequestedEventHandler

Self = typing.TypeVar('Self')

class ComponentLoadFailedEventArgs(winrt.system.Object):
    completion: typing.Optional[MediaProtectionServiceCompletion]
    information: typing.Optional[RevocationAndRenewalInformation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComponentLoadFailedEventArgs: ...

class ComponentRenewal(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComponentRenewal: ...
    @staticmethod
    def renew_system_components_async(information: typing.Optional[RevocationAndRenewalInformation], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[RenewalStatus, winrt.system.UInt32]: ...

class HdcpSession(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HdcpSession: ...
    def __new__(cls: typing.Type[HdcpSession]) -> HdcpSession:...
    def close(self) -> None: ...
    def get_effective_protection(self) -> typing.Optional[typing.Optional[HdcpProtection]]: ...
    def is_effective_protection_at_least(self, protection: HdcpProtection, /) -> winrt.system.Boolean: ...
    def set_desired_min_protection_async(self, protection: HdcpProtection, /) -> winrt.windows.foundation.IAsyncOperation[HdcpSetProtectionResult]: ...
    def add_protection_changed(self, handler: winrt.windows.foundation.TypedEventHandler[HdcpSession, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_protection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MediaProtectionManager(winrt.system.Object):
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProtectionManager: ...
    def __new__(cls: typing.Type[MediaProtectionManager]) -> MediaProtectionManager:...
    def add_component_load_failed(self, handler: typing.Optional[ComponentLoadFailedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_component_load_failed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_reboot_needed(self, handler: typing.Optional[RebootNeededEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_reboot_needed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_service_requested(self, handler: typing.Optional[ServiceRequestedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_service_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MediaProtectionPMPServer(winrt.system.Object):
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProtectionPMPServer: ...
    def __new__(cls: typing.Type[MediaProtectionPMPServer], p_properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]) -> MediaProtectionPMPServer:...

class MediaProtectionServiceCompletion(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProtectionServiceCompletion: ...
    def complete(self, success: winrt.system.Boolean, /) -> None: ...

class ProtectionCapabilities(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProtectionCapabilities: ...
    def __new__(cls: typing.Type[ProtectionCapabilities]) -> ProtectionCapabilities:...
    def is_type_supported(self, type: str, key_system: str, /) -> ProtectionCapabilityResult: ...

class RevocationAndRenewalInformation(winrt.system.Object):
    items: typing.Optional[winrt.windows.foundation.collections.IVector[RevocationAndRenewalItem]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RevocationAndRenewalInformation: ...

class RevocationAndRenewalItem(winrt.system.Object):
    header_hash: str
    name: str
    public_key_hash: str
    reasons: RevocationAndRenewalReasons
    renewal_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RevocationAndRenewalItem: ...

class ServiceRequestedEventArgs(winrt.system.Object):
    completion: typing.Optional[MediaProtectionServiceCompletion]
    request: typing.Optional[IMediaProtectionServiceRequest]
    media_playback_item: typing.Optional[winrt.windows.media.playback.MediaPlaybackItem]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ServiceRequestedEventArgs: ...

class IMediaProtectionServiceRequest(winrt.system.Object):
    protection_system: winrt.system.Guid
    type: winrt.system.Guid
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMediaProtectionServiceRequest: ...

