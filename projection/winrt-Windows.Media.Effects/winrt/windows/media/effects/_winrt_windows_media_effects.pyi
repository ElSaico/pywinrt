# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.foundation.numerics
import winrt.windows.graphics.directx.direct3d11
import winrt.windows.media
import winrt.windows.media.capture
import winrt.windows.media.editing
import winrt.windows.media.mediaproperties
import winrt.windows.media.playback
import winrt.windows.media.render
import winrt.windows.media.transcoding
import winrt.windows.storage.streams
import winrt.windows.ui

from . import AudioEffectType, MediaEffectClosedReason, MediaMemoryTypes

Self = typing.TypeVar('Self')

class AudioCaptureEffectsManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioCaptureEffectsManager: ...
    def get_audio_capture_effects(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[AudioEffect]]: ...
    def add_audio_capture_effects_changed(self, handler: winrt.windows.foundation.TypedEventHandler[AudioCaptureEffectsManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_audio_capture_effects_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class AudioEffect(winrt.system.Object):
    audio_effect_type: AudioEffectType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioEffect: ...

class AudioEffectDefinition(winrt.system.Object):
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioEffectDefinition: ...
    @typing.overload
    def __new__(cls: typing.Type[AudioEffectDefinition], activatable_class_id: str) -> AudioEffectDefinition:...
    @typing.overload
    def __new__(cls: typing.Type[AudioEffectDefinition], activatable_class_id: str, props: typing.Optional[winrt.windows.foundation.collections.IPropertySet]) -> AudioEffectDefinition:...

class AudioEffectsManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioEffectsManager: ...
    @typing.overload
    @staticmethod
    def create_audio_capture_effects_manager(device_id: str, category: winrt.windows.media.capture.MediaCategory, /) -> typing.Optional[AudioCaptureEffectsManager]: ...
    @typing.overload
    @staticmethod
    def create_audio_capture_effects_manager(device_id: str, category: winrt.windows.media.capture.MediaCategory, mode: winrt.windows.media.AudioProcessing, /) -> typing.Optional[AudioCaptureEffectsManager]: ...
    @typing.overload
    @staticmethod
    def create_audio_render_effects_manager(device_id: str, category: winrt.windows.media.render.AudioRenderCategory, /) -> typing.Optional[AudioRenderEffectsManager]: ...
    @typing.overload
    @staticmethod
    def create_audio_render_effects_manager(device_id: str, category: winrt.windows.media.render.AudioRenderCategory, mode: winrt.windows.media.AudioProcessing, /) -> typing.Optional[AudioRenderEffectsManager]: ...

class AudioRenderEffectsManager(winrt.system.Object):
    effects_provider_settings_label: str
    effects_provider_thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioRenderEffectsManager: ...
    def get_audio_render_effects(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[AudioEffect]]: ...
    def show_settings_u_i(self) -> None: ...
    def add_audio_render_effects_changed(self, handler: winrt.windows.foundation.TypedEventHandler[AudioRenderEffectsManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_audio_render_effects_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CompositeVideoFrameContext(winrt.system.Object):
    background_frame: typing.Optional[winrt.windows.media.VideoFrame]
    output_frame: typing.Optional[winrt.windows.media.VideoFrame]
    surfaces_to_overlay: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.directx.direct3d11.IDirect3DSurface]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompositeVideoFrameContext: ...
    def get_overlay_for_surface(self, surface_to_overlay: typing.Optional[winrt.windows.graphics.directx.direct3d11.IDirect3DSurface], /) -> typing.Optional[winrt.windows.media.editing.MediaOverlay]: ...

class ProcessAudioFrameContext(winrt.system.Object):
    input_frame: typing.Optional[winrt.windows.media.AudioFrame]
    output_frame: typing.Optional[winrt.windows.media.AudioFrame]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessAudioFrameContext: ...

class ProcessVideoFrameContext(winrt.system.Object):
    input_frame: typing.Optional[winrt.windows.media.VideoFrame]
    output_frame: typing.Optional[winrt.windows.media.VideoFrame]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessVideoFrameContext: ...

class SlowMotionEffectDefinition(winrt.system.Object):
    time_stretch_rate: winrt.system.Double
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SlowMotionEffectDefinition: ...
    def __new__(cls: typing.Type[SlowMotionEffectDefinition]) -> SlowMotionEffectDefinition:...

class VideoCompositorDefinition(winrt.system.Object):
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoCompositorDefinition: ...
    @typing.overload
    def __new__(cls: typing.Type[VideoCompositorDefinition], activatable_class_id: str) -> VideoCompositorDefinition:...
    @typing.overload
    def __new__(cls: typing.Type[VideoCompositorDefinition], activatable_class_id: str, props: typing.Optional[winrt.windows.foundation.collections.IPropertySet]) -> VideoCompositorDefinition:...

class VideoEffectDefinition(winrt.system.Object):
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoEffectDefinition: ...
    @typing.overload
    def __new__(cls: typing.Type[VideoEffectDefinition], activatable_class_id: str) -> VideoEffectDefinition:...
    @typing.overload
    def __new__(cls: typing.Type[VideoEffectDefinition], activatable_class_id: str, props: typing.Optional[winrt.windows.foundation.collections.IPropertySet]) -> VideoEffectDefinition:...

class VideoTransformEffectDefinition(winrt.system.Object):
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    rotation: winrt.windows.media.mediaproperties.MediaRotation
    processing_algorithm: winrt.windows.media.transcoding.MediaVideoProcessingAlgorithm
    padding_color: winrt.windows.ui.Color
    output_size: winrt.windows.foundation.Size
    mirror: winrt.windows.media.mediaproperties.MediaMirroringOptions
    crop_rectangle: winrt.windows.foundation.Rect
    spherical_projection: typing.Optional[VideoTransformSphericalProjection]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoTransformEffectDefinition: ...
    def __new__(cls: typing.Type[VideoTransformEffectDefinition]) -> VideoTransformEffectDefinition:...

class VideoTransformSphericalProjection(winrt.system.Object):
    view_orientation: winrt.windows.foundation.numerics.Quaternion
    projection_mode: winrt.windows.media.playback.SphericalVideoProjectionMode
    is_enabled: bool
    horizontal_field_of_view_in_degrees: winrt.system.Double
    frame_format: winrt.windows.media.mediaproperties.SphericalVideoFrameFormat
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoTransformSphericalProjection: ...

class IAudioEffectDefinition(winrt.system.Object):
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAudioEffectDefinition: ...

class IBasicAudioEffect(winrt.system.Object):
    supported_encoding_properties: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.media.mediaproperties.AudioEncodingProperties]]
    use_input_frame_for_output: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBasicAudioEffect: ...
    def close(self, reason: MediaEffectClosedReason, /) -> None: ...
    def discard_queued_frames(self) -> None: ...
    def process_frame(self, context: typing.Optional[ProcessAudioFrameContext], /) -> None: ...
    def set_encoding_properties(self, encoding_properties: typing.Optional[winrt.windows.media.mediaproperties.AudioEncodingProperties], /) -> None: ...
    def set_properties(self, configuration: typing.Optional[winrt.windows.foundation.collections.IPropertySet], /) -> None: ...

class IBasicVideoEffect(winrt.system.Object):
    is_read_only: bool
    supported_encoding_properties: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.media.mediaproperties.VideoEncodingProperties]]
    supported_memory_types: MediaMemoryTypes
    time_independent: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBasicVideoEffect: ...
    def close(self, reason: MediaEffectClosedReason, /) -> None: ...
    def discard_queued_frames(self) -> None: ...
    def process_frame(self, context: typing.Optional[ProcessVideoFrameContext], /) -> None: ...
    def set_encoding_properties(self, encoding_properties: typing.Optional[winrt.windows.media.mediaproperties.VideoEncodingProperties], device: typing.Optional[winrt.windows.graphics.directx.direct3d11.IDirect3DDevice], /) -> None: ...
    def set_properties(self, configuration: typing.Optional[winrt.windows.foundation.collections.IPropertySet], /) -> None: ...

class IVideoCompositor(winrt.system.Object):
    time_independent: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IVideoCompositor: ...
    def close(self, reason: MediaEffectClosedReason, /) -> None: ...
    def composite_frame(self, context: typing.Optional[CompositeVideoFrameContext], /) -> None: ...
    def discard_queued_frames(self) -> None: ...
    def set_encoding_properties(self, background_properties: typing.Optional[winrt.windows.media.mediaproperties.VideoEncodingProperties], device: typing.Optional[winrt.windows.graphics.directx.direct3d11.IDirect3DDevice], /) -> None: ...
    def set_properties(self, configuration: typing.Optional[winrt.windows.foundation.collections.IPropertySet], /) -> None: ...

class IVideoCompositorDefinition(winrt.system.Object):
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IVideoCompositorDefinition: ...

class IVideoEffectDefinition(winrt.system.Object):
    activatable_class_id: str
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IVideoEffectDefinition: ...

