# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.graphics.directx.direct3d11
import winrt.windows.graphics.imaging
import winrt.windows.media
import winrt.windows.media.capture
import winrt.windows.media.devices
import winrt.windows.media.devices.core
import winrt.windows.media.mediaproperties
import winrt.windows.perception.spatial
import winrt.windows.storage.streams
import winrt.windows.ui.windowmanagement

from . import MediaFrameReaderAcquisitionMode, MediaFrameReaderStartStatus, MediaFrameSourceGetPropertyStatus, MediaFrameSourceKind, MediaFrameSourceSetPropertyStatus, MultiSourceMediaFrameReaderStartStatus

Self = typing.TypeVar('Self')

class AudioMediaFrame(winrt.system.Object):
    audio_encoding_properties: typing.Optional[winrt.windows.media.mediaproperties.AudioEncodingProperties]
    frame_reference: typing.Optional[MediaFrameReference]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioMediaFrame: ...
    def get_audio_frame(self) -> typing.Optional[winrt.windows.media.AudioFrame]: ...

class BufferMediaFrame(winrt.system.Object):
    buffer: typing.Optional[winrt.windows.storage.streams.IBuffer]
    frame_reference: typing.Optional[MediaFrameReference]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BufferMediaFrame: ...

class DepthMediaFrame(winrt.system.Object):
    depth_format: typing.Optional[DepthMediaFrameFormat]
    frame_reference: typing.Optional[MediaFrameReference]
    video_media_frame: typing.Optional[VideoMediaFrame]
    max_reliable_depth: winrt.system.UInt32
    min_reliable_depth: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DepthMediaFrame: ...
    def try_create_coordinate_mapper(self, camera_intrinsics: typing.Optional[winrt.windows.media.devices.core.CameraIntrinsics], coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem], /) -> typing.Optional[winrt.windows.media.devices.core.DepthCorrelatedCoordinateMapper]: ...

class DepthMediaFrameFormat(winrt.system.Object):
    depth_scale_in_meters: winrt.system.Double
    video_format: typing.Optional[VideoMediaFrameFormat]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DepthMediaFrameFormat: ...

class InfraredMediaFrame(winrt.system.Object):
    frame_reference: typing.Optional[MediaFrameReference]
    is_illuminated: winrt.system.Boolean
    video_media_frame: typing.Optional[VideoMediaFrame]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfraredMediaFrame: ...

class MediaFrameArrivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameArrivedEventArgs: ...

class MediaFrameFormat(winrt.system.Object):
    frame_rate: typing.Optional[winrt.windows.media.mediaproperties.MediaRatio]
    major_type: str
    properties: typing.Optional[winrt.windows.foundation.collections.IMapView[uuid.UUID, winrt.system.Object]]
    subtype: str
    video_format: typing.Optional[VideoMediaFrameFormat]
    audio_encoding_properties: typing.Optional[winrt.windows.media.mediaproperties.AudioEncodingProperties]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameFormat: ...

class MediaFrameReader(winrt.system.Object):
    acquisition_mode: MediaFrameReaderAcquisitionMode
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameReader: ...
    def close(self) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperation[MediaFrameReaderStartStatus]: ...
    def stop_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def try_acquire_latest_frame(self) -> typing.Optional[MediaFrameReference]: ...
    def add_frame_arrived(self, handler: winrt.windows.foundation.TypedEventHandler[MediaFrameReader, MediaFrameArrivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_arrived(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MediaFrameReference(winrt.system.Object):
    buffer_media_frame: typing.Optional[BufferMediaFrame]
    coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem]
    duration: datetime.timedelta
    format: typing.Optional[MediaFrameFormat]
    properties: typing.Optional[winrt.windows.foundation.collections.IMapView[uuid.UUID, winrt.system.Object]]
    source_kind: MediaFrameSourceKind
    system_relative_time: typing.Optional[typing.Optional[datetime.timedelta]]
    video_media_frame: typing.Optional[VideoMediaFrame]
    audio_media_frame: typing.Optional[AudioMediaFrame]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameReference: ...
    def close(self) -> None: ...

class MediaFrameSource(winrt.system.Object):
    controller: typing.Optional[MediaFrameSourceController]
    current_format: typing.Optional[MediaFrameFormat]
    info: typing.Optional[MediaFrameSourceInfo]
    supported_formats: typing.Optional[winrt.windows.foundation.collections.IVectorView[MediaFrameFormat]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameSource: ...
    def set_format_async(self, format: typing.Optional[MediaFrameFormat], /) -> winrt.windows.foundation.IAsyncAction: ...
    def try_get_camera_intrinsics(self, format: typing.Optional[MediaFrameFormat], /) -> typing.Optional[winrt.windows.media.devices.core.CameraIntrinsics]: ...
    def add_format_changed(self, handler: winrt.windows.foundation.TypedEventHandler[MediaFrameSource, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_format_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MediaFrameSourceController(winrt.system.Object):
    video_device_controller: typing.Optional[winrt.windows.media.devices.VideoDeviceController]
    audio_device_controller: typing.Optional[winrt.windows.media.devices.AudioDeviceController]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameSourceController: ...
    def get_property_async(self, property_id: str, /) -> winrt.windows.foundation.IAsyncOperation[MediaFrameSourceGetPropertyResult]: ...
    def get_property_by_extended_id_async(self, extended_property_id: winrt.system.Array[winrt.system.UInt8], max_property_value_size: typing.Optional[winrt.system.UInt32], /) -> winrt.windows.foundation.IAsyncOperation[MediaFrameSourceGetPropertyResult]: ...
    def set_property_async(self, property_id: str, property_value: typing.Optional[winrt.system.Object], /) -> winrt.windows.foundation.IAsyncOperation[MediaFrameSourceSetPropertyStatus]: ...
    def set_property_by_extended_id_async(self, extended_property_id: winrt.system.Array[winrt.system.UInt8], property_value: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[MediaFrameSourceSetPropertyStatus]: ...

class MediaFrameSourceGetPropertyResult(winrt.system.Object):
    status: MediaFrameSourceGetPropertyStatus
    value: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameSourceGetPropertyResult: ...

class MediaFrameSourceGroup(winrt.system.Object):
    display_name: str
    id: str
    source_infos: typing.Optional[winrt.windows.foundation.collections.IVectorView[MediaFrameSourceInfo]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameSourceGroup: ...
    @staticmethod
    def find_all_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[MediaFrameSourceGroup]]: ...
    @staticmethod
    def from_id_async(id: str, /) -> winrt.windows.foundation.IAsyncOperation[MediaFrameSourceGroup]: ...
    @staticmethod
    def get_device_selector() -> str: ...

class MediaFrameSourceInfo(winrt.system.Object):
    coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem]
    device_information: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation]
    id: str
    media_stream_type: winrt.windows.media.capture.MediaStreamType
    properties: typing.Optional[winrt.windows.foundation.collections.IMapView[uuid.UUID, winrt.system.Object]]
    source_group: typing.Optional[MediaFrameSourceGroup]
    source_kind: MediaFrameSourceKind
    profile_id: str
    video_profile_media_description: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.media.capture.MediaCaptureVideoProfileMediaDescription]]
    is_shareable: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFrameSourceInfo: ...
    def get_relative_panel(self, display_region: typing.Optional[winrt.windows.ui.windowmanagement.DisplayRegion], /) -> winrt.windows.devices.enumeration.Panel: ...

class MultiSourceMediaFrameArrivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MultiSourceMediaFrameArrivedEventArgs: ...

class MultiSourceMediaFrameReader(winrt.system.Object):
    acquisition_mode: MediaFrameReaderAcquisitionMode
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MultiSourceMediaFrameReader: ...
    def close(self) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperation[MultiSourceMediaFrameReaderStartStatus]: ...
    def stop_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def try_acquire_latest_frame(self) -> typing.Optional[MultiSourceMediaFrameReference]: ...
    def add_frame_arrived(self, handler: winrt.windows.foundation.TypedEventHandler[MultiSourceMediaFrameReader, MultiSourceMediaFrameArrivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_arrived(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MultiSourceMediaFrameReference(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MultiSourceMediaFrameReference: ...
    def close(self) -> None: ...
    def try_get_frame_reference_by_source_id(self, source_id: str, /) -> typing.Optional[MediaFrameReference]: ...

class VideoMediaFrame(winrt.system.Object):
    camera_intrinsics: typing.Optional[winrt.windows.media.devices.core.CameraIntrinsics]
    depth_media_frame: typing.Optional[DepthMediaFrame]
    direct3_d_surface: typing.Optional[winrt.windows.graphics.directx.direct3d11.IDirect3DSurface]
    frame_reference: typing.Optional[MediaFrameReference]
    infrared_media_frame: typing.Optional[InfraredMediaFrame]
    software_bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap]
    video_format: typing.Optional[VideoMediaFrameFormat]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoMediaFrame: ...
    def get_video_frame(self) -> typing.Optional[winrt.windows.media.VideoFrame]: ...

class VideoMediaFrameFormat(winrt.system.Object):
    depth_format: typing.Optional[DepthMediaFrameFormat]
    height: winrt.system.UInt32
    media_frame_format: typing.Optional[MediaFrameFormat]
    width: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoMediaFrameFormat: ...

