# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt.system
import winrt.windows.applicationmodel.datatransfer
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system

from winrt.windows.services.cortana import CortanaPermission, CortanaPermissionsChangeResult

Self = typing.TypeVar('Self')

class CortanaActionableInsights(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaActionableInsights: ...
    @staticmethod
    def get_default() -> typing.Optional[CortanaActionableInsights]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[CortanaActionableInsights]: ...
    def is_available_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_insights_async(self, datapackage: typing.Optional[winrt.windows.applicationmodel.datatransfer.DataPackage], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_insights_async(self, datapackage: typing.Optional[winrt.windows.applicationmodel.datatransfer.DataPackage], options: typing.Optional[CortanaActionableInsightsOptions], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_insights_for_image_async(self, image_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_insights_for_image_async(self, image_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], options: typing.Optional[CortanaActionableInsightsOptions], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_insights_for_text_async(self, text: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_insights_for_text_async(self, text: str, options: typing.Optional[CortanaActionableInsightsOptions], /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

class CortanaActionableInsightsOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaActionableInsightsOptions: ...
    def __new__(cls: typing.Type[CortanaActionableInsightsOptions]) -> CortanaActionableInsightsOptions:...
    @_property
    def surrounding_text(self) -> str: ...
    @surrounding_text.setter
    def surrounding_text(self, value: str) -> None: ...
    @_property
    def content_source_web_link(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @content_source_web_link.setter
    def content_source_web_link(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...

class CortanaPermissionsManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaPermissionsManager: ...
    def are_permissions_granted_async(self, permissions: typing.Iterable[CortanaPermission], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @staticmethod
    def get_default() -> typing.Optional[CortanaPermissionsManager]: ...
    def grant_permissions_async(self, permissions: typing.Iterable[CortanaPermission], /) -> winrt.windows.foundation.IAsyncOperation[CortanaPermissionsChangeResult]: ...
    def is_supported(self) -> bool: ...
    def revoke_permissions_async(self, permissions: typing.Iterable[CortanaPermission], /) -> winrt.windows.foundation.IAsyncOperation[CortanaPermissionsChangeResult]: ...

class CortanaSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaSettings: ...
    @staticmethod
    def get_default() -> typing.Optional[CortanaSettings]: ...
    @staticmethod
    def is_supported() -> bool: ...
    @_property
    def is_voice_activation_enabled(self) -> bool: ...
    @is_voice_activation_enabled.setter
    def is_voice_activation_enabled(self, value: bool) -> None: ...
    @_property
    def has_user_consent_to_voice_activation(self) -> bool: ...

