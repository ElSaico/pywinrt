# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.composition

class AppWindowClosedReason(enum.IntEnum):
    OTHER = 0
    APP_INITIATED = 1
    USER_INITIATED = 2

class AppWindowFrameStyle(enum.IntEnum):
    DEFAULT = 0
    NO_FRAME = 1

class AppWindowPresentationKind(enum.IntEnum):
    DEFAULT = 0
    COMPACT_OVERLAY = 1
    FULL_SCREEN = 2

class AppWindowTitleBarVisibility(enum.IntEnum):
    DEFAULT = 0
    ALWAYS_HIDDEN = 1

class WindowingEnvironmentKind(enum.IntEnum):
    UNKNOWN = 0
    OVERLAPPED = 1
    TILED = 2

Self = typing.TypeVar('Self')

class AppWindow(winrt.system.Object):
    title: str
    persisted_state_id: str
    content: typing.Optional[winrt.windows.ui.UIContentRoot]
    dispatcher_queue: typing.Optional[winrt.windows.system.DispatcherQueue]
    frame: typing.Optional[AppWindowFrame]
    is_visible: winrt.system.Boolean
    presenter: typing.Optional[AppWindowPresenter]
    title_bar: typing.Optional[AppWindowTitleBar]
    u_i_context: typing.Optional[winrt.windows.ui.UIContext]
    windowing_environment: typing.Optional[WindowingEnvironment]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindow: ...
    @staticmethod
    def clear_all_persisted_state() -> None: ...
    @staticmethod
    def clear_persisted_state(key: str, /) -> None: ...
    def close_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def get_display_regions(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[DisplayRegion]]: ...
    def get_placement(self) -> typing.Optional[AppWindowPlacement]: ...
    def request_move_adjacent_to_current_view(self) -> None: ...
    def request_move_adjacent_to_window(self, anchor_window: typing.Optional[AppWindow], /) -> None: ...
    def request_move_relative_to_current_view_content(self, content_offset: winrt.windows.foundation.Point, /) -> None: ...
    def request_move_relative_to_display_region(self, display_region: typing.Optional[DisplayRegion], display_region_offset: winrt.windows.foundation.Point, /) -> None: ...
    def request_move_relative_to_window_content(self, anchor_window: typing.Optional[AppWindow], content_offset: winrt.windows.foundation.Point, /) -> None: ...
    def request_move_to_display_region(self, display_region: typing.Optional[DisplayRegion], /) -> None: ...
    def request_size(self, frame_size: winrt.windows.foundation.Size, /) -> None: ...
    @staticmethod
    def try_create_async() -> winrt.windows.foundation.IAsyncOperation[AppWindow]: ...
    def try_show_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def add_changed(self, handler: winrt.windows.foundation.TypedEventHandler[AppWindow, AppWindowChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_close_requested(self, handler: winrt.windows.foundation.TypedEventHandler[AppWindow, AppWindowCloseRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_close_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[AppWindow, AppWindowClosedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class AppWindowChangedEventArgs(winrt.system.Object):
    did_available_window_presentations_change: winrt.system.Boolean
    did_display_regions_change: winrt.system.Boolean
    did_frame_change: winrt.system.Boolean
    did_size_change: winrt.system.Boolean
    did_title_bar_change: winrt.system.Boolean
    did_visibility_change: winrt.system.Boolean
    did_window_presentation_change: winrt.system.Boolean
    did_windowing_environment_change: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowChangedEventArgs: ...

class AppWindowCloseRequestedEventArgs(winrt.system.Object):
    cancel: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowCloseRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class AppWindowClosedEventArgs(winrt.system.Object):
    reason: AppWindowClosedReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowClosedEventArgs: ...

class AppWindowFrame(winrt.system.Object):
    drag_region_visuals: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.composition.IVisualElement]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowFrame: ...
    def get_frame_style(self) -> AppWindowFrameStyle: ...
    def set_frame_style(self, frame_style: AppWindowFrameStyle, /) -> None: ...

class AppWindowPlacement(winrt.system.Object):
    display_region: typing.Optional[DisplayRegion]
    offset: winrt.windows.foundation.Point
    size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowPlacement: ...

class AppWindowPresentationConfiguration(winrt.system.Object):
    kind: AppWindowPresentationKind
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowPresentationConfiguration: ...

class AppWindowPresenter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowPresenter: ...
    def get_configuration(self) -> typing.Optional[AppWindowPresentationConfiguration]: ...
    def is_presentation_supported(self, presentation_kind: AppWindowPresentationKind, /) -> winrt.system.Boolean: ...
    def request_presentation(self, presentation_kind: AppWindowPresentationKind, /) -> winrt.system.Boolean: ...

class AppWindowTitleBar(winrt.system.Object):
    inactive_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    inactive_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    extends_content_into_title_bar: winrt.system.Boolean
    button_pressed_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_pressed_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_inactive_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_inactive_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_hover_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_hover_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_foreground_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    button_background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    background_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    is_visible: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowTitleBar: ...
    def get_preferred_visibility(self) -> AppWindowTitleBarVisibility: ...
    def get_title_bar_occlusions(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[AppWindowTitleBarOcclusion]]: ...
    def set_preferred_visibility(self, visibility_mode: AppWindowTitleBarVisibility, /) -> None: ...

class AppWindowTitleBarOcclusion(winrt.system.Object):
    occluding_rect: winrt.windows.foundation.Rect
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppWindowTitleBarOcclusion: ...

class CompactOverlayPresentationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CompactOverlayPresentationConfiguration: ...
    def __new__(cls: typing.Type[CompactOverlayPresentationConfiguration]) -> CompactOverlayPresentationConfiguration:...

class DefaultPresentationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DefaultPresentationConfiguration: ...
    def __new__(cls: typing.Type[DefaultPresentationConfiguration]) -> DefaultPresentationConfiguration:...

class DisplayRegion(winrt.system.Object):
    display_monitor_device_id: str
    is_visible: winrt.system.Boolean
    windowing_environment: typing.Optional[WindowingEnvironment]
    work_area_offset: winrt.windows.foundation.Point
    work_area_size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DisplayRegion: ...
    def add_changed(self, handler: winrt.windows.foundation.TypedEventHandler[DisplayRegion, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class FullScreenPresentationConfiguration(winrt.system.Object):
    is_exclusive: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FullScreenPresentationConfiguration: ...
    def __new__(cls: typing.Type[FullScreenPresentationConfiguration]) -> FullScreenPresentationConfiguration:...

class WindowServices(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowServices: ...
    @staticmethod
    def find_all_top_level_window_ids() -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.ui.WindowId]]: ...

class WindowingEnvironment(winrt.system.Object):
    is_enabled: winrt.system.Boolean
    kind: WindowingEnvironmentKind
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironment: ...
    @typing.overload
    @staticmethod
    def find_all() -> typing.Optional[winrt.windows.foundation.collections.IVectorView[WindowingEnvironment]]: ...
    @typing.overload
    @staticmethod
    def find_all(kind: WindowingEnvironmentKind, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[WindowingEnvironment]]: ...
    def get_display_regions(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[DisplayRegion]]: ...
    def add_changed(self, handler: winrt.windows.foundation.TypedEventHandler[WindowingEnvironment, WindowingEnvironmentChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WindowingEnvironmentAddedEventArgs(winrt.system.Object):
    windowing_environment: typing.Optional[WindowingEnvironment]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironmentAddedEventArgs: ...

class WindowingEnvironmentChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironmentChangedEventArgs: ...

class WindowingEnvironmentRemovedEventArgs(winrt.system.Object):
    windowing_environment: typing.Optional[WindowingEnvironment]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowingEnvironmentRemovedEventArgs: ...

