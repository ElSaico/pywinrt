# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking
import winrt.windows.networking.connectivity
import winrt.windows.networking.sockets

from . import DnssdRegistrationStatus, DnssdServiceWatcherStatus

Self = typing.TypeVar('Self')

class DnssdRegistrationResult(winrt.system.Object):
    has_instance_name_changed: bool
    ip_address: typing.Optional[winrt.windows.networking.HostName]
    status: DnssdRegistrationStatus
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DnssdRegistrationResult: ...
    def __new__(cls: typing.Type[DnssdRegistrationResult]) -> DnssdRegistrationResult:...
    def to_string(self) -> str: ...

class DnssdServiceInstance(winrt.system.Object):
    weight: winrt.system.UInt16
    priority: winrt.system.UInt16
    port: winrt.system.UInt16
    host_name: typing.Optional[winrt.windows.networking.HostName]
    dnssd_service_instance_name: str
    text_attributes: typing.Optional[winrt.windows.foundation.collections.IMap[str, str]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DnssdServiceInstance: ...
    def __new__(cls: typing.Type[DnssdServiceInstance], dnssd_service_instance_name: str, host_name: typing.Optional[winrt.windows.networking.HostName], port: winrt.system.UInt16) -> DnssdServiceInstance:...
    @typing.overload
    def register_datagram_socket_async(self, socket: typing.Optional[winrt.windows.networking.sockets.DatagramSocket], /) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]: ...
    @typing.overload
    def register_datagram_socket_async(self, socket: typing.Optional[winrt.windows.networking.sockets.DatagramSocket], adapter: typing.Optional[winrt.windows.networking.connectivity.NetworkAdapter], /) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]: ...
    @typing.overload
    def register_stream_socket_listener_async(self, socket: typing.Optional[winrt.windows.networking.sockets.StreamSocketListener], /) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]: ...
    @typing.overload
    def register_stream_socket_listener_async(self, socket: typing.Optional[winrt.windows.networking.sockets.StreamSocketListener], adapter: typing.Optional[winrt.windows.networking.connectivity.NetworkAdapter], /) -> winrt.windows.foundation.IAsyncOperation[DnssdRegistrationResult]: ...
    def to_string(self) -> str: ...

class DnssdServiceInstanceCollection(winrt.system.Object, typing.Sequence[DnssdServiceInstance]):
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> DnssdServiceInstance: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[DnssdServiceInstance]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DnssdServiceInstanceCollection: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[DnssdServiceInstance]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[DnssdServiceInstance]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[DnssdServiceInstance], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[DnssdServiceInstance], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...

class DnssdServiceWatcher(winrt.system.Object):
    status: DnssdServiceWatcherStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DnssdServiceWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: winrt.windows.foundation.TypedEventHandler[DnssdServiceWatcher, DnssdServiceInstance], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[DnssdServiceWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_stopped(self, handler: winrt.windows.foundation.TypedEventHandler[DnssdServiceWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_stopped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

