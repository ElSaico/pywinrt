# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation

from . import NotifyCollectionChangedAction, TypeKind
from . import BindableVectorChangedEventHandler, NotifyCollectionChangedEventHandler

Self = typing.TypeVar('Self')

class TypeName:
    name: str
    kind: TypeKind
    def __new__(cls: typing.Type[TypeName], name: str, kind: TypeKind) -> TypeName: ...

class NotifyCollectionChangedEventArgs(winrt.system.Object):
    action: NotifyCollectionChangedAction
    new_items: typing.Optional[IBindableVector]
    new_starting_index: winrt.system.Int32
    old_items: typing.Optional[IBindableVector]
    old_starting_index: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NotifyCollectionChangedEventArgs: ...
    def __new__(cls: typing.Type[NotifyCollectionChangedEventArgs], action: NotifyCollectionChangedAction, new_items: typing.Optional[IBindableVector], old_items: typing.Optional[IBindableVector], new_index: winrt.system.Int32, old_index: winrt.system.Int32) -> NotifyCollectionChangedEventArgs:...

class IBindableIterable(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBindableIterable: ...
    def first(self) -> typing.Optional[IBindableIterator]: ...

class IBindableIterator(winrt.system.Object):
    current: typing.Optional[winrt.system.Object]
    has_current: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBindableIterator: ...
    def move_next(self) -> winrt.system.Boolean: ...

class IBindableObservableVector(winrt.system.Object):
    size: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBindableObservableVector: ...
    def append(self, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[IBindableIterator]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.system.Object]: ...
    def get_view(self) -> typing.Optional[IBindableVectorView]: ...
    def index_of(self, value: typing.Optional[winrt.system.Object], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def add_vector_changed(self, handler: typing.Optional[BindableVectorChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vector_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IBindableVector(winrt.system.Object):
    size: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBindableVector: ...
    def append(self, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[IBindableIterator]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.system.Object]: ...
    def get_view(self) -> typing.Optional[IBindableVectorView]: ...
    def index_of(self, value: typing.Optional[winrt.system.Object], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...

class IBindableVectorView(winrt.system.Object):
    size: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBindableVectorView: ...
    def first(self) -> typing.Optional[IBindableIterator]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.system.Object]: ...
    def index_of(self, value: typing.Optional[winrt.system.Object], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...

class INotifyCollectionChanged(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INotifyCollectionChanged: ...
    def add_collection_changed(self, handler: typing.Optional[NotifyCollectionChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_collection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

