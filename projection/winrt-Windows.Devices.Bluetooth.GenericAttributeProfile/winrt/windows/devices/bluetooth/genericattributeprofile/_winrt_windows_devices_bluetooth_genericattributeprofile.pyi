# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt.system
import winrt.windows.devices.bluetooth
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams

from . import GattCharacteristicProperties, GattClientCharacteristicConfigurationDescriptorValue, GattCommunicationStatus, GattOpenStatus, GattProtectionLevel, GattRequestState, GattServiceProviderAdvertisementStatus, GattSessionStatus, GattSharingMode, GattWriteOption

Self = typing.TypeVar('Self')

class GattCharacteristic(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattCharacteristic: ...
    @staticmethod
    def convert_short_id_to_uuid(short_id: winrt.system.UInt16, /) -> _uuid.UUID: ...
    def get_all_descriptors(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattDescriptor]]: ...
    def get_descriptors(self, descriptor_uuid: _uuid.UUID, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattDescriptor]]: ...
    @typing.overload
    def get_descriptors_async(self) -> winrt.windows.foundation.IAsyncOperation[GattDescriptorsResult]: ...
    @typing.overload
    def get_descriptors_async(self, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattDescriptorsResult]: ...
    @typing.overload
    def get_descriptors_for_uuid_async(self, descriptor_uuid: _uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[GattDescriptorsResult]: ...
    @typing.overload
    def get_descriptors_for_uuid_async(self, descriptor_uuid: _uuid.UUID, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattDescriptorsResult]: ...
    def read_client_characteristic_configuration_descriptor_async(self) -> winrt.windows.foundation.IAsyncOperation[GattReadClientCharacteristicConfigurationDescriptorResult]: ...
    @typing.overload
    def read_value_async(self) -> winrt.windows.foundation.IAsyncOperation[GattReadResult]: ...
    @typing.overload
    def read_value_async(self, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattReadResult]: ...
    def write_client_characteristic_configuration_descriptor_async(self, client_characteristic_configuration_descriptor_value: GattClientCharacteristicConfigurationDescriptorValue, /) -> winrt.windows.foundation.IAsyncOperation[GattCommunicationStatus]: ...
    def write_client_characteristic_configuration_descriptor_with_result_async(self, client_characteristic_configuration_descriptor_value: GattClientCharacteristicConfigurationDescriptorValue, /) -> winrt.windows.foundation.IAsyncOperation[GattWriteResult]: ...
    @typing.overload
    def write_value_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[GattCommunicationStatus]: ...
    @typing.overload
    def write_value_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], write_option: GattWriteOption, /) -> winrt.windows.foundation.IAsyncOperation[GattCommunicationStatus]: ...
    @typing.overload
    def write_value_with_result_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[GattWriteResult]: ...
    @typing.overload
    def write_value_with_result_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], write_option: GattWriteOption, /) -> winrt.windows.foundation.IAsyncOperation[GattWriteResult]: ...
    def add_value_changed(self, value_changed_handler: winrt.windows.foundation.TypedEventHandler[GattCharacteristic, GattValueChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_value_changed(self, value_changed_event_cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def protection_level(self) -> GattProtectionLevel: ...
    @protection_level.setter
    def protection_level(self, value: GattProtectionLevel) -> None: ...
    @_property
    def attribute_handle(self) -> winrt.system.UInt16: ...
    @_property
    def characteristic_properties(self) -> GattCharacteristicProperties: ...
    @_property
    def presentation_formats(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattPresentationFormat]]: ...
    @_property
    def user_description(self) -> str: ...
    @_property
    def uuid(self) -> _uuid.UUID: ...
    @_property
    def service(self) -> typing.Optional[GattDeviceService]: ...

class GattCharacteristicUuids(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattCharacteristicUuids: ...
    heart_rate_measurement: typing.ClassVar[_uuid.UUID]
    battery_level: typing.ClassVar[_uuid.UUID]
    blood_pressure_feature: typing.ClassVar[_uuid.UUID]
    blood_pressure_measurement: typing.ClassVar[_uuid.UUID]
    body_sensor_location: typing.ClassVar[_uuid.UUID]
    csc_feature: typing.ClassVar[_uuid.UUID]
    csc_measurement: typing.ClassVar[_uuid.UUID]
    glucose_feature: typing.ClassVar[_uuid.UUID]
    glucose_measurement: typing.ClassVar[_uuid.UUID]
    glucose_measurement_context: typing.ClassVar[_uuid.UUID]
    heart_rate_control_point: typing.ClassVar[_uuid.UUID]
    intermediate_cuff_pressure: typing.ClassVar[_uuid.UUID]
    intermediate_temperature: typing.ClassVar[_uuid.UUID]
    measurement_interval: typing.ClassVar[_uuid.UUID]
    record_access_control_point: typing.ClassVar[_uuid.UUID]
    rsc_feature: typing.ClassVar[_uuid.UUID]
    rsc_measurement: typing.ClassVar[_uuid.UUID]
    s_c_control_point: typing.ClassVar[_uuid.UUID]
    sensor_location: typing.ClassVar[_uuid.UUID]
    temperature_measurement: typing.ClassVar[_uuid.UUID]
    temperature_type: typing.ClassVar[_uuid.UUID]
    gap_peripheral_preferred_connection_parameters: typing.ClassVar[_uuid.UUID]
    gap_peripheral_privacy_flag: typing.ClassVar[_uuid.UUID]
    gap_reconnection_address: typing.ClassVar[_uuid.UUID]
    gatt_service_changed: typing.ClassVar[_uuid.UUID]
    hardware_revision_string: typing.ClassVar[_uuid.UUID]
    hid_control_point: typing.ClassVar[_uuid.UUID]
    hid_information: typing.ClassVar[_uuid.UUID]
    ieee1107320601_regulatory_certification_data_list: typing.ClassVar[_uuid.UUID]
    ln_control_point: typing.ClassVar[_uuid.UUID]
    ln_feature: typing.ClassVar[_uuid.UUID]
    local_time_information: typing.ClassVar[_uuid.UUID]
    location_and_speed: typing.ClassVar[_uuid.UUID]
    manufacturer_name_string: typing.ClassVar[_uuid.UUID]
    model_number_string: typing.ClassVar[_uuid.UUID]
    navigation: typing.ClassVar[_uuid.UUID]
    new_alert: typing.ClassVar[_uuid.UUID]
    pnp_id: typing.ClassVar[_uuid.UUID]
    position_quality: typing.ClassVar[_uuid.UUID]
    protocol_mode: typing.ClassVar[_uuid.UUID]
    cycling_power_feature: typing.ClassVar[_uuid.UUID]
    report: typing.ClassVar[_uuid.UUID]
    report_map: typing.ClassVar[_uuid.UUID]
    ringer_control_point: typing.ClassVar[_uuid.UUID]
    ringer_setting: typing.ClassVar[_uuid.UUID]
    scan_interval_window: typing.ClassVar[_uuid.UUID]
    scan_refresh: typing.ClassVar[_uuid.UUID]
    serial_number_string: typing.ClassVar[_uuid.UUID]
    software_revision_string: typing.ClassVar[_uuid.UUID]
    support_unread_alert_category: typing.ClassVar[_uuid.UUID]
    supported_new_alert_category: typing.ClassVar[_uuid.UUID]
    system_id: typing.ClassVar[_uuid.UUID]
    time_accuracy: typing.ClassVar[_uuid.UUID]
    time_source: typing.ClassVar[_uuid.UUID]
    time_update_control_point: typing.ClassVar[_uuid.UUID]
    time_update_state: typing.ClassVar[_uuid.UUID]
    time_with_dst: typing.ClassVar[_uuid.UUID]
    time_zone: typing.ClassVar[_uuid.UUID]
    tx_power_level: typing.ClassVar[_uuid.UUID]
    unread_alert_status: typing.ClassVar[_uuid.UUID]
    alert_category_id: typing.ClassVar[_uuid.UUID]
    alert_category_id_bit_mask: typing.ClassVar[_uuid.UUID]
    alert_level: typing.ClassVar[_uuid.UUID]
    alert_notification_control_point: typing.ClassVar[_uuid.UUID]
    alert_status: typing.ClassVar[_uuid.UUID]
    boot_keyboard_input_report: typing.ClassVar[_uuid.UUID]
    boot_keyboard_output_report: typing.ClassVar[_uuid.UUID]
    boot_mouse_input_report: typing.ClassVar[_uuid.UUID]
    current_time: typing.ClassVar[_uuid.UUID]
    cycling_power_control_point: typing.ClassVar[_uuid.UUID]
    reference_time_information: typing.ClassVar[_uuid.UUID]
    cycling_power_measurement: typing.ClassVar[_uuid.UUID]
    cycling_power_vector: typing.ClassVar[_uuid.UUID]
    date_time: typing.ClassVar[_uuid.UUID]
    day_date_time: typing.ClassVar[_uuid.UUID]
    day_of_week: typing.ClassVar[_uuid.UUID]
    dst_offset: typing.ClassVar[_uuid.UUID]
    exact_time256: typing.ClassVar[_uuid.UUID]
    firmware_revision_string: typing.ClassVar[_uuid.UUID]
    gap_appearance: typing.ClassVar[_uuid.UUID]
    gap_device_name: typing.ClassVar[_uuid.UUID]

class GattCharacteristicsResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattCharacteristicsResult: ...
    @_property
    def characteristics(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattCharacteristic]]: ...
    @_property
    def protocol_error(self) -> typing.Optional[typing.Optional[winrt.system.UInt8]]: ...
    @_property
    def status(self) -> GattCommunicationStatus: ...

class GattClientNotificationResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattClientNotificationResult: ...
    @_property
    def protocol_error(self) -> typing.Optional[typing.Optional[winrt.system.UInt8]]: ...
    @_property
    def status(self) -> GattCommunicationStatus: ...
    @_property
    def subscribed_client(self) -> typing.Optional[GattSubscribedClient]: ...
    @_property
    def bytes_sent(self) -> winrt.system.UInt16: ...

class GattDescriptor(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattDescriptor: ...
    @staticmethod
    def convert_short_id_to_uuid(short_id: winrt.system.UInt16, /) -> _uuid.UUID: ...
    @typing.overload
    def read_value_async(self) -> winrt.windows.foundation.IAsyncOperation[GattReadResult]: ...
    @typing.overload
    def read_value_async(self, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattReadResult]: ...
    def write_value_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[GattCommunicationStatus]: ...
    def write_value_with_result_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[GattWriteResult]: ...
    @_property
    def protection_level(self) -> GattProtectionLevel: ...
    @protection_level.setter
    def protection_level(self, value: GattProtectionLevel) -> None: ...
    @_property
    def attribute_handle(self) -> winrt.system.UInt16: ...
    @_property
    def uuid(self) -> _uuid.UUID: ...

class GattDescriptorUuids(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattDescriptorUuids: ...
    characteristic_aggregate_format: typing.ClassVar[_uuid.UUID]
    characteristic_extended_properties: typing.ClassVar[_uuid.UUID]
    characteristic_presentation_format: typing.ClassVar[_uuid.UUID]
    characteristic_user_description: typing.ClassVar[_uuid.UUID]
    client_characteristic_configuration: typing.ClassVar[_uuid.UUID]
    server_characteristic_configuration: typing.ClassVar[_uuid.UUID]

class GattDescriptorsResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattDescriptorsResult: ...
    @_property
    def descriptors(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattDescriptor]]: ...
    @_property
    def protocol_error(self) -> typing.Optional[typing.Optional[winrt.system.UInt8]]: ...
    @_property
    def status(self) -> GattCommunicationStatus: ...

class GattDeviceService(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattDeviceService: ...
    def close(self) -> None: ...
    @staticmethod
    def convert_short_id_to_uuid(short_id: winrt.system.UInt16, /) -> _uuid.UUID: ...
    @typing.overload
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[GattDeviceService]: ...
    @typing.overload
    @staticmethod
    def from_id_async(device_id: str, sharing_mode: GattSharingMode, /) -> winrt.windows.foundation.IAsyncOperation[GattDeviceService]: ...
    def get_all_characteristics(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattCharacteristic]]: ...
    def get_all_included_services(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattDeviceService]]: ...
    def get_characteristics(self, characteristic_uuid: _uuid.UUID, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattCharacteristic]]: ...
    @typing.overload
    def get_characteristics_async(self) -> winrt.windows.foundation.IAsyncOperation[GattCharacteristicsResult]: ...
    @typing.overload
    def get_characteristics_async(self, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattCharacteristicsResult]: ...
    @typing.overload
    def get_characteristics_for_uuid_async(self, characteristic_uuid: _uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[GattCharacteristicsResult]: ...
    @typing.overload
    def get_characteristics_for_uuid_async(self, characteristic_uuid: _uuid.UUID, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattCharacteristicsResult]: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device_id(bluetooth_device_id: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDeviceId], /) -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device_id(bluetooth_device_id: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDeviceId], cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device_id_and_uuid(bluetooth_device_id: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDeviceId], service_uuid: _uuid.UUID, /) -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device_id_and_uuid(bluetooth_device_id: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDeviceId], service_uuid: _uuid.UUID, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> str: ...
    @staticmethod
    def get_device_selector_from_short_id(service_short_id: winrt.system.UInt16, /) -> str: ...
    @staticmethod
    def get_device_selector_from_uuid(service_uuid: _uuid.UUID, /) -> str: ...
    def get_included_services(self, service_uuid: _uuid.UUID, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattDeviceService]]: ...
    @typing.overload
    def get_included_services_async(self) -> winrt.windows.foundation.IAsyncOperation[GattDeviceServicesResult]: ...
    @typing.overload
    def get_included_services_async(self, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattDeviceServicesResult]: ...
    @typing.overload
    def get_included_services_for_uuid_async(self, service_uuid: _uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[GattDeviceServicesResult]: ...
    @typing.overload
    def get_included_services_for_uuid_async(self, service_uuid: _uuid.UUID, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[GattDeviceServicesResult]: ...
    def open_async(self, sharing_mode: GattSharingMode, /) -> winrt.windows.foundation.IAsyncOperation[GattOpenStatus]: ...
    def request_access_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.devices.enumeration.DeviceAccessStatus]: ...
    @_property
    def attribute_handle(self) -> winrt.system.UInt16: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def uuid(self) -> _uuid.UUID: ...
    @_property
    def device(self) -> typing.Optional[winrt.windows.devices.bluetooth.BluetoothLEDevice]: ...
    @_property
    def parent_services(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattDeviceService]]: ...
    @_property
    def device_access_information(self) -> typing.Optional[winrt.windows.devices.enumeration.DeviceAccessInformation]: ...
    @_property
    def session(self) -> typing.Optional[GattSession]: ...
    @_property
    def sharing_mode(self) -> GattSharingMode: ...

class GattDeviceServicesResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattDeviceServicesResult: ...
    @_property
    def protocol_error(self) -> typing.Optional[typing.Optional[winrt.system.UInt8]]: ...
    @_property
    def services(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattDeviceService]]: ...
    @_property
    def status(self) -> GattCommunicationStatus: ...

class GattLocalCharacteristic(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattLocalCharacteristic: ...
    def create_descriptor_async(self, descriptor_uuid: _uuid.UUID, parameters: typing.Optional[GattLocalDescriptorParameters], /) -> winrt.windows.foundation.IAsyncOperation[GattLocalDescriptorResult]: ...
    @typing.overload
    def notify_value_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GattClientNotificationResult]]: ...
    @typing.overload
    def notify_value_async(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], subscribed_client: typing.Optional[GattSubscribedClient], /) -> winrt.windows.foundation.IAsyncOperation[GattClientNotificationResult]: ...
    def add_read_requested(self, handler: winrt.windows.foundation.TypedEventHandler[GattLocalCharacteristic, GattReadRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_read_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_subscribed_clients_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GattLocalCharacteristic, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_subscribed_clients_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_write_requested(self, handler: winrt.windows.foundation.TypedEventHandler[GattLocalCharacteristic, GattWriteRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_write_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def characteristic_properties(self) -> GattCharacteristicProperties: ...
    @_property
    def descriptors(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattLocalDescriptor]]: ...
    @_property
    def presentation_formats(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattPresentationFormat]]: ...
    @_property
    def read_protection_level(self) -> GattProtectionLevel: ...
    @_property
    def static_value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def subscribed_clients(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattSubscribedClient]]: ...
    @_property
    def user_description(self) -> str: ...
    @_property
    def uuid(self) -> _uuid.UUID: ...
    @_property
    def write_protection_level(self) -> GattProtectionLevel: ...

class GattLocalCharacteristicParameters(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattLocalCharacteristicParameters: ...
    def __new__(cls: typing.Type[GattLocalCharacteristicParameters]) -> GattLocalCharacteristicParameters:...
    @_property
    def write_protection_level(self) -> GattProtectionLevel: ...
    @write_protection_level.setter
    def write_protection_level(self, value: GattProtectionLevel) -> None: ...
    @_property
    def user_description(self) -> str: ...
    @user_description.setter
    def user_description(self, value: str) -> None: ...
    @_property
    def static_value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @static_value.setter
    def static_value(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer]) -> None: ...
    @_property
    def read_protection_level(self) -> GattProtectionLevel: ...
    @read_protection_level.setter
    def read_protection_level(self, value: GattProtectionLevel) -> None: ...
    @_property
    def characteristic_properties(self) -> GattCharacteristicProperties: ...
    @characteristic_properties.setter
    def characteristic_properties(self, value: GattCharacteristicProperties) -> None: ...
    @_property
    def presentation_formats(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[GattPresentationFormat]]: ...

class GattLocalCharacteristicResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattLocalCharacteristicResult: ...
    @_property
    def characteristic(self) -> typing.Optional[GattLocalCharacteristic]: ...
    @_property
    def error(self) -> winrt.windows.devices.bluetooth.BluetoothError: ...

class GattLocalDescriptor(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattLocalDescriptor: ...
    def add_read_requested(self, handler: winrt.windows.foundation.TypedEventHandler[GattLocalDescriptor, GattReadRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_read_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_write_requested(self, handler: winrt.windows.foundation.TypedEventHandler[GattLocalDescriptor, GattWriteRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_write_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def read_protection_level(self) -> GattProtectionLevel: ...
    @_property
    def static_value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def uuid(self) -> _uuid.UUID: ...
    @_property
    def write_protection_level(self) -> GattProtectionLevel: ...

class GattLocalDescriptorParameters(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattLocalDescriptorParameters: ...
    def __new__(cls: typing.Type[GattLocalDescriptorParameters]) -> GattLocalDescriptorParameters:...
    @_property
    def write_protection_level(self) -> GattProtectionLevel: ...
    @write_protection_level.setter
    def write_protection_level(self, value: GattProtectionLevel) -> None: ...
    @_property
    def static_value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @static_value.setter
    def static_value(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer]) -> None: ...
    @_property
    def read_protection_level(self) -> GattProtectionLevel: ...
    @read_protection_level.setter
    def read_protection_level(self, value: GattProtectionLevel) -> None: ...

class GattLocalDescriptorResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattLocalDescriptorResult: ...
    @_property
    def descriptor(self) -> typing.Optional[GattLocalDescriptor]: ...
    @_property
    def error(self) -> winrt.windows.devices.bluetooth.BluetoothError: ...

class GattLocalService(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattLocalService: ...
    def create_characteristic_async(self, characteristic_uuid: _uuid.UUID, parameters: typing.Optional[GattLocalCharacteristicParameters], /) -> winrt.windows.foundation.IAsyncOperation[GattLocalCharacteristicResult]: ...
    @_property
    def characteristics(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GattLocalCharacteristic]]: ...
    @_property
    def uuid(self) -> _uuid.UUID: ...

class GattPresentationFormat(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattPresentationFormat: ...
    @staticmethod
    def from_parts(format_type: winrt.system.UInt8, exponent: winrt.system.Int32, unit: winrt.system.UInt16, namespace_id: winrt.system.UInt8, description: winrt.system.UInt16, /) -> typing.Optional[GattPresentationFormat]: ...
    @_property
    def description(self) -> winrt.system.UInt16: ...
    @_property
    def exponent(self) -> winrt.system.Int32: ...
    @_property
    def format_type(self) -> winrt.system.UInt8: ...
    @_property
    def namespace(self) -> winrt.system.UInt8: ...
    @_property
    def unit(self) -> winrt.system.UInt16: ...
    bluetooth_sig_assigned_numbers: typing.ClassVar[winrt.system.UInt8]

class GattPresentationFormatTypes(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattPresentationFormatTypes: ...
    bit2: typing.ClassVar[winrt.system.UInt8]
    boolean: typing.ClassVar[winrt.system.UInt8]
    d_uint16: typing.ClassVar[winrt.system.UInt8]
    float: typing.ClassVar[winrt.system.UInt8]
    float32: typing.ClassVar[winrt.system.UInt8]
    float64: typing.ClassVar[winrt.system.UInt8]
    nibble: typing.ClassVar[winrt.system.UInt8]
    s_float: typing.ClassVar[winrt.system.UInt8]
    s_int12: typing.ClassVar[winrt.system.UInt8]
    s_int128: typing.ClassVar[winrt.system.UInt8]
    s_int16: typing.ClassVar[winrt.system.UInt8]
    s_int24: typing.ClassVar[winrt.system.UInt8]
    s_int32: typing.ClassVar[winrt.system.UInt8]
    s_int48: typing.ClassVar[winrt.system.UInt8]
    s_int64: typing.ClassVar[winrt.system.UInt8]
    s_int8: typing.ClassVar[winrt.system.UInt8]
    struct: typing.ClassVar[winrt.system.UInt8]
    uint12: typing.ClassVar[winrt.system.UInt8]
    uint128: typing.ClassVar[winrt.system.UInt8]
    uint16: typing.ClassVar[winrt.system.UInt8]
    uint24: typing.ClassVar[winrt.system.UInt8]
    uint32: typing.ClassVar[winrt.system.UInt8]
    uint48: typing.ClassVar[winrt.system.UInt8]
    uint64: typing.ClassVar[winrt.system.UInt8]
    uint8: typing.ClassVar[winrt.system.UInt8]
    utf16: typing.ClassVar[winrt.system.UInt8]
    utf8: typing.ClassVar[winrt.system.UInt8]

class GattProtocolError(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattProtocolError: ...
    attribute_not_found: typing.ClassVar[winrt.system.UInt8]
    attribute_not_long: typing.ClassVar[winrt.system.UInt8]
    insufficient_authentication: typing.ClassVar[winrt.system.UInt8]
    insufficient_authorization: typing.ClassVar[winrt.system.UInt8]
    insufficient_encryption: typing.ClassVar[winrt.system.UInt8]
    insufficient_encryption_key_size: typing.ClassVar[winrt.system.UInt8]
    insufficient_resources: typing.ClassVar[winrt.system.UInt8]
    invalid_attribute_value_length: typing.ClassVar[winrt.system.UInt8]
    invalid_handle: typing.ClassVar[winrt.system.UInt8]
    invalid_offset: typing.ClassVar[winrt.system.UInt8]
    invalid_pdu: typing.ClassVar[winrt.system.UInt8]
    prepare_queue_full: typing.ClassVar[winrt.system.UInt8]
    read_not_permitted: typing.ClassVar[winrt.system.UInt8]
    request_not_supported: typing.ClassVar[winrt.system.UInt8]
    unlikely_error: typing.ClassVar[winrt.system.UInt8]
    unsupported_group_type: typing.ClassVar[winrt.system.UInt8]
    write_not_permitted: typing.ClassVar[winrt.system.UInt8]

class GattReadClientCharacteristicConfigurationDescriptorResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattReadClientCharacteristicConfigurationDescriptorResult: ...
    @_property
    def client_characteristic_configuration_descriptor(self) -> GattClientCharacteristicConfigurationDescriptorValue: ...
    @_property
    def status(self) -> GattCommunicationStatus: ...
    @_property
    def protocol_error(self) -> typing.Optional[typing.Optional[winrt.system.UInt8]]: ...

class GattReadRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattReadRequest: ...
    def respond_with_protocol_error(self, protocol_error: winrt.system.UInt8, /) -> None: ...
    def respond_with_value(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...
    def add_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GattReadRequest, GattRequestStateChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def length(self) -> winrt.system.UInt32: ...
    @_property
    def offset(self) -> winrt.system.UInt32: ...
    @_property
    def state(self) -> GattRequestState: ...

class GattReadRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattReadRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def get_request_async(self) -> winrt.windows.foundation.IAsyncOperation[GattReadRequest]: ...
    @_property
    def session(self) -> typing.Optional[GattSession]: ...

class GattReadResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattReadResult: ...
    @_property
    def status(self) -> GattCommunicationStatus: ...
    @_property
    def value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def protocol_error(self) -> typing.Optional[typing.Optional[winrt.system.UInt8]]: ...

class GattReliableWriteTransaction(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattReliableWriteTransaction: ...
    def __new__(cls: typing.Type[GattReliableWriteTransaction]) -> GattReliableWriteTransaction:...
    def commit_async(self) -> winrt.windows.foundation.IAsyncOperation[GattCommunicationStatus]: ...
    def commit_with_result_async(self) -> winrt.windows.foundation.IAsyncOperation[GattWriteResult]: ...
    def write_value(self, characteristic: typing.Optional[GattCharacteristic], value: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...

class GattRequestStateChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattRequestStateChangedEventArgs: ...
    @_property
    def error(self) -> winrt.windows.devices.bluetooth.BluetoothError: ...
    @_property
    def state(self) -> GattRequestState: ...

class GattServiceProvider(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProvider: ...
    @staticmethod
    def create_async(service_uuid: _uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[GattServiceProviderResult]: ...
    @typing.overload
    def start_advertising(self) -> None: ...
    @typing.overload
    def start_advertising(self, parameters: typing.Optional[GattServiceProviderAdvertisingParameters], /) -> None: ...
    def stop_advertising(self) -> None: ...
    def add_advertisement_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GattServiceProvider, GattServiceProviderAdvertisementStatusChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_advertisement_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def advertisement_status(self) -> GattServiceProviderAdvertisementStatus: ...
    @_property
    def service(self) -> typing.Optional[GattLocalService]: ...

class GattServiceProviderAdvertisementStatusChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProviderAdvertisementStatusChangedEventArgs: ...
    @_property
    def error(self) -> winrt.windows.devices.bluetooth.BluetoothError: ...
    @_property
    def status(self) -> GattServiceProviderAdvertisementStatus: ...

class GattServiceProviderAdvertisingParameters(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProviderAdvertisingParameters: ...
    def __new__(cls: typing.Type[GattServiceProviderAdvertisingParameters]) -> GattServiceProviderAdvertisingParameters:...
    @_property
    def is_discoverable(self) -> bool: ...
    @is_discoverable.setter
    def is_discoverable(self, value: bool) -> None: ...
    @_property
    def is_connectable(self) -> bool: ...
    @is_connectable.setter
    def is_connectable(self, value: bool) -> None: ...
    @_property
    def service_data(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @service_data.setter
    def service_data(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer]) -> None: ...

class GattServiceProviderResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProviderResult: ...
    @_property
    def error(self) -> winrt.windows.devices.bluetooth.BluetoothError: ...
    @_property
    def service_provider(self) -> typing.Optional[GattServiceProvider]: ...

class GattServiceUuids(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceUuids: ...
    battery: typing.ClassVar[_uuid.UUID]
    blood_pressure: typing.ClassVar[_uuid.UUID]
    cycling_speed_and_cadence: typing.ClassVar[_uuid.UUID]
    generic_access: typing.ClassVar[_uuid.UUID]
    generic_attribute: typing.ClassVar[_uuid.UUID]
    glucose: typing.ClassVar[_uuid.UUID]
    health_thermometer: typing.ClassVar[_uuid.UUID]
    heart_rate: typing.ClassVar[_uuid.UUID]
    running_speed_and_cadence: typing.ClassVar[_uuid.UUID]
    alert_notification: typing.ClassVar[_uuid.UUID]
    current_time: typing.ClassVar[_uuid.UUID]
    cycling_power: typing.ClassVar[_uuid.UUID]
    device_information: typing.ClassVar[_uuid.UUID]
    human_interface_device: typing.ClassVar[_uuid.UUID]
    immediate_alert: typing.ClassVar[_uuid.UUID]
    link_loss: typing.ClassVar[_uuid.UUID]
    location_and_navigation: typing.ClassVar[_uuid.UUID]
    next_dst_change: typing.ClassVar[_uuid.UUID]
    phone_alert_status: typing.ClassVar[_uuid.UUID]
    reference_time_update: typing.ClassVar[_uuid.UUID]
    scan_parameters: typing.ClassVar[_uuid.UUID]
    tx_power: typing.ClassVar[_uuid.UUID]

class GattSession(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattSession: ...
    def close(self) -> None: ...
    @staticmethod
    def from_device_id_async(device_id: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDeviceId], /) -> winrt.windows.foundation.IAsyncOperation[GattSession]: ...
    def add_max_pdu_size_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GattSession, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_max_pdu_size_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_session_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GattSession, GattSessionStatusChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_session_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def maintain_connection(self) -> bool: ...
    @maintain_connection.setter
    def maintain_connection(self, value: bool) -> None: ...
    @_property
    def can_maintain_connection(self) -> bool: ...
    @_property
    def device_id(self) -> typing.Optional[winrt.windows.devices.bluetooth.BluetoothDeviceId]: ...
    @_property
    def max_pdu_size(self) -> winrt.system.UInt16: ...
    @_property
    def session_status(self) -> GattSessionStatus: ...

class GattSessionStatusChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattSessionStatusChangedEventArgs: ...
    @_property
    def error(self) -> winrt.windows.devices.bluetooth.BluetoothError: ...
    @_property
    def status(self) -> GattSessionStatus: ...

class GattSubscribedClient(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattSubscribedClient: ...
    def add_max_notification_size_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GattSubscribedClient, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_max_notification_size_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def max_notification_size(self) -> winrt.system.UInt16: ...
    @_property
    def session(self) -> typing.Optional[GattSession]: ...

class GattValueChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattValueChangedEventArgs: ...
    @_property
    def characteristic_value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @_property
    def timestamp(self) -> datetime.datetime: ...

class GattWriteRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattWriteRequest: ...
    def respond(self) -> None: ...
    def respond_with_protocol_error(self, protocol_error: winrt.system.UInt8, /) -> None: ...
    def add_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GattWriteRequest, GattRequestStateChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def offset(self) -> winrt.system.UInt32: ...
    @_property
    def option(self) -> GattWriteOption: ...
    @_property
    def state(self) -> GattRequestState: ...
    @_property
    def value(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...

class GattWriteRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattWriteRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def get_request_async(self) -> winrt.windows.foundation.IAsyncOperation[GattWriteRequest]: ...
    @_property
    def session(self) -> typing.Optional[GattSession]: ...

class GattWriteResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattWriteResult: ...
    @_property
    def protocol_error(self) -> typing.Optional[typing.Optional[winrt.system.UInt8]]: ...
    @_property
    def status(self) -> GattCommunicationStatus: ...

