// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.System.RemoteDesktop.Provider.h"


namespace py::cpp::Windows::System::RemoteDesktop::Provider
{
    // ----- RemoteDesktopConnectionInfo class --------------------
    static constexpr const char* const type_name_RemoteDesktopConnectionInfo = "RemoteDesktopConnectionInfo";

    static PyObject* _new_RemoteDesktopConnectionInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_RemoteDesktopConnectionInfo);
        return nullptr;
    }

    static void _dealloc_RemoteDesktopConnectionInfo(py::wrapper::Windows::System::RemoteDesktop::Provider::RemoteDesktopConnectionInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* RemoteDesktopConnectionInfo_GetForLaunchUri(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.RemoteDesktop.Provider.RemoteDesktopConnectionInfo", L"GetForLaunchUri", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::WindowId>(args, 1);

                return py::convert(winrt::Windows::System::RemoteDesktop::Provider::RemoteDesktopConnectionInfo::GetForLaunchUri(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* RemoteDesktopConnectionInfo_SetConnectionStatus(py::wrapper::Windows::System::RemoteDesktop::Provider::RemoteDesktopConnectionInfo* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.System.RemoteDesktop.Provider.RemoteDesktopConnectionInfo", L"SetConnectionStatus", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::RemoteDesktop::Provider::RemoteDesktopConnectionStatus>(args, 0);

                self->obj.SetConnectionStatus(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_RemoteDesktopConnectionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::System::RemoteDesktop::Provider::RemoteDesktopConnectionInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_RemoteDesktopConnectionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::System::RemoteDesktop::Provider::RemoteDesktopConnectionInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_RemoteDesktopConnectionInfo[] = {
        { "get_for_launch_uri", reinterpret_cast<PyCFunction>(RemoteDesktopConnectionInfo_GetForLaunchUri), METH_VARARGS | METH_STATIC, nullptr },
        { "set_connection_status", reinterpret_cast<PyCFunction>(RemoteDesktopConnectionInfo_SetConnectionStatus), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_RemoteDesktopConnectionInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_RemoteDesktopConnectionInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_RemoteDesktopConnectionInfo[] = {
        { }
    };

    static PyType_Slot _type_slots_RemoteDesktopConnectionInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_RemoteDesktopConnectionInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RemoteDesktopConnectionInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RemoteDesktopConnectionInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RemoteDesktopConnectionInfo) },
        { },
    };

    static PyType_Spec type_spec_RemoteDesktopConnectionInfo =
    {
        "_winrt_windows_system_remotedesktop_provider.RemoteDesktopConnectionInfo",
        sizeof(py::wrapper::Windows::System::RemoteDesktop::Provider::RemoteDesktopConnectionInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RemoteDesktopConnectionInfo
    };

    // ----- Windows.System.RemoteDesktop.Provider Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::System::RemoteDesktop::Provider");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_system_remotedesktop_provider",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::System::RemoteDesktop::Provider

PyMODINIT_FUNC PyInit__winrt_windows_system_remotedesktop_provider(void) noexcept
{
    using namespace py::cpp::Windows::System::RemoteDesktop::Provider;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    #if PY_VERSION_HEX < 0x03090000
    if (py::register_python_type(module.get(), type_name_RemoteDesktopConnectionInfo, &type_spec_RemoteDesktopConnectionInfo, nullptr, object_bases.get(), nullptr) == -1)
    #else
    if (py::register_python_type(module.get(), type_name_RemoteDesktopConnectionInfo, &type_spec_RemoteDesktopConnectionInfo, object_bases.get(), nullptr) == -1)
    #endif
    {
        return nullptr;
    }


    return module.detach();
}
