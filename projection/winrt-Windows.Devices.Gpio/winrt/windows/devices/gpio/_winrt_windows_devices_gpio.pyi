# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.devices.gpio.provider
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import GpioChangePolarity, GpioOpenStatus, GpioPinDriveMode, GpioPinEdge, GpioPinValue, GpioSharingMode

Self = typing.TypeVar('Self')

class GpioChangeCount:
    count: winrt.system.UInt64
    relative_time: datetime.timedelta
    def __new__(cls: typing.Type[GpioChangeCount], count: winrt.system.UInt64, relative_time: datetime.timedelta) -> GpioChangeCount: ...

class GpioChangeRecord:
    relative_time: datetime.timedelta
    edge: GpioPinEdge
    def __new__(cls: typing.Type[GpioChangeRecord], relative_time: datetime.timedelta, edge: GpioPinEdge) -> GpioChangeRecord: ...

class GpioChangeCounter(winrt.system.Object):
    polarity: GpioChangePolarity
    is_started: bool
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GpioChangeCounter: ...
    def __new__(cls: typing.Type[GpioChangeCounter], pin: typing.Optional[GpioPin]) -> GpioChangeCounter:...
    def close(self) -> None: ...
    def read(self) -> GpioChangeCount: ...
    def reset(self) -> GpioChangeCount: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class GpioChangeReader(winrt.system.Object):
    polarity: GpioChangePolarity
    capacity: winrt.system.Int32
    is_empty: bool
    is_overflowed: bool
    is_started: bool
    length: winrt.system.Int32
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GpioChangeReader: ...
    @typing.overload
    def __new__(cls: typing.Type[GpioChangeReader], pin: typing.Optional[GpioPin]) -> GpioChangeReader:...
    @typing.overload
    def __new__(cls: typing.Type[GpioChangeReader], pin: typing.Optional[GpioPin], min_capacity: winrt.system.Int32) -> GpioChangeReader:...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def get_all_items(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[GpioChangeRecord]]: ...
    def get_next_item(self) -> GpioChangeRecord: ...
    def peek_next_item(self) -> GpioChangeRecord: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def wait_for_items_async(self, count: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncAction: ...

class GpioController(winrt.system.Object):
    pin_count: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GpioController: ...
    @staticmethod
    def get_controllers_async(provider: typing.Optional[winrt.windows.devices.gpio.provider.IGpioProvider], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GpioController]]: ...
    @staticmethod
    def get_default() -> typing.Optional[GpioController]: ...
    @staticmethod
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[GpioController]: ...
    @typing.overload
    def open_pin(self, pin_number: winrt.system.Int32, /) -> typing.Optional[GpioPin]: ...
    @typing.overload
    def open_pin(self, pin_number: winrt.system.Int32, sharing_mode: GpioSharingMode, /) -> typing.Optional[GpioPin]: ...
    def try_open_pin(self, pin_number: winrt.system.Int32, sharing_mode: GpioSharingMode, /) -> typing.Tuple[bool, typing.Optional[GpioPin], GpioOpenStatus]: ...

class GpioPin(winrt.system.Object):
    debounce_timeout: datetime.timedelta
    pin_number: winrt.system.Int32
    sharing_mode: GpioSharingMode
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GpioPin: ...
    def close(self) -> None: ...
    def get_drive_mode(self) -> GpioPinDriveMode: ...
    def is_drive_mode_supported(self, drive_mode: GpioPinDriveMode, /) -> bool: ...
    def read(self) -> GpioPinValue: ...
    def set_drive_mode(self, value: GpioPinDriveMode, /) -> None: ...
    def write(self, value: GpioPinValue, /) -> None: ...
    def add_value_changed(self, handler: winrt.windows.foundation.TypedEventHandler[GpioPin, GpioPinValueChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_value_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class GpioPinValueChangedEventArgs(winrt.system.Object):
    edge: GpioPinEdge
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GpioPinValueChangedEventArgs: ...

