# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.devices.geolocation
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.ui.popups

from . import ManeuverWarningKind, ManeuverWarningSeverity, MapLocationDesiredAccuracy, MapLocationFinderStatus, MapManeuverNotices, MapRouteFinderStatus, MapRouteManeuverKind, MapRouteOptimization, MapRouteRestrictions, MapServiceDataUsagePreference, TrafficCongestion, WaypointKind

Self = typing.TypeVar('Self')

class EnhancedWaypoint(winrt.system.Object):
    kind: WaypointKind
    point: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EnhancedWaypoint: ...
    def __new__(cls: typing.Type[EnhancedWaypoint], point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], kind: WaypointKind) -> EnhancedWaypoint:...

class ManeuverWarning(winrt.system.Object):
    kind: ManeuverWarningKind
    severity: ManeuverWarningSeverity
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ManeuverWarning: ...

class MapAddress(winrt.system.Object):
    building_floor: str
    building_name: str
    building_room: str
    building_wing: str
    continent: str
    country: str
    country_code: str
    district: str
    neighborhood: str
    post_code: str
    region: str
    region_code: str
    street: str
    street_number: str
    town: str
    formatted_address: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapAddress: ...

class MapLocation(winrt.system.Object):
    address: typing.Optional[MapAddress]
    description: str
    display_name: str
    point: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapLocation: ...

class MapLocationFinder(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapLocationFinder: ...
    @typing.overload
    @staticmethod
    def find_locations_async(search_text: str, reference_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[MapLocationFinderResult]: ...
    @typing.overload
    @staticmethod
    def find_locations_async(search_text: str, reference_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], max_count: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[MapLocationFinderResult]: ...
    @typing.overload
    @staticmethod
    def find_locations_at_async(query_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[MapLocationFinderResult]: ...
    @typing.overload
    @staticmethod
    def find_locations_at_async(query_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], accuracy: MapLocationDesiredAccuracy, /) -> winrt.windows.foundation.IAsyncOperation[MapLocationFinderResult]: ...

class MapLocationFinderResult(winrt.system.Object):
    locations: typing.Optional[winrt.windows.foundation.collections.IVectorView[MapLocation]]
    status: MapLocationFinderStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapLocationFinderResult: ...

class MapManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapManager: ...
    @staticmethod
    def show_downloaded_maps_u_i() -> None: ...
    @staticmethod
    def show_maps_update_u_i() -> None: ...

class MapRoute(winrt.system.Object):
    bounding_box: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox]
    estimated_duration: datetime.timedelta
    is_traffic_based: winrt.system.Boolean
    legs: typing.Optional[winrt.windows.foundation.collections.IVectorView[MapRouteLeg]]
    length_in_meters: winrt.system.Double
    path: typing.Optional[winrt.windows.devices.geolocation.Geopath]
    has_blocked_roads: winrt.system.Boolean
    violated_restrictions: MapRouteRestrictions
    duration_without_traffic: datetime.timedelta
    traffic_congestion: TrafficCongestion
    is_scenic: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRoute: ...

class MapRouteDrivingOptions(winrt.system.Object):
    route_restrictions: MapRouteRestrictions
    route_optimization: MapRouteOptimization
    max_alternate_route_count: winrt.system.UInt32
    initial_heading: typing.Optional[typing.Optional[winrt.system.Double]]
    departure_time: typing.Optional[typing.Optional[datetime.datetime]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRouteDrivingOptions: ...
    def __new__(cls: typing.Type[MapRouteDrivingOptions]) -> MapRouteDrivingOptions:...

class MapRouteFinder(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRouteFinder: ...
    @typing.overload
    @staticmethod
    def get_driving_route_async(start_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], end_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_async(start_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], end_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], options: typing.Optional[MapRouteDrivingOptions], /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_async(start_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], end_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_async(start_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], end_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, heading_in_degrees: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_from_enhanced_waypoints_async(waypoints: typing.Iterable[EnhancedWaypoint], /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_from_enhanced_waypoints_async(waypoints: typing.Iterable[EnhancedWaypoint], options: typing.Optional[MapRouteDrivingOptions], /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_from_waypoints_async(way_points: typing.Iterable[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_from_waypoints_async(way_points: typing.Iterable[winrt.windows.devices.geolocation.Geopoint], optimization: MapRouteOptimization, /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_from_waypoints_async(way_points: typing.Iterable[winrt.windows.devices.geolocation.Geopoint], optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @typing.overload
    @staticmethod
    def get_driving_route_from_waypoints_async(way_points: typing.Iterable[winrt.windows.devices.geolocation.Geopoint], optimization: MapRouteOptimization, restrictions: MapRouteRestrictions, heading_in_degrees: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @staticmethod
    def get_walking_route_async(start_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], end_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...
    @staticmethod
    def get_walking_route_from_waypoints_async(way_points: typing.Iterable[winrt.windows.devices.geolocation.Geopoint], /) -> winrt.windows.foundation.IAsyncOperation[MapRouteFinderResult]: ...

class MapRouteFinderResult(winrt.system.Object):
    route: typing.Optional[MapRoute]
    status: MapRouteFinderStatus
    alternate_routes: typing.Optional[winrt.windows.foundation.collections.IVectorView[MapRoute]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRouteFinderResult: ...

class MapRouteLeg(winrt.system.Object):
    bounding_box: typing.Optional[winrt.windows.devices.geolocation.GeoboundingBox]
    estimated_duration: datetime.timedelta
    length_in_meters: winrt.system.Double
    maneuvers: typing.Optional[winrt.windows.foundation.collections.IVectorView[MapRouteManeuver]]
    path: typing.Optional[winrt.windows.devices.geolocation.Geopath]
    duration_without_traffic: datetime.timedelta
    traffic_congestion: TrafficCongestion
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRouteLeg: ...

class MapRouteManeuver(winrt.system.Object):
    exit_number: str
    instruction_text: str
    kind: MapRouteManeuverKind
    length_in_meters: winrt.system.Double
    maneuver_notices: MapManeuverNotices
    starting_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint]
    end_heading: winrt.system.Double
    start_heading: winrt.system.Double
    street_name: str
    warnings: typing.Optional[winrt.windows.foundation.collections.IVectorView[ManeuverWarning]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRouteManeuver: ...

class MapService(winrt.system.Object):
    service_token: typing.ClassVar[str]
    world_view_region_code: typing.ClassVar[str]
    data_attributions: typing.ClassVar[str]
    data_usage_preference: typing.ClassVar[MapServiceDataUsagePreference]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapService: ...

class PlaceInfo(winrt.system.Object):
    display_address: str
    display_name: str
    geoshape: typing.Optional[winrt.windows.devices.geolocation.IGeoshape]
    identifier: str
    is_show_supported: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlaceInfo: ...
    @typing.overload
    @staticmethod
    def create(reference_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], /) -> typing.Optional[PlaceInfo]: ...
    @typing.overload
    @staticmethod
    def create(reference_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], options: typing.Optional[PlaceInfoCreateOptions], /) -> typing.Optional[PlaceInfo]: ...
    @typing.overload
    @staticmethod
    def create_from_address(display_address: str, /) -> typing.Optional[PlaceInfo]: ...
    @typing.overload
    @staticmethod
    def create_from_address(display_address: str, display_name: str, /) -> typing.Optional[PlaceInfo]: ...
    @typing.overload
    @staticmethod
    def create_from_identifier(identifier: str, /) -> typing.Optional[PlaceInfo]: ...
    @typing.overload
    @staticmethod
    def create_from_identifier(identifier: str, default_point: typing.Optional[winrt.windows.devices.geolocation.Geopoint], options: typing.Optional[PlaceInfoCreateOptions], /) -> typing.Optional[PlaceInfo]: ...
    @staticmethod
    def create_from_map_location(location: typing.Optional[MapLocation], /) -> typing.Optional[PlaceInfo]: ...
    @typing.overload
    def show(self, selection: winrt.windows.foundation.Rect, /) -> None: ...
    @typing.overload
    def show(self, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> None: ...

class PlaceInfoCreateOptions(winrt.system.Object):
    display_name: str
    display_address: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlaceInfoCreateOptions: ...
    def __new__(cls: typing.Type[PlaceInfoCreateOptions]) -> PlaceInfoCreateOptions:...

