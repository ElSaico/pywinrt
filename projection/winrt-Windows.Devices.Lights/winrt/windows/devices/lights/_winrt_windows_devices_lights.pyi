# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.numerics
import winrt.windows.storage.streams
import winrt.windows.system
import winrt.windows.ui

class LampArrayKind(enum.IntEnum):
    UNDEFINED = 0
    KEYBOARD = 1
    MOUSE = 2
    GAME_CONTROLLER = 3
    PERIPHERAL = 4
    SCENE = 5
    NOTIFICATION = 6
    CHASSIS = 7
    WEARABLE = 8
    FURNITURE = 9
    ART = 10

class LampPurposes(enum.IntFlag):
    UNDEFINED = 0
    CONTROL = 0x1
    ACCENT = 0x2
    BRANDING = 0x4
    STATUS = 0x8
    ILLUMINATION = 0x10
    PRESENTATION = 0x20

Self = typing.TypeVar('Self')

class Lamp(winrt.system.Object):
    is_enabled: winrt.system.Boolean
    color: winrt.windows.ui.Color
    brightness_level: winrt.system.Single
    device_id: str
    is_color_settable: winrt.system.Boolean
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Lamp: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Lamp]: ...
    @staticmethod
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[Lamp]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def add_availability_changed(self, handler: winrt.windows.foundation.TypedEventHandler[Lamp, LampAvailabilityChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_availability_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class LampArray(winrt.system.Object):
    is_enabled: winrt.system.Boolean
    brightness_level: winrt.system.Double
    bounding_box: winrt.windows.foundation.numerics.Vector3
    device_id: str
    hardware_product_id: winrt.system.UInt16
    hardware_vendor_id: winrt.system.UInt16
    hardware_version: winrt.system.UInt16
    is_connected: winrt.system.Boolean
    lamp_array_kind: LampArrayKind
    lamp_count: winrt.system.Int32
    min_update_interval: datetime.timedelta
    supports_virtual_keys: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampArray: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[LampArray]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def get_indices_for_key(self, key: winrt.windows.system.VirtualKey, /) -> winrt.system.Int32: ...
    def get_indices_for_purposes(self, purposes: LampPurposes, /) -> winrt.system.Int32: ...
    def get_lamp_info(self, lamp_index: winrt.system.Int32, /) -> typing.Optional[LampInfo]: ...
    def request_message_async(self, message_id: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]: ...
    def send_message_async(self, message_id: winrt.system.Int32, message: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncAction: ...
    def set_color(self, desired_color: winrt.windows.ui.Color, /) -> None: ...
    def set_color_for_index(self, lamp_index: winrt.system.Int32, desired_color: winrt.windows.ui.Color, /) -> None: ...
    def set_colors_for_indices(self, desired_colors: winrt.system.Array[winrt.windows.ui.Color], lamp_indexes: winrt.system.Array[winrt.system.Int32], /) -> None: ...
    def set_colors_for_key(self, desired_color: winrt.windows.ui.Color, key: winrt.windows.system.VirtualKey, /) -> None: ...
    def set_colors_for_keys(self, desired_colors: winrt.system.Array[winrt.windows.ui.Color], keys: winrt.system.Array[winrt.windows.system.VirtualKey], /) -> None: ...
    def set_colors_for_purposes(self, desired_color: winrt.windows.ui.Color, purposes: LampPurposes, /) -> None: ...
    def set_single_color_for_indices(self, desired_color: winrt.windows.ui.Color, lamp_indexes: winrt.system.Array[winrt.system.Int32], /) -> None: ...

class LampAvailabilityChangedEventArgs(winrt.system.Object):
    is_available: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampAvailabilityChangedEventArgs: ...

class LampInfo(winrt.system.Object):
    blue_level_count: winrt.system.Int32
    fixed_color: typing.Optional[typing.Optional[winrt.windows.ui.Color]]
    gain_level_count: winrt.system.Int32
    green_level_count: winrt.system.Int32
    index: winrt.system.Int32
    position: winrt.windows.foundation.numerics.Vector3
    purposes: LampPurposes
    red_level_count: winrt.system.Int32
    update_latency: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LampInfo: ...
    def get_nearest_supported_color(self, desired_color: winrt.windows.ui.Color, /) -> winrt.windows.ui.Color: ...

