# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.ui.popups

from . import CastingConnectionErrorStatus, CastingConnectionState, CastingPlaybackTypes

Self = typing.TypeVar('Self')

class CastingConnection(winrt.system.Object):
    source: typing.Optional[CastingSource]
    device: typing.Optional[CastingDevice]
    state: CastingConnectionState
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CastingConnection: ...
    def close(self) -> None: ...
    def disconnect_async(self) -> winrt.windows.foundation.IAsyncOperation[CastingConnectionErrorStatus]: ...
    def request_start_casting_async(self, value: typing.Optional[CastingSource], /) -> winrt.windows.foundation.IAsyncOperation[CastingConnectionErrorStatus]: ...
    def add_error_occurred(self, handler: winrt.windows.foundation.TypedEventHandler[CastingConnection, CastingConnectionErrorOccurredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_error_occurred(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CastingConnection, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CastingConnectionErrorOccurredEventArgs(winrt.system.Object):
    error_status: CastingConnectionErrorStatus
    message: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CastingConnectionErrorOccurredEventArgs: ...

class CastingDevice(winrt.system.Object):
    friendly_name: str
    icon: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]
    id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CastingDevice: ...
    def create_casting_connection(self) -> typing.Optional[CastingConnection]: ...
    @staticmethod
    def device_info_supports_casting_async(device: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @staticmethod
    def from_id_async(value: str, /) -> winrt.windows.foundation.IAsyncOperation[CastingDevice]: ...
    @staticmethod
    def get_device_selector(type: CastingPlaybackTypes, /) -> str: ...
    @staticmethod
    def get_device_selector_from_casting_source_async(casting_source: typing.Optional[CastingSource], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_supported_casting_playback_types_async(self) -> winrt.windows.foundation.IAsyncOperation[CastingPlaybackTypes]: ...

class CastingDevicePicker(winrt.system.Object):
    appearance: typing.Optional[winrt.windows.devices.enumeration.DevicePickerAppearance]
    filter: typing.Optional[CastingDevicePickerFilter]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CastingDevicePicker: ...
    def __new__(cls: typing.Type[CastingDevicePicker]) -> CastingDevicePicker:...
    def hide(self) -> None: ...
    @typing.overload
    def show(self, selection: winrt.windows.foundation.Rect, /) -> None: ...
    @typing.overload
    def show(self, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> None: ...
    def add_casting_device_picker_dismissed(self, handler: winrt.windows.foundation.TypedEventHandler[CastingDevicePicker, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_casting_device_picker_dismissed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_casting_device_selected(self, handler: winrt.windows.foundation.TypedEventHandler[CastingDevicePicker, CastingDeviceSelectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_casting_device_selected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CastingDevicePickerFilter(winrt.system.Object):
    supports_video: winrt.system.Boolean
    supports_pictures: winrt.system.Boolean
    supports_audio: winrt.system.Boolean
    supported_casting_sources: typing.Optional[winrt.windows.foundation.collections.IVector[CastingSource]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CastingDevicePickerFilter: ...

class CastingDeviceSelectedEventArgs(winrt.system.Object):
    selected_casting_device: typing.Optional[CastingDevice]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CastingDeviceSelectedEventArgs: ...

class CastingSource(winrt.system.Object):
    preferred_source_uri: typing.Optional[winrt.windows.foundation.Uri]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CastingSource: ...

