# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.globalization
import winrt.windows.networking
import winrt.windows.storage.streams
import winrt.windows.web.http

Self = typing.TypeVar('Self')

class HttpCacheDirectiveHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpNameValueHeaderValue]):
    size: winrt.system.UInt32
    shared_max_age: typing.Optional[typing.Optional[datetime.timedelta]]
    min_fresh: typing.Optional[typing.Optional[datetime.timedelta]]
    max_stale: typing.Optional[typing.Optional[datetime.timedelta]]
    max_age: typing.Optional[typing.Optional[datetime.timedelta]]
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpNameValueHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpNameValueHeaderValue]: ...
    def insert(self, index: int, value: HttpNameValueHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpNameValueHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpNameValueHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCacheDirectiveHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpNameValueHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpNameValueHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpNameValueHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpNameValueHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpNameValueHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpNameValueHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpNameValueHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpNameValueHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpNameValueHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpChallengeHeaderValue(winrt.system.Object):
    parameters: typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    scheme: str
    token: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpChallengeHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpChallengeHeaderValue], scheme: str) -> HttpChallengeHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpChallengeHeaderValue], scheme: str, token: str) -> HttpChallengeHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpChallengeHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpChallengeHeaderValue]]: ...

class HttpChallengeHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpChallengeHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpChallengeHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpChallengeHeaderValue]: ...
    def insert(self, index: int, value: HttpChallengeHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpChallengeHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpChallengeHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpChallengeHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpChallengeHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpChallengeHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpChallengeHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpChallengeHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpChallengeHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpChallengeHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpChallengeHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpChallengeHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpChallengeHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpConnectionOptionHeaderValue(winrt.system.Object):
    token: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpConnectionOptionHeaderValue: ...
    def __new__(cls: typing.Type[HttpConnectionOptionHeaderValue], token: str) -> HttpConnectionOptionHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpConnectionOptionHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpConnectionOptionHeaderValue]]: ...

class HttpConnectionOptionHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpConnectionOptionHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpConnectionOptionHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpConnectionOptionHeaderValue]: ...
    def insert(self, index: int, value: HttpConnectionOptionHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpConnectionOptionHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpConnectionOptionHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpConnectionOptionHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpConnectionOptionHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpConnectionOptionHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpConnectionOptionHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpConnectionOptionHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpConnectionOptionHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpContentCodingHeaderValue(winrt.system.Object):
    content_coding: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingHeaderValue: ...
    def __new__(cls: typing.Type[HttpContentCodingHeaderValue], content_coding: str) -> HttpContentCodingHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpContentCodingHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpContentCodingHeaderValue]]: ...

class HttpContentCodingHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpContentCodingHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpContentCodingHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpContentCodingHeaderValue]: ...
    def insert(self, index: int, value: HttpContentCodingHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpContentCodingHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpContentCodingHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpContentCodingHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpContentCodingHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpContentCodingHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpContentCodingHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpContentCodingHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpContentCodingHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpContentCodingHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpContentCodingWithQualityHeaderValue(winrt.system.Object):
    content_coding: str
    quality: typing.Optional[typing.Optional[winrt.system.Double]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentCodingWithQualityHeaderValue], content_coding: str) -> HttpContentCodingWithQualityHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentCodingWithQualityHeaderValue], content_coding: str, quality: winrt.system.Double) -> HttpContentCodingWithQualityHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpContentCodingWithQualityHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpContentCodingWithQualityHeaderValue]]: ...

class HttpContentCodingWithQualityHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpContentCodingWithQualityHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpContentCodingWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpContentCodingWithQualityHeaderValue]: ...
    def insert(self, index: int, value: HttpContentCodingWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpContentCodingWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpContentCodingWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpContentCodingWithQualityHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpContentCodingWithQualityHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpContentCodingWithQualityHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpContentCodingWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpContentDispositionHeaderValue(winrt.system.Object):
    size: typing.Optional[typing.Optional[winrt.system.UInt64]]
    name: str
    file_name_star: str
    file_name: str
    disposition_type: str
    parameters: typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentDispositionHeaderValue: ...
    def __new__(cls: typing.Type[HttpContentDispositionHeaderValue], disposition_type: str) -> HttpContentDispositionHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpContentDispositionHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpContentDispositionHeaderValue]]: ...

class HttpContentHeaderCollection(winrt.system.Object, typing.MutableMapping[str, str]):
    size: winrt.system.UInt32
    last_modified: typing.Optional[typing.Optional[datetime.datetime]]
    expires: typing.Optional[typing.Optional[datetime.datetime]]
    content_type: typing.Optional[HttpMediaTypeHeaderValue]
    content_range: typing.Optional[HttpContentRangeHeaderValue]
    content_m_d5: typing.Optional[winrt.windows.storage.streams.IBuffer]
    content_location: typing.Optional[winrt.windows.foundation.Uri]
    content_length: typing.Optional[typing.Optional[winrt.system.UInt64]]
    content_disposition: typing.Optional[HttpContentDispositionHeaderValue]
    content_encoding: typing.Optional[HttpContentCodingHeaderValueCollection]
    content_language: typing.Optional[HttpLanguageHeaderValueCollection]
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentHeaderCollection: ...
    def __new__(cls: typing.Type[HttpContentHeaderCollection]) -> HttpContentHeaderCollection:...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> winrt.system.Boolean: ...
    def insert(self, key: str, value: str, /) -> winrt.system.Boolean: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> winrt.system.Boolean: ...

class HttpContentRangeHeaderValue(winrt.system.Object):
    unit: str
    first_byte_position: typing.Optional[typing.Optional[winrt.system.UInt64]]
    last_byte_position: typing.Optional[typing.Optional[winrt.system.UInt64]]
    length: typing.Optional[typing.Optional[winrt.system.UInt64]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentRangeHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentRangeHeaderValue], length: winrt.system.UInt64) -> HttpContentRangeHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentRangeHeaderValue], from_: winrt.system.UInt64, to: winrt.system.UInt64) -> HttpContentRangeHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentRangeHeaderValue], from_: winrt.system.UInt64, to: winrt.system.UInt64, length: winrt.system.UInt64) -> HttpContentRangeHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpContentRangeHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpContentRangeHeaderValue]]: ...

class HttpCookiePairHeaderValue(winrt.system.Object):
    value: str
    name: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookiePairHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpCookiePairHeaderValue], name: str) -> HttpCookiePairHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpCookiePairHeaderValue], name: str, value: str) -> HttpCookiePairHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpCookiePairHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpCookiePairHeaderValue]]: ...

class HttpCookiePairHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpCookiePairHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpCookiePairHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpCookiePairHeaderValue]: ...
    def insert(self, index: int, value: HttpCookiePairHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpCookiePairHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpCookiePairHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookiePairHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpCookiePairHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpCookiePairHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpCookiePairHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpCookiePairHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpCookiePairHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpCookiePairHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpCookiePairHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpCookiePairHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpCookiePairHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpCredentialsHeaderValue(winrt.system.Object):
    parameters: typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    scheme: str
    token: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCredentialsHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpCredentialsHeaderValue], scheme: str) -> HttpCredentialsHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpCredentialsHeaderValue], scheme: str, token: str) -> HttpCredentialsHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpCredentialsHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpCredentialsHeaderValue]]: ...

class HttpDateOrDeltaHeaderValue(winrt.system.Object):
    date: typing.Optional[typing.Optional[datetime.datetime]]
    delta: typing.Optional[typing.Optional[datetime.timedelta]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpDateOrDeltaHeaderValue: ...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpDateOrDeltaHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpDateOrDeltaHeaderValue]]: ...

class HttpExpectationHeaderValue(winrt.system.Object):
    value: str
    name: str
    parameters: typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpExpectationHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpExpectationHeaderValue], name: str) -> HttpExpectationHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpExpectationHeaderValue], name: str, value: str) -> HttpExpectationHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpExpectationHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpExpectationHeaderValue]]: ...

class HttpExpectationHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpExpectationHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpExpectationHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpExpectationHeaderValue]: ...
    def insert(self, index: int, value: HttpExpectationHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpExpectationHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpExpectationHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpExpectationHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpExpectationHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpExpectationHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpExpectationHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpExpectationHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpExpectationHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpExpectationHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpExpectationHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpExpectationHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpExpectationHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpLanguageHeaderValueCollection(winrt.system.Object, typing.MutableSequence[winrt.windows.globalization.Language]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> winrt.windows.globalization.Language: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.windows.globalization.Language]: ...
    def insert(self, index: int, value: winrt.windows.globalization.Language) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: winrt.windows.globalization.Language) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.windows.globalization.Language]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageHeaderValueCollection: ...
    def append(self, value: typing.Optional[winrt.windows.globalization.Language], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.globalization.Language]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.globalization.Language]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[winrt.windows.globalization.Language], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.globalization.Language]]: ...
    def index_of(self, value: typing.Optional[winrt.windows.globalization.Language], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.globalization.Language], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[winrt.windows.globalization.Language], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.globalization.Language], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpLanguageRangeWithQualityHeaderValue(winrt.system.Object):
    language_range: str
    quality: typing.Optional[typing.Optional[winrt.system.Double]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageRangeWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpLanguageRangeWithQualityHeaderValue], language_range: str) -> HttpLanguageRangeWithQualityHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpLanguageRangeWithQualityHeaderValue], language_range: str, quality: winrt.system.Double) -> HttpLanguageRangeWithQualityHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpLanguageRangeWithQualityHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpLanguageRangeWithQualityHeaderValue]]: ...

class HttpLanguageRangeWithQualityHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpLanguageRangeWithQualityHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpLanguageRangeWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue]: ...
    def insert(self, index: int, value: HttpLanguageRangeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpLanguageRangeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpLanguageRangeWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageRangeWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpLanguageRangeWithQualityHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpLanguageRangeWithQualityHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpLanguageRangeWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpMediaTypeHeaderValue(winrt.system.Object):
    media_type: str
    char_set: str
    parameters: typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeHeaderValue: ...
    def __new__(cls: typing.Type[HttpMediaTypeHeaderValue], media_type: str) -> HttpMediaTypeHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpMediaTypeHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpMediaTypeHeaderValue]]: ...

class HttpMediaTypeWithQualityHeaderValue(winrt.system.Object):
    quality: typing.Optional[typing.Optional[winrt.system.Double]]
    media_type: str
    char_set: str
    parameters: typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpMediaTypeWithQualityHeaderValue], media_type: str) -> HttpMediaTypeWithQualityHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpMediaTypeWithQualityHeaderValue], media_type: str, quality: winrt.system.Double) -> HttpMediaTypeWithQualityHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpMediaTypeWithQualityHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpMediaTypeWithQualityHeaderValue]]: ...

class HttpMediaTypeWithQualityHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpMediaTypeWithQualityHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpMediaTypeWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpMediaTypeWithQualityHeaderValue]: ...
    def insert(self, index: int, value: HttpMediaTypeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpMediaTypeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpMediaTypeWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpMediaTypeWithQualityHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpMediaTypeWithQualityHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpMediaTypeWithQualityHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpMediaTypeWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpMethodHeaderValueCollection(winrt.system.Object, typing.MutableSequence[winrt.windows.web.http.HttpMethod]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> winrt.windows.web.http.HttpMethod: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.windows.web.http.HttpMethod]: ...
    def insert(self, index: int, value: winrt.windows.web.http.HttpMethod) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: winrt.windows.web.http.HttpMethod) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.windows.web.http.HttpMethod]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMethodHeaderValueCollection: ...
    def append(self, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.web.http.HttpMethod]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.web.http.HttpMethod]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[winrt.windows.web.http.HttpMethod], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.web.http.HttpMethod]]: ...
    def index_of(self, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpNameValueHeaderValue(winrt.system.Object):
    value: str
    name: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpNameValueHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpNameValueHeaderValue], name: str) -> HttpNameValueHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpNameValueHeaderValue], name: str, value: str) -> HttpNameValueHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpNameValueHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpNameValueHeaderValue]]: ...

class HttpProductHeaderValue(winrt.system.Object):
    name: str
    version: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductHeaderValue], product_name: str) -> HttpProductHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductHeaderValue], product_name: str, product_version: str) -> HttpProductHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpProductHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpProductHeaderValue]]: ...

class HttpProductInfoHeaderValue(winrt.system.Object):
    comment: str
    product: typing.Optional[HttpProductHeaderValue]
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductInfoHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductInfoHeaderValue], product_comment: str) -> HttpProductInfoHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductInfoHeaderValue], product_name: str, product_version: str) -> HttpProductInfoHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpProductInfoHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpProductInfoHeaderValue]]: ...

class HttpProductInfoHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpProductInfoHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpProductInfoHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpProductInfoHeaderValue]: ...
    def insert(self, index: int, value: HttpProductInfoHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpProductInfoHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpProductInfoHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductInfoHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpProductInfoHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpProductInfoHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpProductInfoHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpProductInfoHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpProductInfoHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpProductInfoHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpProductInfoHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpProductInfoHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpProductInfoHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

class HttpRequestHeaderCollection(winrt.system.Object, typing.MutableMapping[str, str]):
    size: winrt.system.UInt32
    referer: typing.Optional[winrt.windows.foundation.Uri]
    proxy_authorization: typing.Optional[HttpCredentialsHeaderValue]
    max_forwards: typing.Optional[typing.Optional[winrt.system.UInt32]]
    if_unmodified_since: typing.Optional[typing.Optional[datetime.datetime]]
    if_modified_since: typing.Optional[typing.Optional[datetime.datetime]]
    host: typing.Optional[winrt.windows.networking.HostName]
    from_: str
    date: typing.Optional[typing.Optional[datetime.datetime]]
    authorization: typing.Optional[HttpCredentialsHeaderValue]
    accept: typing.Optional[HttpMediaTypeWithQualityHeaderValueCollection]
    accept_encoding: typing.Optional[HttpContentCodingWithQualityHeaderValueCollection]
    accept_language: typing.Optional[HttpLanguageRangeWithQualityHeaderValueCollection]
    cache_control: typing.Optional[HttpCacheDirectiveHeaderValueCollection]
    connection: typing.Optional[HttpConnectionOptionHeaderValueCollection]
    cookie: typing.Optional[HttpCookiePairHeaderValueCollection]
    expect: typing.Optional[HttpExpectationHeaderValueCollection]
    transfer_encoding: typing.Optional[HttpTransferCodingHeaderValueCollection]
    user_agent: typing.Optional[HttpProductInfoHeaderValueCollection]
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpRequestHeaderCollection: ...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> winrt.system.Boolean: ...
    def insert(self, key: str, value: str, /) -> winrt.system.Boolean: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> winrt.system.Boolean: ...

class HttpResponseHeaderCollection(winrt.system.Object, typing.MutableMapping[str, str]):
    size: winrt.system.UInt32
    retry_after: typing.Optional[HttpDateOrDeltaHeaderValue]
    location: typing.Optional[winrt.windows.foundation.Uri]
    date: typing.Optional[typing.Optional[datetime.datetime]]
    age: typing.Optional[typing.Optional[datetime.timedelta]]
    allow: typing.Optional[HttpMethodHeaderValueCollection]
    cache_control: typing.Optional[HttpCacheDirectiveHeaderValueCollection]
    connection: typing.Optional[HttpConnectionOptionHeaderValueCollection]
    proxy_authenticate: typing.Optional[HttpChallengeHeaderValueCollection]
    transfer_encoding: typing.Optional[HttpTransferCodingHeaderValueCollection]
    www_authenticate: typing.Optional[HttpChallengeHeaderValueCollection]
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpResponseHeaderCollection: ...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> winrt.system.Boolean: ...
    def insert(self, key: str, value: str, /) -> winrt.system.Boolean: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> winrt.system.Boolean: ...

class HttpTransferCodingHeaderValue(winrt.system.Object):
    parameters: typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    value: str
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpTransferCodingHeaderValue: ...
    def __new__(cls: typing.Type[HttpTransferCodingHeaderValue], input: str) -> HttpTransferCodingHeaderValue:...
    @staticmethod
    def parse(input: str, /) -> typing.Optional[HttpTransferCodingHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str, /) -> typing.Tuple[winrt.system.Boolean, typing.Optional[HttpTransferCodingHeaderValue]]: ...

class HttpTransferCodingHeaderValueCollection(winrt.system.Object, typing.MutableSequence[HttpTransferCodingHeaderValue]):
    size: winrt.system.UInt32
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> HttpTransferCodingHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpTransferCodingHeaderValue]: ...
    def insert(self, index: int, value: HttpTransferCodingHeaderValue) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: HttpTransferCodingHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpTransferCodingHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpTransferCodingHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpTransferCodingHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpTransferCodingHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpTransferCodingHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpTransferCodingHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpTransferCodingHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> winrt.system.Boolean: ...

