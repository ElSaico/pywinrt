# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system
import winrt.windows.ui.notifications

from . import PushNotificationType

Self = typing.TypeVar('Self')

class PushNotificationChannel(winrt.system.Object):
    expiration_time: datetime.datetime
    uri: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationChannel: ...
    def close(self) -> None: ...
    def add_push_notification_received(self, handler: winrt.windows.foundation.TypedEventHandler[PushNotificationChannel, PushNotificationReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_push_notification_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PushNotificationChannelManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationChannelManager: ...
    @typing.overload
    @staticmethod
    def create_push_notification_channel_for_application_async() -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...
    @typing.overload
    @staticmethod
    def create_push_notification_channel_for_application_async(application_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...
    @staticmethod
    def create_push_notification_channel_for_secondary_tile_async(tile_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...
    @staticmethod
    def get_default() -> typing.Optional[PushNotificationChannelManagerForUser]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[PushNotificationChannelManagerForUser]: ...
    @staticmethod
    def add_channels_revoked(handler: winrt.windows.foundation.EventHandler[PushNotificationChannelsRevokedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_channels_revoked(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PushNotificationChannelManagerForUser(winrt.system.Object):
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationChannelManagerForUser: ...
    @typing.overload
    def create_push_notification_channel_for_application_async(self) -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...
    @typing.overload
    def create_push_notification_channel_for_application_async(self, application_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...
    def create_push_notification_channel_for_secondary_tile_async(self, tile_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...
    @typing.overload
    def create_raw_push_notification_channel_with_alternate_key_for_application_async(self, app_server_key: typing.Optional[winrt.windows.storage.streams.IBuffer], channel_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...
    @typing.overload
    def create_raw_push_notification_channel_with_alternate_key_for_application_async(self, app_server_key: typing.Optional[winrt.windows.storage.streams.IBuffer], channel_id: str, app_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PushNotificationChannel]: ...

class PushNotificationChannelsRevokedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationChannelsRevokedEventArgs: ...

class PushNotificationReceivedEventArgs(winrt.system.Object):
    cancel: bool
    badge_notification: typing.Optional[winrt.windows.ui.notifications.BadgeNotification]
    notification_type: PushNotificationType
    raw_notification: typing.Optional[RawNotification]
    tile_notification: typing.Optional[winrt.windows.ui.notifications.TileNotification]
    toast_notification: typing.Optional[winrt.windows.ui.notifications.ToastNotification]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationReceivedEventArgs: ...

class RawNotification(winrt.system.Object):
    content: str
    channel_id: str
    headers: typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]
    content_bytes: typing.Optional[winrt.windows.storage.streams.IBuffer]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RawNotification: ...

