# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.cryptography.core
import winrt.windows.storage.streams

from . import SmartCardActivationPolicyChangeResult, SmartCardAppletIdGroupActivationPolicy, SmartCardAutomaticResponseStatus, SmartCardCryptogramAlgorithm, SmartCardCryptogramGeneratorOperationStatus, SmartCardCryptogramMaterialPackageConfirmationResponseFormat, SmartCardCryptogramMaterialPackageFormat, SmartCardCryptogramMaterialProtectionMethod, SmartCardCryptogramMaterialType, SmartCardCryptogramPlacementOptions, SmartCardCryptogramStorageKeyAlgorithm, SmartCardCryptogramStorageKeyCapabilities, SmartCardCryptographicKeyAttestationStatus, SmartCardEmulationCategory, SmartCardEmulationType, SmartCardEmulatorConnectionDeactivatedReason, SmartCardEmulatorConnectionSource, SmartCardEmulatorEnablementPolicy, SmartCardLaunchBehavior, SmartCardPinCharacterPolicyOption, SmartCardReaderKind, SmartCardReaderStatus, SmartCardStatus, SmartCardTriggerType, SmartCardUnlockPromptingBehavior
from . import SmartCardPinResetHandler

Self = typing.TypeVar('Self')

class CardAddedEventArgs(winrt.system.Object):
    smart_card: typing.Optional[SmartCard]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CardAddedEventArgs: ...

class CardRemovedEventArgs(winrt.system.Object):
    smart_card: typing.Optional[SmartCard]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CardRemovedEventArgs: ...

class KnownSmartCardAppletIds(winrt.system.Object):
    payment_system_environment: typing.ClassVar[typing.Optional[winrt.windows.storage.streams.IBuffer]]
    proximity_payment_system_environment: typing.ClassVar[typing.Optional[winrt.windows.storage.streams.IBuffer]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KnownSmartCardAppletIds: ...

class SmartCard(winrt.system.Object):
    reader: typing.Optional[SmartCardReader]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCard: ...
    def connect_async(self) -> winrt.windows.foundation.IAsyncOperation[SmartCardConnection]: ...
    def get_answer_to_reset_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]: ...
    def get_status_async(self) -> winrt.windows.foundation.IAsyncOperation[SmartCardStatus]: ...

class SmartCardAppletIdGroup(winrt.system.Object):
    smart_card_emulation_type: SmartCardEmulationType
    smart_card_emulation_category: SmartCardEmulationCategory
    display_name: str
    automatic_enablement: winrt.system.Boolean
    applet_ids: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.storage.streams.IBuffer]]
    secure_user_authentication_required: winrt.system.Boolean
    logo: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    description: str
    properties: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    max_applet_ids: typing.ClassVar[winrt.system.UInt16]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardAppletIdGroup: ...
    @typing.overload
    def __new__(cls: typing.Type[SmartCardAppletIdGroup], display_name: str, applet_ids: winrt.windows.foundation.collections.IVector[winrt.windows.storage.streams.IBuffer], emulation_category: SmartCardEmulationCategory, emulation_type: SmartCardEmulationType) -> SmartCardAppletIdGroup:...
    @typing.overload
    def __new__(cls: typing.Type[SmartCardAppletIdGroup]) -> SmartCardAppletIdGroup:...

class SmartCardAppletIdGroupRegistration(winrt.system.Object):
    activation_policy: SmartCardAppletIdGroupActivationPolicy
    applet_id_group: typing.Optional[SmartCardAppletIdGroup]
    id: uuid.UUID
    smart_card_reader_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardAppletIdGroupRegistration: ...
    def request_activation_policy_change_async(self, policy: SmartCardAppletIdGroupActivationPolicy, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardActivationPolicyChangeResult]: ...
    def set_automatic_response_apdus_async(self, apdus: typing.Iterable[SmartCardAutomaticResponseApdu], /) -> winrt.windows.foundation.IAsyncAction: ...
    def set_properties_async(self, props: typing.Optional[winrt.windows.foundation.collections.ValueSet], /) -> winrt.windows.foundation.IAsyncAction: ...

class SmartCardAutomaticResponseApdu(winrt.system.Object):
    should_match_length: winrt.system.Boolean
    response_apdu: typing.Optional[winrt.windows.storage.streams.IBuffer]
    command_apdu_bit_mask: typing.Optional[winrt.windows.storage.streams.IBuffer]
    command_apdu: typing.Optional[winrt.windows.storage.streams.IBuffer]
    applet_id: typing.Optional[winrt.windows.storage.streams.IBuffer]
    output_state: typing.Optional[typing.Optional[winrt.system.UInt32]]
    input_state: typing.Optional[typing.Optional[winrt.system.UInt32]]
    allow_when_cryptogram_generator_not_prepared: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardAutomaticResponseApdu: ...
    def __new__(cls: typing.Type[SmartCardAutomaticResponseApdu], command_apdu: typing.Optional[winrt.windows.storage.streams.IBuffer], response_apdu: typing.Optional[winrt.windows.storage.streams.IBuffer]) -> SmartCardAutomaticResponseApdu:...

class SmartCardChallengeContext(winrt.system.Object):
    challenge: typing.Optional[winrt.windows.storage.streams.IBuffer]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardChallengeContext: ...
    def change_administrative_key_async(self, response: typing.Optional[winrt.windows.storage.streams.IBuffer], new_administrative_key: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncAction: ...
    def close(self) -> None: ...
    @typing.overload
    def provision_async(self, response: typing.Optional[winrt.windows.storage.streams.IBuffer], format_card: winrt.system.Boolean, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def provision_async(self, response: typing.Optional[winrt.windows.storage.streams.IBuffer], format_card: winrt.system.Boolean, new_card_id: uuid.UUID, /) -> winrt.windows.foundation.IAsyncAction: ...
    def verify_response_async(self, response: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

class SmartCardConnection(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardConnection: ...
    def close(self) -> None: ...
    def transmit_async(self, command: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IBuffer]: ...

class SmartCardCryptogramGenerator(winrt.system.Object):
    supported_cryptogram_algorithms: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramAlgorithm]]
    supported_cryptogram_material_package_confirmation_response_formats: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageConfirmationResponseFormat]]
    supported_cryptogram_material_package_formats: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageFormat]]
    supported_cryptogram_material_types: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialType]]
    supported_smart_card_cryptogram_storage_key_capabilities: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramStorageKeyCapabilities]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramGenerator: ...
    def create_cryptogram_material_storage_key_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, storage_key_name: str, algorithm: SmartCardCryptogramStorageKeyAlgorithm, capabilities: SmartCardCryptogramStorageKeyCapabilities, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    def delete_cryptogram_material_package_async(self, material_package_name: str, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    def delete_cryptogram_material_storage_key_async(self, storage_key_name: str, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    def get_all_cryptogram_material_characteristics_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, material_package_name: str, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult]: ...
    @typing.overload
    def get_all_cryptogram_material_package_characteristics_async(self) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult]: ...
    @typing.overload
    def get_all_cryptogram_material_package_characteristics_async(self, storage_key_name: str, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult]: ...
    def get_all_cryptogram_storage_key_characteristics_async(self) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult]: ...
    @staticmethod
    def get_smart_card_cryptogram_generator_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGenerator]: ...
    def import_cryptogram_material_package_async(self, format: SmartCardCryptogramMaterialPackageFormat, storage_key_name: str, material_package_name: str, cryptogram_material_package: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    @staticmethod
    def is_supported() -> winrt.system.Boolean: ...
    def request_cryptogram_material_storage_key_info_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, storage_key_name: str, format: winrt.windows.security.cryptography.core.CryptographicPublicKeyBlobType, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramStorageKeyInfo]: ...
    def request_unlock_cryptogram_material_for_use_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    def try_prove_possession_of_cryptogram_material_package_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, response_format: SmartCardCryptogramMaterialPackageConfirmationResponseFormat, material_package_name: str, material_name: str, challenge: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramMaterialPossessionProof]: ...
    def validate_request_apdu_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, apdu_to_validate: typing.Optional[winrt.windows.storage.streams.IBuffer], cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...

class SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult(winrt.system.Object):
    characteristics: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialCharacteristics]]
    operation_status: SmartCardCryptogramGeneratorOperationStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult: ...
    def __new__(cls: typing.Type[SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult]) -> SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult:...

class SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult(winrt.system.Object):
    characteristics: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageCharacteristics]]
    operation_status: SmartCardCryptogramGeneratorOperationStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult: ...
    def __new__(cls: typing.Type[SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult]) -> SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult:...

class SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult(winrt.system.Object):
    characteristics: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramStorageKeyCharacteristics]]
    operation_status: SmartCardCryptogramGeneratorOperationStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult: ...
    def __new__(cls: typing.Type[SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult]) -> SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult:...

class SmartCardCryptogramMaterialCharacteristics(winrt.system.Object):
    allowed_algorithms: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramAlgorithm]]
    allowed_proof_of_possession_algorithms: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramMaterialPackageConfirmationResponseFormat]]
    allowed_validations: typing.Optional[winrt.windows.foundation.collections.IVectorView[SmartCardCryptogramAlgorithm]]
    material_length: winrt.system.Int32
    material_name: str
    material_type: SmartCardCryptogramMaterialType
    protection_method: SmartCardCryptogramMaterialProtectionMethod
    protection_version: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramMaterialCharacteristics: ...
    def __new__(cls: typing.Type[SmartCardCryptogramMaterialCharacteristics]) -> SmartCardCryptogramMaterialCharacteristics:...

class SmartCardCryptogramMaterialPackageCharacteristics(winrt.system.Object):
    date_imported: datetime.datetime
    package_format: SmartCardCryptogramMaterialPackageFormat
    package_name: str
    storage_key_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramMaterialPackageCharacteristics: ...
    def __new__(cls: typing.Type[SmartCardCryptogramMaterialPackageCharacteristics]) -> SmartCardCryptogramMaterialPackageCharacteristics:...

class SmartCardCryptogramMaterialPossessionProof(winrt.system.Object):
    operation_status: SmartCardCryptogramGeneratorOperationStatus
    proof: typing.Optional[winrt.windows.storage.streams.IBuffer]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramMaterialPossessionProof: ...

class SmartCardCryptogramPlacementStep(winrt.system.Object):
    template_offset: winrt.system.Int32
    source_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    cryptogram_placement_options: SmartCardCryptogramPlacementOptions
    cryptogram_offset: winrt.system.Int32
    cryptogram_material_package_name: str
    cryptogram_material_name: str
    cryptogram_length: winrt.system.Int32
    chained_output_step: typing.Optional[SmartCardCryptogramPlacementStep]
    algorithm: SmartCardCryptogramAlgorithm
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramPlacementStep: ...
    def __new__(cls: typing.Type[SmartCardCryptogramPlacementStep]) -> SmartCardCryptogramPlacementStep:...

class SmartCardCryptogramStorageKeyCharacteristics(winrt.system.Object):
    algorithm: SmartCardCryptogramStorageKeyAlgorithm
    capabilities: SmartCardCryptogramStorageKeyCapabilities
    date_created: datetime.datetime
    storage_key_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramStorageKeyCharacteristics: ...
    def __new__(cls: typing.Type[SmartCardCryptogramStorageKeyCharacteristics]) -> SmartCardCryptogramStorageKeyCharacteristics:...

class SmartCardCryptogramStorageKeyInfo(winrt.system.Object):
    attestation: typing.Optional[winrt.windows.storage.streams.IBuffer]
    attestation_certificate_chain: typing.Optional[winrt.windows.storage.streams.IBuffer]
    attestation_status: SmartCardCryptographicKeyAttestationStatus
    capabilities: SmartCardCryptogramStorageKeyCapabilities
    operation_status: SmartCardCryptogramGeneratorOperationStatus
    public_key: typing.Optional[winrt.windows.storage.streams.IBuffer]
    public_key_blob_type: winrt.windows.security.cryptography.core.CryptographicPublicKeyBlobType
    operational_requirements: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardCryptogramStorageKeyInfo: ...

class SmartCardEmulator(winrt.system.Object):
    enablement_policy: SmartCardEmulatorEnablementPolicy
    max_applet_id_group_registrations: typing.ClassVar[winrt.system.UInt16]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardEmulator: ...
    @staticmethod
    def get_applet_id_group_registrations_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[SmartCardAppletIdGroupRegistration]]: ...
    @staticmethod
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[SmartCardEmulator]: ...
    def is_host_card_emulation_supported(self) -> winrt.system.Boolean: ...
    @staticmethod
    def is_supported() -> winrt.system.Boolean: ...
    @staticmethod
    def register_applet_id_group_async(applet_id_group: typing.Optional[SmartCardAppletIdGroup], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardAppletIdGroupRegistration]: ...
    def start(self) -> None: ...
    @staticmethod
    def unregister_applet_id_group_async(registration: typing.Optional[SmartCardAppletIdGroupRegistration], /) -> winrt.windows.foundation.IAsyncAction: ...
    def add_apdu_received(self, value: winrt.windows.foundation.TypedEventHandler[SmartCardEmulator, SmartCardEmulatorApduReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_apdu_received(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_connection_deactivated(self, value: winrt.windows.foundation.TypedEventHandler[SmartCardEmulator, SmartCardEmulatorConnectionDeactivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_connection_deactivated(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class SmartCardEmulatorApduReceivedEventArgs(winrt.system.Object):
    automatic_response_status: SmartCardAutomaticResponseStatus
    command_apdu: typing.Optional[winrt.windows.storage.streams.IBuffer]
    connection_properties: typing.Optional[SmartCardEmulatorConnectionProperties]
    state: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardEmulatorApduReceivedEventArgs: ...
    @typing.overload
    def try_respond_async(self, response_apdu: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_respond_async(self, response_apdu: typing.Optional[winrt.windows.storage.streams.IBuffer], next_state: typing.Optional[winrt.system.UInt32], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_respond_with_cryptograms_async(self, response_template: typing.Optional[winrt.windows.storage.streams.IBuffer], cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    @typing.overload
    def try_respond_with_cryptograms_async(self, response_template: typing.Optional[winrt.windows.storage.streams.IBuffer], cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep], next_state: typing.Optional[winrt.system.UInt32], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...

class SmartCardEmulatorConnectionDeactivatedEventArgs(winrt.system.Object):
    connection_properties: typing.Optional[SmartCardEmulatorConnectionProperties]
    reason: SmartCardEmulatorConnectionDeactivatedReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardEmulatorConnectionDeactivatedEventArgs: ...

class SmartCardEmulatorConnectionProperties(winrt.system.Object):
    id: uuid.UUID
    source: SmartCardEmulatorConnectionSource
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardEmulatorConnectionProperties: ...

class SmartCardPinPolicy(winrt.system.Object):
    uppercase_letters: SmartCardPinCharacterPolicyOption
    special_characters: SmartCardPinCharacterPolicyOption
    min_length: winrt.system.UInt32
    max_length: winrt.system.UInt32
    lowercase_letters: SmartCardPinCharacterPolicyOption
    digits: SmartCardPinCharacterPolicyOption
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardPinPolicy: ...
    def __new__(cls: typing.Type[SmartCardPinPolicy]) -> SmartCardPinPolicy:...

class SmartCardPinResetDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardPinResetDeferral: ...
    def complete(self) -> None: ...

class SmartCardPinResetRequest(winrt.system.Object):
    challenge: typing.Optional[winrt.windows.storage.streams.IBuffer]
    deadline: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardPinResetRequest: ...
    def get_deferral(self) -> typing.Optional[SmartCardPinResetDeferral]: ...
    def set_response(self, response: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...

class SmartCardProvisioning(winrt.system.Object):
    smart_card: typing.Optional[SmartCard]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardProvisioning: ...
    @staticmethod
    def from_smart_card_async(card: typing.Optional[SmartCard], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]: ...
    def get_authority_key_container_name_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_challenge_context_async(self) -> winrt.windows.foundation.IAsyncOperation[SmartCardChallengeContext]: ...
    def get_id_async(self) -> winrt.windows.foundation.IAsyncOperation[uuid.UUID]: ...
    def get_name_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    @staticmethod
    def request_attested_virtual_smart_card_creation_async(friendly_name: str, administrative_key: typing.Optional[winrt.windows.storage.streams.IBuffer], pin_policy: typing.Optional[SmartCardPinPolicy], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]: ...
    @typing.overload
    @staticmethod
    def request_attested_virtual_smart_card_creation_async(friendly_name: str, administrative_key: typing.Optional[winrt.windows.storage.streams.IBuffer], pin_policy: typing.Optional[SmartCardPinPolicy], card_id: uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]: ...
    def request_pin_change_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def request_pin_reset_async(self, handler: typing.Optional[SmartCardPinResetHandler], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    @staticmethod
    def request_virtual_smart_card_creation_async(friendly_name: str, administrative_key: typing.Optional[winrt.windows.storage.streams.IBuffer], pin_policy: typing.Optional[SmartCardPinPolicy], /) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]: ...
    @typing.overload
    @staticmethod
    def request_virtual_smart_card_creation_async(friendly_name: str, administrative_key: typing.Optional[winrt.windows.storage.streams.IBuffer], pin_policy: typing.Optional[SmartCardPinPolicy], card_id: uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardProvisioning]: ...
    @staticmethod
    def request_virtual_smart_card_deletion_async(card: typing.Optional[SmartCard], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

class SmartCardReader(winrt.system.Object):
    device_id: str
    kind: SmartCardReaderKind
    name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardReader: ...
    def find_all_cards_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[SmartCard]]: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[SmartCardReader]: ...
    @typing.overload
    @staticmethod
    def get_device_selector() -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector(kind: SmartCardReaderKind, /) -> str: ...
    def get_status_async(self) -> winrt.windows.foundation.IAsyncOperation[SmartCardReaderStatus]: ...
    def add_card_added(self, handler: winrt.windows.foundation.TypedEventHandler[SmartCardReader, CardAddedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_card_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_card_removed(self, handler: winrt.windows.foundation.TypedEventHandler[SmartCardReader, CardRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_card_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class SmartCardTriggerDetails(winrt.system.Object):
    source_applet_id: typing.Optional[winrt.windows.storage.streams.IBuffer]
    trigger_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    trigger_type: SmartCardTriggerType
    emulator: typing.Optional[SmartCardEmulator]
    smart_card: typing.Optional[SmartCard]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardTriggerDetails: ...
    @typing.overload
    def try_launch_current_app_async(self, arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @typing.overload
    def try_launch_current_app_async(self, arguments: str, behavior: SmartCardLaunchBehavior, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

