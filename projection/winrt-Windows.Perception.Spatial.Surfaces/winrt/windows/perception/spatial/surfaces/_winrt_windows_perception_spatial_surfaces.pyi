# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.foundation.numerics
import winrt.windows.graphics.directx
import winrt.windows.perception.spatial
import winrt.windows.storage.streams

Self = typing.TypeVar('Self')

class SpatialSurfaceInfo(winrt.system.Object):
    id: uuid.UUID
    update_time: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpatialSurfaceInfo: ...
    @typing.overload
    def try_compute_latest_mesh_async(self, max_triangles_per_cubic_meter: winrt.system.Double, /) -> winrt.windows.foundation.IAsyncOperation[SpatialSurfaceMesh]: ...
    @typing.overload
    def try_compute_latest_mesh_async(self, max_triangles_per_cubic_meter: winrt.system.Double, options: typing.Optional[SpatialSurfaceMeshOptions], /) -> winrt.windows.foundation.IAsyncOperation[SpatialSurfaceMesh]: ...
    def try_get_bounds(self, coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem], /) -> typing.Optional[typing.Optional[winrt.windows.perception.spatial.SpatialBoundingOrientedBox]]: ...

class SpatialSurfaceMesh(winrt.system.Object):
    coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem]
    surface_info: typing.Optional[SpatialSurfaceInfo]
    triangle_indices: typing.Optional[SpatialSurfaceMeshBuffer]
    vertex_normals: typing.Optional[SpatialSurfaceMeshBuffer]
    vertex_position_scale: winrt.windows.foundation.numerics.Vector3
    vertex_positions: typing.Optional[SpatialSurfaceMeshBuffer]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpatialSurfaceMesh: ...

class SpatialSurfaceMeshBuffer(winrt.system.Object):
    data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    element_count: winrt.system.UInt32
    format: winrt.windows.graphics.directx.DirectXPixelFormat
    stride: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpatialSurfaceMeshBuffer: ...

class SpatialSurfaceMeshOptions(winrt.system.Object):
    vertex_position_format: winrt.windows.graphics.directx.DirectXPixelFormat
    vertex_normal_format: winrt.windows.graphics.directx.DirectXPixelFormat
    triangle_index_format: winrt.windows.graphics.directx.DirectXPixelFormat
    include_vertex_normals: winrt.system.Boolean
    supported_triangle_index_formats: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.directx.DirectXPixelFormat]]]
    supported_vertex_normal_formats: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.directx.DirectXPixelFormat]]]
    supported_vertex_position_formats: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.directx.DirectXPixelFormat]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpatialSurfaceMeshOptions: ...
    def __new__(cls: typing.Type[SpatialSurfaceMeshOptions]) -> SpatialSurfaceMeshOptions:...

class SpatialSurfaceObserver(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpatialSurfaceObserver: ...
    def __new__(cls: typing.Type[SpatialSurfaceObserver]) -> SpatialSurfaceObserver:...
    def get_observed_surfaces(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[uuid.UUID, SpatialSurfaceInfo]]: ...
    @staticmethod
    def is_supported() -> winrt.system.Boolean: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.perception.spatial.SpatialPerceptionAccessStatus]: ...
    def set_bounding_volume(self, bounds: typing.Optional[winrt.windows.perception.spatial.SpatialBoundingVolume], /) -> None: ...
    def set_bounding_volumes(self, bounds: typing.Iterable[winrt.windows.perception.spatial.SpatialBoundingVolume], /) -> None: ...
    def add_observed_surfaces_changed(self, handler: winrt.windows.foundation.TypedEventHandler[SpatialSurfaceObserver, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_observed_surfaces_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

