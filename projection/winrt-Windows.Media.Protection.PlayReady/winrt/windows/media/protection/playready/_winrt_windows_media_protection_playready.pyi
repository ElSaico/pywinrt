# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.core
import winrt.windows.media.protection
import winrt.windows.storage

from . import NDCertificateFeature, NDCertificatePlatformID, NDCertificateType, NDClosedCaptionFormat, NDContentIDType, NDMediaStreamType, NDProximityDetectionType, NDStartAsyncOptions, PlayReadyDecryptorSetup, PlayReadyEncryptionAlgorithm, PlayReadyHardwareDRMFeatures, PlayReadyITADataFormat

Self = typing.TypeVar('Self')

class NDClient(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDClient: ...
    def __new__(cls: typing.Type[NDClient], download_engine: typing.Optional[INDDownloadEngine], stream_parser: typing.Optional[INDStreamParser], p_messenger: typing.Optional[INDMessenger]) -> NDClient:...
    def close(self) -> None: ...
    def license_fetch_async(self, license_fetch_descriptor: typing.Optional[INDLicenseFetchDescriptor], /) -> winrt.windows.foundation.IAsyncOperation[INDLicenseFetchResult]: ...
    def re_registration_async(self, registration_custom_data: typing.Optional[INDCustomData], /) -> winrt.windows.foundation.IAsyncAction: ...
    def start_async(self, content_url: typing.Optional[winrt.windows.foundation.Uri], start_async_options: winrt.system.UInt32, registration_custom_data: typing.Optional[INDCustomData], license_fetch_descriptor: typing.Optional[INDLicenseFetchDescriptor], /) -> winrt.windows.foundation.IAsyncOperation[INDStartResult]: ...
    def add_closed_caption_data_received(self, handler: winrt.windows.foundation.TypedEventHandler[NDClient, INDClosedCaptionDataReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed_caption_data_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_license_fetch_completed(self, handler: winrt.windows.foundation.TypedEventHandler[NDClient, INDLicenseFetchCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_license_fetch_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_proximity_detection_completed(self, handler: winrt.windows.foundation.TypedEventHandler[NDClient, INDProximityDetectionCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_proximity_detection_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_re_registration_needed(self, handler: winrt.windows.foundation.TypedEventHandler[NDClient, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_re_registration_needed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_registration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[NDClient, INDRegistrationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_registration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class NDCustomData(winrt.system.Object):
    custom_data: winrt.system.UInt8
    custom_data_type_i_d: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDCustomData: ...
    def __new__(cls: typing.Type[NDCustomData], custom_data_type_i_d_bytes: winrt.system.Array[winrt.system.UInt8], custom_data_bytes: winrt.system.Array[winrt.system.UInt8]) -> NDCustomData:...

class NDDownloadEngineNotifier(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDDownloadEngineNotifier: ...
    def __new__(cls: typing.Type[NDDownloadEngineNotifier]) -> NDDownloadEngineNotifier:...
    def on_content_i_d_received(self, license_fetch_descriptor: typing.Optional[INDLicenseFetchDescriptor], /) -> None: ...
    def on_data_received(self, data_bytes: winrt.system.Array[winrt.system.UInt8], bytes_received: winrt.system.UInt32, /) -> None: ...
    def on_end_of_stream(self) -> None: ...
    def on_network_error(self) -> None: ...
    def on_play_ready_object_received(self, data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def on_stream_opened(self) -> None: ...

class NDLicenseFetchDescriptor(winrt.system.Object):
    license_fetch_challenge_custom_data: typing.Optional[INDCustomData]
    content_i_d: winrt.system.UInt8
    content_i_d_type: NDContentIDType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDLicenseFetchDescriptor: ...
    def __new__(cls: typing.Type[NDLicenseFetchDescriptor], content_i_d_type: NDContentIDType, content_i_d_bytes: winrt.system.Array[winrt.system.UInt8], license_fetch_challenge_custom_data: typing.Optional[INDCustomData]) -> NDLicenseFetchDescriptor:...

class NDStorageFileHelper(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDStorageFileHelper: ...
    def __new__(cls: typing.Type[NDStorageFileHelper]) -> NDStorageFileHelper:...
    def get_file_u_r_ls(self, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

class NDStreamParserNotifier(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDStreamParserNotifier: ...
    def __new__(cls: typing.Type[NDStreamParserNotifier]) -> NDStreamParserNotifier:...
    def on_begin_setup_decryptor(self, descriptor: typing.Optional[winrt.windows.media.core.IMediaStreamDescriptor], key_i_d: uuid.UUID, pro_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def on_content_i_d_received(self, license_fetch_descriptor: typing.Optional[INDLicenseFetchDescriptor], /) -> None: ...
    def on_media_stream_descriptor_created(self, audio_stream_descriptors: winrt.windows.foundation.collections.IVector[winrt.windows.media.core.AudioStreamDescriptor], video_stream_descriptors: winrt.windows.foundation.collections.IVector[winrt.windows.media.core.VideoStreamDescriptor], /) -> None: ...
    def on_sample_parsed(self, stream_i_d: winrt.system.UInt32, stream_type: NDMediaStreamType, stream_sample: typing.Optional[winrt.windows.media.core.MediaStreamSample], pts: winrt.system.Int64, cc_format: NDClosedCaptionFormat, cc_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...

class NDTCPMessenger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDTCPMessenger: ...
    def __new__(cls: typing.Type[NDTCPMessenger], remote_host_name: str, remote_host_port: winrt.system.UInt32) -> NDTCPMessenger:...
    def send_license_fetch_request_async(self, session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], challenge_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...
    def send_proximity_detection_response_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: winrt.system.Array[winrt.system.UInt8], session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], response_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...
    def send_proximity_detection_start_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: winrt.system.Array[winrt.system.UInt8], session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], challenge_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...
    def send_registration_request_async(self, session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], challenge_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...

class PlayReadyContentHeader(winrt.system.Object):
    custom_attributes: str
    decryptor_setup: PlayReadyDecryptorSetup
    domain_service_id: uuid.UUID
    encryption_type: PlayReadyEncryptionAlgorithm
    header_with_embedded_updates: typing.Optional[PlayReadyContentHeader]
    key_id: uuid.UUID
    key_id_string: str
    license_acquisition_url: typing.Optional[winrt.windows.foundation.Uri]
    license_acquisition_user_interface_url: typing.Optional[winrt.windows.foundation.Uri]
    key_id_strings: str
    key_ids: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyContentHeader: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], dw_flags: winrt.system.UInt32, content_key_ids: winrt.system.Array[uuid.UUID], content_key_id_strings: winrt.system.Array[str], content_encryption_algorithm: PlayReadyEncryptionAlgorithm, license_acquisition_url: typing.Optional[winrt.windows.foundation.Uri], license_acquisition_user_interface_url: typing.Optional[winrt.windows.foundation.Uri], custom_attributes: str, domain_service_id: uuid.UUID) -> PlayReadyContentHeader:...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], header_bytes: winrt.system.Array[winrt.system.UInt8], license_acquisition_url: typing.Optional[winrt.windows.foundation.Uri], license_acquisition_user_interface_url: typing.Optional[winrt.windows.foundation.Uri], custom_attributes: str, domain_service_id: uuid.UUID) -> PlayReadyContentHeader:...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], content_key_id: uuid.UUID, content_key_id_string: str, content_encryption_algorithm: PlayReadyEncryptionAlgorithm, license_acquisition_url: typing.Optional[winrt.windows.foundation.Uri], license_acquisition_user_interface_url: typing.Optional[winrt.windows.foundation.Uri], custom_attributes: str, domain_service_id: uuid.UUID) -> PlayReadyContentHeader:...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], header_bytes: winrt.system.Array[winrt.system.UInt8]) -> PlayReadyContentHeader:...
    def get_serialized_header(self) -> winrt.system.UInt8: ...

class PlayReadyContentResolver(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyContentResolver: ...
    @staticmethod
    def service_request(content_header: typing.Optional[PlayReadyContentHeader], /) -> typing.Optional[IPlayReadyServiceRequest]: ...

class PlayReadyDomain(winrt.system.Object):
    account_id: uuid.UUID
    domain_join_url: typing.Optional[winrt.windows.foundation.Uri]
    friendly_name: str
    revision: winrt.system.UInt32
    service_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomain: ...

class PlayReadyDomainIterable(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IPlayReadyDomain]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainIterable: ...
    def __new__(cls: typing.Type[PlayReadyDomainIterable], domain_account_id: uuid.UUID) -> PlayReadyDomainIterable:...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IPlayReadyDomain]]: ...

class PlayReadyDomainIterator(winrt.system.Object):
    current: typing.Optional[IPlayReadyDomain]
    has_current: bool
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadyDomain: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainIterator: ...
    def get_many(self, items: winrt.system.Array[IPlayReadyDomain], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...

class PlayReadyDomainJoinServiceRequest(winrt.system.Object):
    protection_system: uuid.UUID
    type: uuid.UUID
    domain_service_id: uuid.UUID
    domain_friendly_name: str
    domain_account_id: uuid.UUID
    uri: typing.Optional[winrt.windows.foundation.Uri]
    challenge_custom_data: str
    response_custom_data: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainJoinServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyDomainJoinServiceRequest]) -> PlayReadyDomainJoinServiceRequest:...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class PlayReadyDomainLeaveServiceRequest(winrt.system.Object):
    protection_system: uuid.UUID
    type: uuid.UUID
    domain_service_id: uuid.UUID
    domain_account_id: uuid.UUID
    uri: typing.Optional[winrt.windows.foundation.Uri]
    challenge_custom_data: str
    response_custom_data: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainLeaveServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyDomainLeaveServiceRequest]) -> PlayReadyDomainLeaveServiceRequest:...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class PlayReadyITADataGenerator(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyITADataGenerator: ...
    def __new__(cls: typing.Type[PlayReadyITADataGenerator]) -> PlayReadyITADataGenerator:...
    def generate_data(self, guid_c_p_system_id: uuid.UUID, count_of_streams: winrt.system.UInt32, configuration: typing.Optional[winrt.windows.foundation.collections.IPropertySet], format: PlayReadyITADataFormat, /) -> winrt.system.UInt8: ...

class PlayReadyIndividualizationServiceRequest(winrt.system.Object):
    protection_system: uuid.UUID
    type: uuid.UUID
    uri: typing.Optional[winrt.windows.foundation.Uri]
    challenge_custom_data: str
    response_custom_data: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyIndividualizationServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyIndividualizationServiceRequest]) -> PlayReadyIndividualizationServiceRequest:...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class PlayReadyLicense(winrt.system.Object):
    chain_depth: winrt.system.UInt32
    domain_account_i_d: uuid.UUID
    expiration_date: typing.Optional[typing.Optional[datetime.datetime]]
    expire_after_first_play: winrt.system.UInt32
    fully_evaluated: bool
    usable_for_play: bool
    expires_in_real_time: bool
    in_memory_only: bool
    secure_stop_id: uuid.UUID
    security_level: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicense: ...
    def get_k_i_d_at_chain_depth(self, chain_depth: winrt.system.UInt32, /) -> uuid.UUID: ...

class PlayReadyLicenseAcquisitionServiceRequest(winrt.system.Object):
    protection_system: uuid.UUID
    type: uuid.UUID
    domain_service_id: uuid.UUID
    content_header: typing.Optional[PlayReadyContentHeader]
    session_id: uuid.UUID
    uri: typing.Optional[winrt.windows.foundation.Uri]
    challenge_custom_data: str
    response_custom_data: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseAcquisitionServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyLicenseAcquisitionServiceRequest]) -> PlayReadyLicenseAcquisitionServiceRequest:...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def create_license_iterable(self, content_header: typing.Optional[PlayReadyContentHeader], fully_evaluated: bool, /) -> typing.Optional[PlayReadyLicenseIterable]: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class PlayReadyLicenseIterable(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IPlayReadyLicense]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseIterable: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyLicenseIterable]) -> PlayReadyLicenseIterable:...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyLicenseIterable], content_header: typing.Optional[PlayReadyContentHeader], fully_evaluated: bool) -> PlayReadyLicenseIterable:...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IPlayReadyLicense]]: ...

class PlayReadyLicenseIterator(winrt.system.Object):
    current: typing.Optional[IPlayReadyLicense]
    has_current: bool
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadyLicense: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseIterator: ...
    def get_many(self, items: winrt.system.Array[IPlayReadyLicense], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...

class PlayReadyLicenseManagement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseManagement: ...
    @staticmethod
    def delete_licenses(content_header: typing.Optional[PlayReadyContentHeader], /) -> winrt.windows.foundation.IAsyncAction: ...

class PlayReadyLicenseSession(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseSession: ...
    def __new__(cls: typing.Type[PlayReadyLicenseSession], configuration: typing.Optional[winrt.windows.foundation.collections.IPropertySet]) -> PlayReadyLicenseSession:...
    def configure_media_protection_manager(self, mpm: typing.Optional[winrt.windows.media.protection.MediaProtectionManager], /) -> None: ...
    def create_l_a_service_request(self) -> typing.Optional[IPlayReadyLicenseAcquisitionServiceRequest]: ...
    def create_license_iterable(self, content_header: typing.Optional[PlayReadyContentHeader], fully_evaluated: bool, /) -> typing.Optional[PlayReadyLicenseIterable]: ...

class PlayReadyMeteringReportServiceRequest(winrt.system.Object):
    protection_system: uuid.UUID
    type: uuid.UUID
    metering_certificate: winrt.system.UInt8
    uri: typing.Optional[winrt.windows.foundation.Uri]
    challenge_custom_data: str
    response_custom_data: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyMeteringReportServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyMeteringReportServiceRequest]) -> PlayReadyMeteringReportServiceRequest:...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class PlayReadyRevocationServiceRequest(winrt.system.Object):
    protection_system: uuid.UUID
    type: uuid.UUID
    uri: typing.Optional[winrt.windows.foundation.Uri]
    challenge_custom_data: str
    response_custom_data: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyRevocationServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyRevocationServiceRequest]) -> PlayReadyRevocationServiceRequest:...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class PlayReadySecureStopIterable(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IPlayReadySecureStopServiceRequest]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySecureStopIterable: ...
    def __new__(cls: typing.Type[PlayReadySecureStopIterable], publisher_cert_bytes: winrt.system.Array[winrt.system.UInt8]) -> PlayReadySecureStopIterable:...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IPlayReadySecureStopServiceRequest]]: ...

class PlayReadySecureStopIterator(winrt.system.Object):
    current: typing.Optional[IPlayReadySecureStopServiceRequest]
    has_current: bool
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadySecureStopServiceRequest: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySecureStopIterator: ...
    def get_many(self, items: winrt.system.Array[IPlayReadySecureStopServiceRequest], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...

class PlayReadySecureStopServiceRequest(winrt.system.Object):
    protection_system: uuid.UUID
    type: uuid.UUID
    publisher_certificate: winrt.system.UInt8
    session_i_d: uuid.UUID
    start_time: datetime.datetime
    stopped: bool
    update_time: datetime.datetime
    uri: typing.Optional[winrt.windows.foundation.Uri]
    challenge_custom_data: str
    response_custom_data: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySecureStopServiceRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadySecureStopServiceRequest], publisher_cert_bytes: winrt.system.Array[winrt.system.UInt8]) -> PlayReadySecureStopServiceRequest:...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadySecureStopServiceRequest], session_i_d: uuid.UUID, publisher_cert_bytes: winrt.system.Array[winrt.system.UInt8]) -> PlayReadySecureStopServiceRequest:...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class PlayReadySoapMessage(winrt.system.Object):
    message_headers: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    uri: typing.Optional[winrt.windows.foundation.Uri]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySoapMessage: ...
    def get_message_body(self) -> winrt.system.UInt8: ...

class PlayReadyStatics(winrt.system.Object):
    domain_join_service_request_type: typing.ClassVar[uuid.UUID]
    domain_leave_service_request_type: typing.ClassVar[uuid.UUID]
    individualization_service_request_type: typing.ClassVar[uuid.UUID]
    license_acquirer_service_request_type: typing.ClassVar[uuid.UUID]
    media_protection_system_id: typing.ClassVar[uuid.UUID]
    metering_report_service_request_type: typing.ClassVar[uuid.UUID]
    play_ready_security_version: typing.ClassVar[winrt.system.UInt32]
    revocation_service_request_type: typing.ClassVar[uuid.UUID]
    play_ready_certificate_security_level: typing.ClassVar[winrt.system.UInt32]
    secure_stop_service_request_type: typing.ClassVar[uuid.UUID]
    protection_system_id: typing.ClassVar[uuid.UUID]
    input_trust_authority_to_create: typing.ClassVar[str]
    hardware_d_r_m_disabled_until_time: typing.ClassVar[typing.Optional[typing.Optional[datetime.datetime]]]
    hardware_d_r_m_disabled_at_time: typing.ClassVar[typing.Optional[typing.Optional[datetime.datetime]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyStatics: ...
    @staticmethod
    def check_supported_hardware(hwdrm_feature: PlayReadyHardwareDRMFeatures, /) -> bool: ...
    @staticmethod
    def reset_hardware_d_r_m_disabled() -> None: ...

class INDClosedCaptionDataReceivedEventArgs(winrt.system.Object):
    closed_caption_data: winrt.system.UInt8
    closed_caption_data_format: NDClosedCaptionFormat
    presentation_timestamp: winrt.system.Int64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDClosedCaptionDataReceivedEventArgs: ...

class INDCustomData(winrt.system.Object):
    custom_data: winrt.system.UInt8
    custom_data_type_i_d: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDCustomData: ...

class INDDownloadEngine(winrt.system.Object):
    buffer_full_max_threshold_in_samples: winrt.system.UInt32
    buffer_full_min_threshold_in_samples: winrt.system.UInt32
    can_seek: bool
    notifier: typing.Optional[NDDownloadEngineNotifier]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDDownloadEngine: ...
    def close(self) -> None: ...
    def open(self, uri: typing.Optional[winrt.windows.foundation.Uri], session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def seek(self, start_position: datetime.timedelta, /) -> None: ...

class INDDownloadEngineNotifier(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDDownloadEngineNotifier: ...
    def on_content_i_d_received(self, license_fetch_descriptor: typing.Optional[INDLicenseFetchDescriptor], /) -> None: ...
    def on_data_received(self, data_bytes: winrt.system.Array[winrt.system.UInt8], bytes_received: winrt.system.UInt32, /) -> None: ...
    def on_end_of_stream(self) -> None: ...
    def on_network_error(self) -> None: ...
    def on_play_ready_object_received(self, data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def on_stream_opened(self) -> None: ...

class INDLicenseFetchCompletedEventArgs(winrt.system.Object):
    response_custom_data: typing.Optional[INDCustomData]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDLicenseFetchCompletedEventArgs: ...

class INDLicenseFetchDescriptor(winrt.system.Object):
    content_i_d: winrt.system.UInt8
    content_i_d_type: NDContentIDType
    license_fetch_challenge_custom_data: typing.Optional[INDCustomData]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDLicenseFetchDescriptor: ...

class INDLicenseFetchResult(winrt.system.Object):
    response_custom_data: typing.Optional[INDCustomData]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDLicenseFetchResult: ...

class INDMessenger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDMessenger: ...
    def send_license_fetch_request_async(self, session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], challenge_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...
    def send_proximity_detection_response_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: winrt.system.Array[winrt.system.UInt8], session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], response_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...
    def send_proximity_detection_start_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: winrt.system.Array[winrt.system.UInt8], session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], challenge_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...
    def send_registration_request_async(self, session_i_d_bytes: winrt.system.Array[winrt.system.UInt8], challenge_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.IAsyncOperation[INDSendResult]: ...

class INDProximityDetectionCompletedEventArgs(winrt.system.Object):
    proximity_detection_retry_count: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDProximityDetectionCompletedEventArgs: ...

class INDRegistrationCompletedEventArgs(winrt.system.Object):
    response_custom_data: typing.Optional[INDCustomData]
    transmitter_certificate_accepted: bool
    transmitter_properties: typing.Optional[INDTransmitterProperties]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDRegistrationCompletedEventArgs: ...

class INDSendResult(winrt.system.Object):
    response: winrt.system.UInt8
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDSendResult: ...

class INDStartResult(winrt.system.Object):
    media_stream_source: typing.Optional[winrt.windows.media.core.MediaStreamSource]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStartResult: ...

class INDStorageFileHelper(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStorageFileHelper: ...
    def get_file_u_r_ls(self, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

class INDStreamParser(winrt.system.Object):
    notifier: typing.Optional[NDStreamParserNotifier]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStreamParser: ...
    def begin_of_stream(self) -> None: ...
    def end_of_stream(self) -> None: ...
    def get_stream_information(self, descriptor: typing.Optional[winrt.windows.media.core.IMediaStreamDescriptor], /) -> typing.Tuple[winrt.system.UInt32, NDMediaStreamType]: ...
    def parse_data(self, data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...

class INDStreamParserNotifier(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStreamParserNotifier: ...
    def on_begin_setup_decryptor(self, descriptor: typing.Optional[winrt.windows.media.core.IMediaStreamDescriptor], key_i_d: uuid.UUID, pro_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def on_content_i_d_received(self, license_fetch_descriptor: typing.Optional[INDLicenseFetchDescriptor], /) -> None: ...
    def on_media_stream_descriptor_created(self, audio_stream_descriptors: winrt.windows.foundation.collections.IVector[winrt.windows.media.core.AudioStreamDescriptor], video_stream_descriptors: winrt.windows.foundation.collections.IVector[winrt.windows.media.core.VideoStreamDescriptor], /) -> None: ...
    def on_sample_parsed(self, stream_i_d: winrt.system.UInt32, stream_type: NDMediaStreamType, stream_sample: typing.Optional[winrt.windows.media.core.MediaStreamSample], pts: winrt.system.Int64, cc_format: NDClosedCaptionFormat, cc_data_bytes: winrt.system.Array[winrt.system.UInt8], /) -> None: ...

class INDTransmitterProperties(winrt.system.Object):
    certificate_type: NDCertificateType
    client_i_d: winrt.system.UInt8
    expiration_date: datetime.datetime
    model_digest: winrt.system.UInt8
    model_manufacturer_name: str
    model_name: str
    model_number: str
    platform_identifier: NDCertificatePlatformID
    security_level: winrt.system.UInt32
    security_version: winrt.system.UInt32
    supported_features: NDCertificateFeature
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDTransmitterProperties: ...

class IPlayReadyDomain(winrt.system.Object):
    account_id: uuid.UUID
    domain_join_url: typing.Optional[winrt.windows.foundation.Uri]
    friendly_name: str
    revision: winrt.system.UInt32
    service_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyDomain: ...

class IPlayReadyLicense(winrt.system.Object):
    chain_depth: winrt.system.UInt32
    domain_account_i_d: uuid.UUID
    expiration_date: typing.Optional[typing.Optional[datetime.datetime]]
    expire_after_first_play: winrt.system.UInt32
    fully_evaluated: bool
    usable_for_play: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicense: ...
    def get_k_i_d_at_chain_depth(self, chain_depth: winrt.system.UInt32, /) -> uuid.UUID: ...

class IPlayReadyLicenseAcquisitionServiceRequest(winrt.system.Object):
    content_header: typing.Optional[PlayReadyContentHeader]
    domain_service_id: uuid.UUID
    challenge_custom_data: str
    response_custom_data: str
    uri: typing.Optional[winrt.windows.foundation.Uri]
    protection_system: uuid.UUID
    type: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicenseAcquisitionServiceRequest: ...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class IPlayReadyLicenseSession(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicenseSession: ...
    def configure_media_protection_manager(self, mpm: typing.Optional[winrt.windows.media.protection.MediaProtectionManager], /) -> None: ...
    def create_l_a_service_request(self) -> typing.Optional[IPlayReadyLicenseAcquisitionServiceRequest]: ...

class IPlayReadyLicenseSession2(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicenseSession2: ...
    def configure_media_protection_manager(self, mpm: typing.Optional[winrt.windows.media.protection.MediaProtectionManager], /) -> None: ...
    def create_l_a_service_request(self) -> typing.Optional[IPlayReadyLicenseAcquisitionServiceRequest]: ...
    def create_license_iterable(self, content_header: typing.Optional[PlayReadyContentHeader], fully_evaluated: bool, /) -> typing.Optional[PlayReadyLicenseIterable]: ...

class IPlayReadySecureStopServiceRequest(winrt.system.Object):
    publisher_certificate: winrt.system.UInt8
    session_i_d: uuid.UUID
    start_time: datetime.datetime
    stopped: bool
    update_time: datetime.datetime
    challenge_custom_data: str
    response_custom_data: str
    uri: typing.Optional[winrt.windows.foundation.Uri]
    protection_system: uuid.UUID
    type: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadySecureStopServiceRequest: ...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

class IPlayReadyServiceRequest(winrt.system.Object):
    challenge_custom_data: str
    response_custom_data: str
    uri: typing.Optional[winrt.windows.foundation.Uri]
    protection_system: uuid.UUID
    type: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyServiceRequest: ...
    def begin_service_request(self) -> winrt.windows.foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> typing.Optional[PlayReadySoapMessage]: ...
    def next_service_request(self) -> typing.Optional[IPlayReadyServiceRequest]: ...
    def process_manual_enabling_response(self, response_bytes: winrt.system.Array[winrt.system.UInt8], /) -> winrt.windows.foundation.HResult: ...

