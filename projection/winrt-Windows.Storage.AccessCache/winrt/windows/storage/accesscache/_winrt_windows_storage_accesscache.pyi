# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage
import winrt.windows.system

from . import AccessCacheOptions, RecentStorageItemVisibility

Self = typing.TypeVar('Self')

class AccessListEntry:
    token: str
    metadata: str
    def __new__(cls: typing.Type[AccessListEntry], token: str, metadata: str) -> AccessListEntry: ...

class AccessListEntryView(winrt.system.Object, typing.Sequence[AccessListEntry]):
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> AccessListEntry: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[AccessListEntry]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccessListEntryView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[AccessListEntry]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> AccessListEntry: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[AccessListEntry], /) -> winrt.system.UInt32: ...
    def index_of(self, value: AccessListEntry, /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...

class ItemRemovedEventArgs(winrt.system.Object):
    removed_entry: AccessListEntry
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemRemovedEventArgs: ...

class StorageApplicationPermissions(winrt.system.Object):
    future_access_list: typing.ClassVar[typing.Optional[StorageItemAccessList]]
    most_recently_used_list: typing.ClassVar[typing.Optional[StorageItemMostRecentlyUsedList]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StorageApplicationPermissions: ...
    @staticmethod
    def get_future_access_list_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[StorageItemAccessList]: ...
    @staticmethod
    def get_most_recently_used_list_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[StorageItemMostRecentlyUsedList]: ...

class StorageItemAccessList(winrt.system.Object):
    entries: typing.Optional[AccessListEntryView]
    maximum_items_allowed: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StorageItemAccessList: ...
    @typing.overload
    def add(self, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> str: ...
    @typing.overload
    def add(self, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, /) -> str: ...
    @typing.overload
    def add_or_replace(self, token: str, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> None: ...
    @typing.overload
    def add_or_replace(self, token: str, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, /) -> None: ...
    def check_access(self, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> winrt.system.Boolean: ...
    def clear(self) -> None: ...
    def contains_item(self, token: str, /) -> winrt.system.Boolean: ...
    @typing.overload
    def get_file_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @typing.overload
    def get_file_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @typing.overload
    def get_folder_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFolder]: ...
    @typing.overload
    def get_folder_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFolder]: ...
    @typing.overload
    def get_item_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.IStorageItem]: ...
    @typing.overload
    def get_item_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.IStorageItem]: ...
    def remove(self, token: str, /) -> None: ...

class StorageItemMostRecentlyUsedList(winrt.system.Object):
    entries: typing.Optional[AccessListEntryView]
    maximum_items_allowed: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StorageItemMostRecentlyUsedList: ...
    @typing.overload
    def add(self, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> str: ...
    @typing.overload
    def add(self, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, /) -> str: ...
    @typing.overload
    def add(self, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, visibility: RecentStorageItemVisibility, /) -> str: ...
    @typing.overload
    def add_or_replace(self, token: str, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> None: ...
    @typing.overload
    def add_or_replace(self, token: str, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, /) -> None: ...
    @typing.overload
    def add_or_replace(self, token: str, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, visibility: RecentStorageItemVisibility, /) -> None: ...
    def check_access(self, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> winrt.system.Boolean: ...
    def clear(self) -> None: ...
    def contains_item(self, token: str, /) -> winrt.system.Boolean: ...
    @typing.overload
    def get_file_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @typing.overload
    def get_file_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @typing.overload
    def get_folder_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFolder]: ...
    @typing.overload
    def get_folder_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFolder]: ...
    @typing.overload
    def get_item_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.IStorageItem]: ...
    @typing.overload
    def get_item_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.IStorageItem]: ...
    def remove(self, token: str, /) -> None: ...
    def add_item_removed(self, handler: winrt.windows.foundation.TypedEventHandler[StorageItemMostRecentlyUsedList, ItemRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_item_removed(self, event_cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IStorageItemAccessList(winrt.system.Object):
    entries: typing.Optional[AccessListEntryView]
    maximum_items_allowed: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IStorageItemAccessList: ...
    @typing.overload
    def add(self, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> str: ...
    @typing.overload
    def add(self, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, /) -> str: ...
    @typing.overload
    def add_or_replace(self, token: str, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> None: ...
    @typing.overload
    def add_or_replace(self, token: str, file: typing.Optional[winrt.windows.storage.IStorageItem], metadata: str, /) -> None: ...
    def check_access(self, file: typing.Optional[winrt.windows.storage.IStorageItem], /) -> winrt.system.Boolean: ...
    def clear(self) -> None: ...
    def contains_item(self, token: str, /) -> winrt.system.Boolean: ...
    @typing.overload
    def get_file_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @typing.overload
    def get_file_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @typing.overload
    def get_folder_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFolder]: ...
    @typing.overload
    def get_folder_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFolder]: ...
    @typing.overload
    def get_item_async(self, token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.IStorageItem]: ...
    @typing.overload
    def get_item_async(self, token: str, options: AccessCacheOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.IStorageItem]: ...
    def remove(self, token: str, /) -> None: ...

