# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.ui.popups

from . import DialAppLaunchResult, DialAppState, DialAppStopResult, DialDeviceDisplayStatus

Self = typing.TypeVar('Self')

class DialApp(winrt.system.Object):
    app_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialApp: ...
    def get_app_state_async(self) -> winrt.windows.foundation.IAsyncOperation[DialAppStateDetails]: ...
    def request_launch_async(self, app_argument: str, /) -> winrt.windows.foundation.IAsyncOperation[DialAppLaunchResult]: ...
    def stop_async(self) -> winrt.windows.foundation.IAsyncOperation[DialAppStopResult]: ...

class DialAppStateDetails(winrt.system.Object):
    full_xml: str
    state: DialAppState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialAppStateDetails: ...

class DialDevice(winrt.system.Object):
    id: str
    friendly_name: str
    thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialDevice: ...
    @staticmethod
    def device_info_supports_dial_async(device: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @staticmethod
    def from_id_async(value: str, /) -> winrt.windows.foundation.IAsyncOperation[DialDevice]: ...
    @staticmethod
    def get_device_selector(app_name: str, /) -> str: ...
    def get_dial_app(self, app_name: str, /) -> typing.Optional[DialApp]: ...

class DialDevicePicker(winrt.system.Object):
    appearance: typing.Optional[winrt.windows.devices.enumeration.DevicePickerAppearance]
    filter: typing.Optional[DialDevicePickerFilter]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialDevicePicker: ...
    def __new__(cls: typing.Type[DialDevicePicker]) -> DialDevicePicker:...
    def hide(self) -> None: ...
    @typing.overload
    def pick_single_dial_device_async(self, selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[DialDevice]: ...
    @typing.overload
    def pick_single_dial_device_async(self, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[DialDevice]: ...
    def set_display_status(self, device: typing.Optional[DialDevice], status: DialDeviceDisplayStatus, /) -> None: ...
    @typing.overload
    def show(self, selection: winrt.windows.foundation.Rect, /) -> None: ...
    @typing.overload
    def show(self, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> None: ...
    def add_dial_device_picker_dismissed(self, handler: winrt.windows.foundation.TypedEventHandler[DialDevicePicker, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_dial_device_picker_dismissed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_dial_device_selected(self, handler: winrt.windows.foundation.TypedEventHandler[DialDevicePicker, DialDeviceSelectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_dial_device_selected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_disconnect_button_clicked(self, handler: winrt.windows.foundation.TypedEventHandler[DialDevicePicker, DialDisconnectButtonClickedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_disconnect_button_clicked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DialDevicePickerFilter(winrt.system.Object):
    supported_app_names: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialDevicePickerFilter: ...

class DialDeviceSelectedEventArgs(winrt.system.Object):
    selected_dial_device: typing.Optional[DialDevice]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialDeviceSelectedEventArgs: ...

class DialDisconnectButtonClickedEventArgs(winrt.system.Object):
    device: typing.Optional[DialDevice]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialDisconnectButtonClickedEventArgs: ...

class DialReceiverApp(winrt.system.Object):
    current: typing.ClassVar[typing.Optional[DialReceiverApp]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialReceiverApp: ...
    def get_additional_data_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMap[str, str]]: ...
    def get_unique_device_name_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def set_additional_data_async(self, additional_data: typing.Iterable[winrt.windows.foundation.collections.IKeyValuePair[str, str]], /) -> winrt.windows.foundation.IAsyncAction: ...

