// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#pragma once

#include "pybase.h"

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>

#include <winrt/TestComponent.h>

namespace py::proj::TestComponent
{}

namespace py::impl::TestComponent
{
    struct Array10Handler
    {
        static winrt::TestComponent::Array10Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<double>(return_value.get());
            };
        };
    };

    struct Array11Handler
    {
        static winrt::TestComponent::Array11Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<char16_t>(return_value.get());
            };
        };
    };

    struct Array12Handler
    {
        static winrt::TestComponent::Array12Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::hstring>(return_value.get());
            };
        };
    };

    struct Array13Handler
    {
        static winrt::TestComponent::Array13Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::TestComponent::Blittable>(return_value.get());
            };
        };
    };

    struct Array14Handler
    {
        static winrt::TestComponent::Array14Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::TestComponent::NonBlittable>(return_value.get());
            };
        };
    };

    struct Array15Handler
    {
        static winrt::TestComponent::Array15Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::TestComponent::Nested>(return_value.get());
            };
        };
    };

    struct Array1Handler
    {
        static winrt::TestComponent::Array1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<bool>(return_value.get());
            };
        };
    };

    struct Array2Handler
    {
        static winrt::TestComponent::Array2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint8_t>(return_value.get());
            };
        };
    };

    struct Array3Handler
    {
        static winrt::TestComponent::Array3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint16_t>(return_value.get());
            };
        };
    };

    struct Array4Handler
    {
        static winrt::TestComponent::Array4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint32_t>(return_value.get());
            };
        };
    };

    struct Array5Handler
    {
        static winrt::TestComponent::Array5Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint64_t>(return_value.get());
            };
        };
    };

    struct Array6Handler
    {
        static winrt::TestComponent::Array6Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<int16_t>(return_value.get());
            };
        };
    };

    struct Array7Handler
    {
        static winrt::TestComponent::Array7Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<int32_t>(return_value.get());
            };
        };
    };

    struct Array8Handler
    {
        static winrt::TestComponent::Array8Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<int64_t>(return_value.get());
            };
        };
    };

    struct Array9Handler
    {
        static winrt::TestComponent::Array9Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<float>(return_value.get());
            };
        };
    };

    struct Async1Handler
    {
        static winrt::TestComponent::Async1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::IAsyncAction>(return_value.get());
            };
        };
    };

    struct Async2Handler
    {
        static winrt::TestComponent::Async2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::IAsyncActionWithProgress<int32_t>>(return_value.get());
            };
        };
    };

    struct Async3Handler
    {
        static winrt::TestComponent::Async3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::IAsyncOperation<int32_t>>(return_value.get());
            };
        };
    };

    struct Async4Handler
    {
        static winrt::TestComponent::Async4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2, auto param3)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };
                py::pyobj_handle py_param3{ py::convert(param3) };

                py::pyobj_handle args{ PyTuple_Pack(4, py_param0.get(), py_param1.get(), py_param2.get(), py_param3.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::IAsyncOperationWithProgress<int32_t, int32_t>>(return_value.get());
            };
        };
    };

    struct Collection1Handler
    {
        static winrt::TestComponent::Collection1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(return_value.get());
            };
        };
    };

    struct Collection2Handler
    {
        static winrt::TestComponent::Collection2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::hstring>>>(return_value.get());
            };
        };
    };

    struct Collection3Handler
    {
        static winrt::TestComponent::Collection3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::hstring>>(return_value.get());
            };
        };
    };

    struct Collection4Handler
    {
        static winrt::TestComponent::Collection4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(return_value.get());
            };
        };
    };

    struct Collection5Handler
    {
        static winrt::TestComponent::Collection5Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::hstring>>(return_value.get());
            };
        };
    };

    struct Collection6Handler
    {
        static winrt::TestComponent::Collection6Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring>>(return_value.get());
            };
        };
    };

    struct Param10Handler
    {
        static winrt::TestComponent::Param10Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<double>(return_value.get());
            };
        };
    };

    struct Param11Handler
    {
        static winrt::TestComponent::Param11Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<char16_t>(return_value.get());
            };
        };
    };

    struct Param12Handler
    {
        static winrt::TestComponent::Param12Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::hstring>(return_value.get());
            };
        };
    };

    struct Param13Handler
    {
        static winrt::TestComponent::Param13Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::TestComponent::Blittable>(return_value.get());
            };
        };
    };

    struct Param14Handler
    {
        static winrt::TestComponent::Param14Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::TestComponent::NonBlittable>(return_value.get());
            };
        };
    };

    struct Param15Handler
    {
        static winrt::TestComponent::Param15Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1, auto param2)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };
                py::pyobj_handle py_param2{ py::convert(param2) };

                py::pyobj_handle args{ PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::TestComponent::Nested>(return_value.get());
            };
        };
    };

    struct Param1Handler
    {
        static winrt::TestComponent::Param1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<bool>(return_value.get());
            };
        };
    };

    struct Param2Handler
    {
        static winrt::TestComponent::Param2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint8_t>(return_value.get());
            };
        };
    };

    struct Param3Handler
    {
        static winrt::TestComponent::Param3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint16_t>(return_value.get());
            };
        };
    };

    struct Param4Handler
    {
        static winrt::TestComponent::Param4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint32_t>(return_value.get());
            };
        };
    };

    struct Param5Handler
    {
        static winrt::TestComponent::Param5Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<uint64_t>(return_value.get());
            };
        };
    };

    struct Param6Handler
    {
        static winrt::TestComponent::Param6Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<int16_t>(return_value.get());
            };
        };
    };

    struct Param7Handler
    {
        static winrt::TestComponent::Param7Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<int32_t>(return_value.get());
            };
        };
    };

    struct Param8Handler
    {
        static winrt::TestComponent::Param8Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<int64_t>(return_value.get());
            };
        };
    };

    struct Param9Handler
    {
        static winrt::TestComponent::Param9Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };
                py::pyobj_handle py_param1{ py::convert(param1) };

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<float>(return_value.get());
            };
        };
    };

    struct TestHandler
    {
        static winrt::TestComponent::TestHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0)
            {
                winrt::handle_type<py::gil_state_traits> gil_state{ PyGILState_Ensure() };

                py::pyobj_handle py_param0{ py::convert(param0) };

                py::pyobj_handle args{ PyTuple_Pack(1, py_param0.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };
}

namespace py::wrapper::TestComponent
{
    using TestRunner = py::winrt_wrapper<winrt::TestComponent::TestRunner>;
    using ITests = py::winrt_wrapper<winrt::TestComponent::ITests>;
    using Blittable = py::winrt_struct_wrapper<winrt::TestComponent::Blittable>;
    using Nested = py::winrt_struct_wrapper<winrt::TestComponent::Nested>;
    using NonBlittable = py::winrt_struct_wrapper<winrt::TestComponent::NonBlittable>;
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::TestComponent::Blittable> = "T{B:a:H:b:I:c:Q:d:h:e:i:f:q:g:f:h:d:i:T{I2H8B}:j:}";

    template<>
    inline constexpr const char* buffer_format<winrt::TestComponent::Nested> = "T{T{B:a:H:b:I:c:Q:d:h:e:i:f:q:g:f:h:d:i:T{I2H8B}:j:}:blittable:T{?:a:u:b:P:c:q:d:}:non_blittable:}";

    template<>
    inline constexpr const char* buffer_format<winrt::TestComponent::NonBlittable> = "T{?:a:u:b:P:c:q:d:}";


    template<>
    struct winrt_type<winrt::TestComponent::TestRunner>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::TestComponent::ITests>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::TestComponent::Blittable>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::TestComponent::Nested>
    {
        static PyTypeObject* get_python_type() noexcept;
    };

    template<>
    struct winrt_type<winrt::TestComponent::NonBlittable>
    {
        static PyTypeObject* get_python_type() noexcept;
    };
    template <>
    struct delegate_python_type<winrt::TestComponent::Array10Handler>
    {
        using type = py::impl::TestComponent::Array10Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array11Handler>
    {
        using type = py::impl::TestComponent::Array11Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array12Handler>
    {
        using type = py::impl::TestComponent::Array12Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array13Handler>
    {
        using type = py::impl::TestComponent::Array13Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array14Handler>
    {
        using type = py::impl::TestComponent::Array14Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array15Handler>
    {
        using type = py::impl::TestComponent::Array15Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array1Handler>
    {
        using type = py::impl::TestComponent::Array1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array2Handler>
    {
        using type = py::impl::TestComponent::Array2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array3Handler>
    {
        using type = py::impl::TestComponent::Array3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array4Handler>
    {
        using type = py::impl::TestComponent::Array4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array5Handler>
    {
        using type = py::impl::TestComponent::Array5Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array6Handler>
    {
        using type = py::impl::TestComponent::Array6Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array7Handler>
    {
        using type = py::impl::TestComponent::Array7Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array8Handler>
    {
        using type = py::impl::TestComponent::Array8Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array9Handler>
    {
        using type = py::impl::TestComponent::Array9Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async1Handler>
    {
        using type = py::impl::TestComponent::Async1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async2Handler>
    {
        using type = py::impl::TestComponent::Async2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async3Handler>
    {
        using type = py::impl::TestComponent::Async3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async4Handler>
    {
        using type = py::impl::TestComponent::Async4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection1Handler>
    {
        using type = py::impl::TestComponent::Collection1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection2Handler>
    {
        using type = py::impl::TestComponent::Collection2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection3Handler>
    {
        using type = py::impl::TestComponent::Collection3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection4Handler>
    {
        using type = py::impl::TestComponent::Collection4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection5Handler>
    {
        using type = py::impl::TestComponent::Collection5Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection6Handler>
    {
        using type = py::impl::TestComponent::Collection6Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param10Handler>
    {
        using type = py::impl::TestComponent::Param10Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param11Handler>
    {
        using type = py::impl::TestComponent::Param11Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param12Handler>
    {
        using type = py::impl::TestComponent::Param12Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param13Handler>
    {
        using type = py::impl::TestComponent::Param13Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param14Handler>
    {
        using type = py::impl::TestComponent::Param14Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param15Handler>
    {
        using type = py::impl::TestComponent::Param15Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param1Handler>
    {
        using type = py::impl::TestComponent::Param1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param2Handler>
    {
        using type = py::impl::TestComponent::Param2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param3Handler>
    {
        using type = py::impl::TestComponent::Param3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param4Handler>
    {
        using type = py::impl::TestComponent::Param4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param5Handler>
    {
        using type = py::impl::TestComponent::Param5Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param6Handler>
    {
        using type = py::impl::TestComponent::Param6Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param7Handler>
    {
        using type = py::impl::TestComponent::Param7Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param8Handler>
    {
        using type = py::impl::TestComponent::Param8Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param9Handler>
    {
        using type = py::impl::TestComponent::Param9Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::TestHandler>
    {
        using type = py::impl::TestComponent::TestHandler;
    };

    template<>
    struct converter<winrt::TestComponent::Blittable>
    {
        static PyObject* convert(winrt::TestComponent::Blittable instance) noexcept;
        static winrt::TestComponent::Blittable convert_to(PyObject* obj);
    };

    template<>
    struct converter<winrt::TestComponent::Nested>
    {
        static PyObject* convert(winrt::TestComponent::Nested instance) noexcept;
        static winrt::TestComponent::Nested convert_to(PyObject* obj);
    };

    template<>
    struct converter<winrt::TestComponent::NonBlittable>
    {
        static PyObject* convert(winrt::TestComponent::NonBlittable instance) noexcept;
        static winrt::TestComponent::NonBlittable convert_to(PyObject* obj);
    };

}
