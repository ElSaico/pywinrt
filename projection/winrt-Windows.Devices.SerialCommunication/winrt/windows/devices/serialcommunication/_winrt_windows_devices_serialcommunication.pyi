# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt.system
import winrt.windows.foundation
import winrt.windows.storage.streams

from . import SerialError, SerialHandshake, SerialParity, SerialPinChange, SerialStopBitCount

Self = typing.TypeVar('Self')

class ErrorReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ErrorReceivedEventArgs: ...
    @_property
    def error(self) -> SerialError: ...

class PinChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PinChangedEventArgs: ...
    @_property
    def pin_change(self) -> SerialPinChange: ...

class SerialDevice(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SerialDevice: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[SerialDevice]: ...
    @typing.overload
    @staticmethod
    def get_device_selector() -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector(port_name: str, /) -> str: ...
    @staticmethod
    def get_device_selector_from_usb_vid_pid(vendor_id: winrt.system.UInt16, product_id: winrt.system.UInt16, /) -> str: ...
    def add_error_received(self, report_handler: winrt.windows.foundation.TypedEventHandler[SerialDevice, ErrorReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_error_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pin_changed(self, report_handler: winrt.windows.foundation.TypedEventHandler[SerialDevice, PinChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pin_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_data_terminal_ready_enabled(self) -> bool: ...
    @is_data_terminal_ready_enabled.setter
    def is_data_terminal_ready_enabled(self, value: bool) -> None: ...
    @_property
    def data_bits(self) -> winrt.system.UInt16: ...
    @data_bits.setter
    def data_bits(self, value: winrt.system.UInt16) -> None: ...
    @_property
    def handshake(self) -> SerialHandshake: ...
    @handshake.setter
    def handshake(self, value: SerialHandshake) -> None: ...
    @_property
    def break_signal_state(self) -> bool: ...
    @break_signal_state.setter
    def break_signal_state(self, value: bool) -> None: ...
    @_property
    def baud_rate(self) -> winrt.system.UInt32: ...
    @baud_rate.setter
    def baud_rate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def write_timeout(self) -> datetime.timedelta: ...
    @write_timeout.setter
    def write_timeout(self, value: datetime.timedelta) -> None: ...
    @_property
    def stop_bits(self) -> SerialStopBitCount: ...
    @stop_bits.setter
    def stop_bits(self, value: SerialStopBitCount) -> None: ...
    @_property
    def read_timeout(self) -> datetime.timedelta: ...
    @read_timeout.setter
    def read_timeout(self, value: datetime.timedelta) -> None: ...
    @_property
    def parity(self) -> SerialParity: ...
    @parity.setter
    def parity(self, value: SerialParity) -> None: ...
    @_property
    def is_request_to_send_enabled(self) -> bool: ...
    @is_request_to_send_enabled.setter
    def is_request_to_send_enabled(self, value: bool) -> None: ...
    @_property
    def bytes_received(self) -> winrt.system.UInt32: ...
    @_property
    def carrier_detect_state(self) -> bool: ...
    @_property
    def clear_to_send_state(self) -> bool: ...
    @_property
    def data_set_ready_state(self) -> bool: ...
    @_property
    def input_stream(self) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...
    @_property
    def output_stream(self) -> typing.Optional[winrt.windows.storage.streams.IOutputStream]: ...
    @_property
    def port_name(self) -> str: ...
    @_property
    def usb_product_id(self) -> winrt.system.UInt16: ...
    @_property
    def usb_vendor_id(self) -> winrt.system.UInt16: ...

