# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.composition
import winrt.windows.ui.input
import winrt.windows.ui.popups

from . import AppViewBackButtonVisibility, CoreAcceleratorKeyEventType, CoreCursorType, CoreDispatcherPriority, CoreIndependentInputFilters, CoreInputDeviceTypes, CoreProcessEventsOption, CoreProximityEvaluationScore, CoreVirtualKeyStates, CoreWindowActivationMode, CoreWindowActivationState, CoreWindowFlowDirection
from . import DispatchedHandler, IdleDispatchedHandler

Self = typing.TypeVar('Self')

class CorePhysicalKeyStatus:
    repeat_count: winrt.system.UInt32
    scan_code: winrt.system.UInt32
    is_extended_key: bool
    is_menu_key_down: bool
    was_key_down: bool
    is_key_released: bool
    def __new__(cls: typing.Type[CorePhysicalKeyStatus], repeat_count: winrt.system.UInt32, scan_code: winrt.system.UInt32, is_extended_key: bool, is_menu_key_down: bool, was_key_down: bool, is_key_released: bool) -> CorePhysicalKeyStatus: ...

class CoreProximityEvaluation:
    score: winrt.system.Int32
    adjusted_point: winrt.windows.foundation.Point
    def __new__(cls: typing.Type[CoreProximityEvaluation], score: winrt.system.Int32, adjusted_point: winrt.windows.foundation.Point) -> CoreProximityEvaluation: ...

class AcceleratorKeyEventArgs(winrt.system.Object):
    event_type: CoreAcceleratorKeyEventType
    key_status: CorePhysicalKeyStatus
    virtual_key: winrt.windows.system.VirtualKey
    device_id: str
    handled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AcceleratorKeyEventArgs: ...

class AutomationProviderRequestedEventArgs(winrt.system.Object):
    automation_provider: typing.Optional[winrt.system.Object]
    handled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AutomationProviderRequestedEventArgs: ...

class BackRequestedEventArgs(winrt.system.Object):
    handled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackRequestedEventArgs: ...

class CharacterReceivedEventArgs(winrt.system.Object):
    key_code: winrt.system.UInt32
    key_status: CorePhysicalKeyStatus
    handled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CharacterReceivedEventArgs: ...

class ClosestInteractiveBoundsRequestedEventArgs(winrt.system.Object):
    closest_interactive_bounds: winrt.windows.foundation.Rect
    pointer_position: winrt.windows.foundation.Point
    search_bounds: winrt.windows.foundation.Rect
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClosestInteractiveBoundsRequestedEventArgs: ...

class CoreAcceleratorKeys(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreAcceleratorKeys: ...
    def add_accelerator_key_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreDispatcher, AcceleratorKeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreComponentInputSource(winrt.system.Object):
    has_focus: bool
    is_input_enabled: bool
    dispatcher: typing.Optional[CoreDispatcher]
    pointer_cursor: typing.Optional[CoreCursor]
    has_capture: bool
    pointer_position: winrt.windows.foundation.Point
    dispatcher_queue: typing.Optional[winrt.windows.system.DispatcherQueue]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreComponentInputSource: ...
    def get_current_key_event_device_id(self) -> str: ...
    def get_current_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CharacterReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_character_received(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_down(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_up(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_got_focus(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_got_focus(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_lost_focus(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_lost_focus(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_touch_hit_testing(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, TouchHitTestingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_touch_hit_testing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closest_interactive_bounds_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreComponentInputSource, ClosestInteractiveBoundsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closest_interactive_bounds_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreCursor(winrt.system.Object):
    id: winrt.system.UInt32
    type: CoreCursorType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreCursor: ...
    def __new__(cls: typing.Type[CoreCursor], type: CoreCursorType, id: winrt.system.UInt32) -> CoreCursor:...

class CoreDispatcher(winrt.system.Object):
    has_thread_access: bool
    current_priority: CoreDispatcherPriority
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreDispatcher: ...
    def process_events(self, options: CoreProcessEventsOption, /) -> None: ...
    def run_async(self, priority: CoreDispatcherPriority, agile_callback: typing.Optional[DispatchedHandler], /) -> winrt.windows.foundation.IAsyncAction: ...
    def run_idle_async(self, agile_callback: typing.Optional[IdleDispatchedHandler], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def should_yield(self) -> bool: ...
    @typing.overload
    def should_yield(self, priority: CoreDispatcherPriority, /) -> bool: ...
    def stop_process_events(self) -> None: ...
    def try_run_async(self, priority: CoreDispatcherPriority, agile_callback: typing.Optional[DispatchedHandler], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_run_idle_async(self, agile_callback: typing.Optional[IdleDispatchedHandler], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_accelerator_key_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreDispatcher, AcceleratorKeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreIndependentInputSource(winrt.system.Object):
    is_input_enabled: bool
    dispatcher: typing.Optional[CoreDispatcher]
    pointer_cursor: typing.Optional[CoreCursor]
    has_capture: bool
    pointer_position: winrt.windows.foundation.Point
    dispatcher_queue: typing.Optional[winrt.windows.system.DispatcherQueue]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreIndependentInputSource: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_away(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_away(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_released(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_to(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_to(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreIndependentInputSourceController(winrt.system.Object):
    is_transparent_for_uncontrolled_input: bool
    is_palm_rejection_enabled: bool
    source: typing.Optional[CoreIndependentInputSource]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreIndependentInputSourceController: ...
    def close(self) -> None: ...
    @staticmethod
    def create_for_i_visual_element(visual_element: typing.Optional[winrt.windows.ui.composition.IVisualElement], /) -> typing.Optional[CoreIndependentInputSourceController]: ...
    @staticmethod
    def create_for_visual(visual: typing.Optional[winrt.windows.ui.composition.Visual], /) -> typing.Optional[CoreIndependentInputSourceController]: ...
    @typing.overload
    def set_controlled_input(self, input_types: CoreInputDeviceTypes, /) -> None: ...
    @typing.overload
    def set_controlled_input(self, input_types: CoreInputDeviceTypes, required: CoreIndependentInputFilters, excluded: CoreIndependentInputFilters, /) -> None: ...

class CoreWindow(winrt.system.Object):
    pointer_position: winrt.windows.foundation.Point
    pointer_cursor: typing.Optional[CoreCursor]
    flow_direction: CoreWindowFlowDirection
    is_input_enabled: bool
    dispatcher: typing.Optional[CoreDispatcher]
    automation_host_provider: typing.Optional[winrt.system.Object]
    bounds: winrt.windows.foundation.Rect
    custom_properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    visible: bool
    activation_mode: CoreWindowActivationMode
    dispatcher_queue: typing.Optional[winrt.windows.system.DispatcherQueue]
    u_i_context: typing.Optional[winrt.windows.ui.UIContext]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindow: ...
    def activate(self) -> None: ...
    def close(self) -> None: ...
    def get_async_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def get_current_key_event_device_id(self) -> str: ...
    @staticmethod
    def get_for_current_thread() -> typing.Optional[CoreWindow]: ...
    def get_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_automation_provider_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, AutomationProviderRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_automation_provider_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CharacterReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_character_received(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_down(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_up(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowSizeChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_size_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_touch_hit_testing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, TouchHitTestingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_touch_hit_testing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_visibility_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, VisibilityChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_visibility_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_away(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_away(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_released(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_to(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_to(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closest_interactive_bounds_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, ClosestInteractiveBoundsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closest_interactive_bounds_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_resize_completed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resize_completed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_resize_started(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resize_started(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreWindowDialog(winrt.system.Object):
    title: str
    is_interaction_delayed: winrt.system.Int32
    default_command_index: winrt.system.UInt32
    cancel_command_index: winrt.system.UInt32
    back_button_command: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]
    commands: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.popups.IUICommand]]
    max_size: winrt.windows.foundation.Size
    min_size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowDialog: ...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowDialog], title: str) -> CoreWindowDialog:...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowDialog]) -> CoreWindowDialog:...
    def show_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.ui.popups.IUICommand]: ...
    def add_showing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowPopupShowingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_showing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreWindowEventArgs(winrt.system.Object):
    handled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowEventArgs: ...

class CoreWindowFlyout(winrt.system.Object):
    title: str
    is_interaction_delayed: winrt.system.Int32
    default_command_index: winrt.system.UInt32
    back_button_command: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]
    commands: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.popups.IUICommand]]
    max_size: winrt.windows.foundation.Size
    min_size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowFlyout: ...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowFlyout], position: winrt.windows.foundation.Point) -> CoreWindowFlyout:...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowFlyout], position: winrt.windows.foundation.Point, title: str) -> CoreWindowFlyout:...
    def show_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.ui.popups.IUICommand]: ...
    def add_showing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowPopupShowingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_showing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreWindowPopupShowingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowPopupShowingEventArgs: ...
    def set_desired_size(self, value: winrt.windows.foundation.Size, /) -> None: ...

class CoreWindowResizeManager(winrt.system.Object):
    should_wait_for_layout_completion: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowResizeManager: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[CoreWindowResizeManager]: ...
    def notify_layout_completed(self) -> None: ...

class IdleDispatchedHandlerArgs(winrt.system.Object):
    is_dispatcher_idle: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IdleDispatchedHandlerArgs: ...

class InputEnabledEventArgs(winrt.system.Object):
    handled: bool
    input_enabled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InputEnabledEventArgs: ...

class KeyEventArgs(winrt.system.Object):
    handled: bool
    key_status: CorePhysicalKeyStatus
    virtual_key: winrt.windows.system.VirtualKey
    device_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyEventArgs: ...

class PointerEventArgs(winrt.system.Object):
    handled: bool
    current_point: typing.Optional[winrt.windows.ui.input.PointerPoint]
    key_modifiers: winrt.windows.system.VirtualKeyModifiers
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointerEventArgs: ...
    def get_intermediate_points(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.input.PointerPoint]]: ...

class SystemNavigationManager(winrt.system.Object):
    app_view_back_button_visibility: AppViewBackButtonVisibility
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemNavigationManager: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[SystemNavigationManager]: ...
    def add_back_requested(self, handler: winrt.windows.foundation.EventHandler[BackRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_back_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class TouchHitTestingEventArgs(winrt.system.Object):
    handled: bool
    proximity_evaluation: CoreProximityEvaluation
    bounding_box: winrt.windows.foundation.Rect
    point: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TouchHitTestingEventArgs: ...
    def evaluate_proximity(self, control_bounding_box: winrt.windows.foundation.Rect, /) -> CoreProximityEvaluation: ...

class VisibilityChangedEventArgs(winrt.system.Object):
    handled: bool
    visible: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisibilityChangedEventArgs: ...

class WindowActivatedEventArgs(winrt.system.Object):
    handled: bool
    window_activation_state: CoreWindowActivationState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowActivatedEventArgs: ...

class WindowSizeChangedEventArgs(winrt.system.Object):
    handled: bool
    size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowSizeChangedEventArgs: ...

class ICoreAcceleratorKeys(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreAcceleratorKeys: ...
    def add_accelerator_key_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreDispatcher, AcceleratorKeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ICoreInputSourceBase(winrt.system.Object):
    dispatcher: typing.Optional[CoreDispatcher]
    is_input_enabled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreInputSourceBase: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ICorePointerInputSource(winrt.system.Object):
    has_capture: bool
    pointer_cursor: typing.Optional[CoreCursor]
    pointer_position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICorePointerInputSource: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ICorePointerInputSource2(winrt.system.Object):
    dispatcher_queue: typing.Optional[winrt.windows.system.DispatcherQueue]
    has_capture: bool
    pointer_cursor: typing.Optional[CoreCursor]
    pointer_position: winrt.windows.foundation.Point
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICorePointerInputSource2: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ICorePointerRedirector(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICorePointerRedirector: ...
    def add_pointer_routed_away(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_away(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_released(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_to(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_to(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ICoreWindow(winrt.system.Object):
    automation_host_provider: typing.Optional[winrt.system.Object]
    bounds: winrt.windows.foundation.Rect
    custom_properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    dispatcher: typing.Optional[CoreDispatcher]
    flow_direction: CoreWindowFlowDirection
    is_input_enabled: bool
    pointer_cursor: typing.Optional[CoreCursor]
    pointer_position: winrt.windows.foundation.Point
    visible: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreWindow: ...
    def activate(self) -> None: ...
    def close(self) -> None: ...
    def get_async_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def get_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_automation_provider_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, AutomationProviderRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_automation_provider_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CharacterReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_character_received(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_down(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_up(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowSizeChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_size_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_touch_hit_testing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, TouchHitTestingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_touch_hit_testing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_visibility_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, VisibilityChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_visibility_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ICoreWindowEventArgs(winrt.system.Object):
    handled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreWindowEventArgs: ...

class IInitializeWithCoreWindow(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IInitializeWithCoreWindow: ...
    def initialize(self, window: typing.Optional[CoreWindow], /) -> None: ...

