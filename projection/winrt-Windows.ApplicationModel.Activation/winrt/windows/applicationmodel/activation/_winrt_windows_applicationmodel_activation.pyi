# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.applicationmodel.appointments.appointmentsprovider
import winrt.windows.applicationmodel.background
import winrt.windows.applicationmodel.calls
import winrt.windows.applicationmodel.contacts
import winrt.windows.applicationmodel.contacts.provider
import winrt.windows.applicationmodel.datatransfer.sharetarget
import winrt.windows.applicationmodel.search
import winrt.windows.applicationmodel.userdataaccounts.provider
import winrt.windows.applicationmodel.wallet
import winrt.windows.devices.enumeration
import winrt.windows.devices.printers.extensions
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.speechrecognition
import winrt.windows.security.authentication.web
import winrt.windows.security.authentication.web.provider
import winrt.windows.storage
import winrt.windows.storage.pickers.provider
import winrt.windows.storage.provider
import winrt.windows.storage.search
import winrt.windows.system
import winrt.windows.ui.notifications
import winrt.windows.ui.viewmanagement

from . import ActivationKind, ApplicationExecutionState

Self = typing.TypeVar('Self')

class AppointmentsProviderAddAppointmentActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    add_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentsProviderAddAppointmentActivatedEventArgs: ...

class AppointmentsProviderRemoveAppointmentActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    remove_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class AppointmentsProviderReplaceAppointmentActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    replace_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class AppointmentsProviderShowAppointmentDetailsActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    instance_start_date: typing.Optional[typing.Optional[datetime.datetime]]
    local_id: str
    roaming_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class AppointmentsProviderShowTimeFrameActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    duration: datetime.timedelta
    time_to_show: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class BackgroundActivatedEventArgs(winrt.system.Object):
    task_instance: typing.Optional[winrt.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundActivatedEventArgs: ...

class BarcodeScannerPreviewActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    connection_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BarcodeScannerPreviewActivatedEventArgs: ...

class CachedFileUpdaterActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    cached_file_updater_u_i: typing.Optional[winrt.windows.storage.provider.CachedFileUpdaterUI]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CachedFileUpdaterActivatedEventArgs: ...

class CameraSettingsActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    video_device_controller: typing.Optional[winrt.system.Object]
    video_device_extension: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CameraSettingsActivatedEventArgs: ...

class CommandLineActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    operation: typing.Optional[CommandLineActivationOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandLineActivatedEventArgs: ...

class CommandLineActivationOperation(winrt.system.Object):
    exit_code: winrt.system.Int32
    arguments: str
    current_directory_path: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandLineActivationOperation: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class ContactCallActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactCallActivatedEventArgs: ...

class ContactMapActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    address: typing.Optional[winrt.windows.applicationmodel.contacts.ContactAddress]
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactMapActivatedEventArgs: ...

class ContactMessageActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactMessageActivatedEventArgs: ...

class ContactPanelActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winrt.windows.applicationmodel.contacts.ContactPanel]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPanelActivatedEventArgs: ...

class ContactPickerActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    contact_picker_u_i: typing.Optional[winrt.windows.applicationmodel.contacts.provider.ContactPickerUI]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPickerActivatedEventArgs: ...

class ContactPostActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPostActivatedEventArgs: ...

class ContactVideoCallActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactVideoCallActivatedEventArgs: ...

class DeviceActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    device_information_id: str
    verb: str
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceActivatedEventArgs: ...

class DevicePairingActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    device_information: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DevicePairingActivatedEventArgs: ...

class DialReceiverActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    app_name: str
    arguments: str
    tile_id: str
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DialReceiverActivatedEventArgs: ...

class FileActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]
    verb: str
    caller_package_family_name: str
    neighboring_files_query: typing.Optional[winrt.windows.storage.search.StorageFileQueryResult]
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileActivatedEventArgs: ...

class FileOpenPickerActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    file_open_picker_u_i: typing.Optional[winrt.windows.storage.pickers.provider.FileOpenPickerUI]
    caller_package_family_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileOpenPickerActivatedEventArgs: ...

class FileOpenPickerContinuationEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileOpenPickerContinuationEventArgs: ...

class FileSavePickerActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    file_save_picker_u_i: typing.Optional[winrt.windows.storage.pickers.provider.FileSavePickerUI]
    caller_package_family_name: str
    enterprise_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileSavePickerActivatedEventArgs: ...

class FileSavePickerContinuationEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    file: typing.Optional[winrt.windows.storage.StorageFile]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileSavePickerContinuationEventArgs: ...

class FolderPickerContinuationEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    folder: typing.Optional[winrt.windows.storage.StorageFolder]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FolderPickerContinuationEventArgs: ...

class LaunchActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    arguments: str
    tile_id: str
    tile_activated_info: typing.Optional[TileActivatedInfo]
    prelaunch_activated: winrt.system.Boolean
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LaunchActivatedEventArgs: ...

class LockScreenActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    info: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LockScreenActivatedEventArgs: ...

class LockScreenCallActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    currently_shown_application_view_id: winrt.system.Int32
    arguments: str
    tile_id: str
    call_u_i: typing.Optional[winrt.windows.applicationmodel.calls.LockScreenCallUI]
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LockScreenCallActivatedEventArgs: ...

class LockScreenComponentActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LockScreenComponentActivatedEventArgs: ...

class PhoneCallActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    line_id: winrt.system.Guid
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneCallActivatedEventArgs: ...

class PickerReturnedActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    picker_operation_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerReturnedActivatedEventArgs: ...

class Print3DWorkflowActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    workflow: typing.Optional[winrt.windows.devices.printers.extensions.Print3DWorkflow]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Print3DWorkflowActivatedEventArgs: ...

class PrintTaskSettingsActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    configuration: typing.Optional[winrt.windows.devices.printers.extensions.PrintTaskConfiguration]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrintTaskSettingsActivatedEventArgs: ...

class ProtocolActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    uri: typing.Optional[winrt.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProtocolActivatedEventArgs: ...

class ProtocolForResultsActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    uri: typing.Optional[winrt.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    protocol_for_results_operation: typing.Optional[winrt.windows.system.ProtocolForResultsOperation]
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProtocolForResultsActivatedEventArgs: ...

class RestrictedLaunchActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    shared_context: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RestrictedLaunchActivatedEventArgs: ...

class SearchActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    language: str
    query_text: str
    linguistic_details: typing.Optional[winrt.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SearchActivatedEventArgs: ...

class ShareTargetActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    share_operation: typing.Optional[winrt.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareTargetActivatedEventArgs: ...

class SplashScreen(winrt.system.Object):
    image_location: winrt.windows.foundation.Rect
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplashScreen: ...
    def add_dismissed(self, handler: winrt.windows.foundation.TypedEventHandler[SplashScreen, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_dismissed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class StartupTaskActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    task_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StartupTaskActivatedEventArgs: ...

class TileActivatedInfo(winrt.system.Object):
    recently_shown_notifications: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.ui.notifications.ShownTileNotification]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TileActivatedInfo: ...

class ToastNotificationActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    argument: str
    user_input: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToastNotificationActivatedEventArgs: ...

class UserDataAccountProviderActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    operation: typing.Optional[winrt.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataAccountProviderActivatedEventArgs: ...

class VoiceCommandActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    result: typing.Optional[winrt.windows.media.speechrecognition.SpeechRecognitionResult]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VoiceCommandActivatedEventArgs: ...

class WalletActionActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    action_id: str
    action_kind: winrt.windows.applicationmodel.wallet.WalletActionKind
    item_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WalletActionActivatedEventArgs: ...

class WebAccountProviderActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    operation: typing.Optional[winrt.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountProviderActivatedEventArgs: ...

class WebAuthenticationBrokerContinuationEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    web_authentication_result: typing.Optional[winrt.windows.security.authentication.web.WebAuthenticationResult]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAuthenticationBrokerContinuationEventArgs: ...

class IActivatedEventArgs(winrt.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IActivatedEventArgs: ...

class IActivatedEventArgsWithUser(winrt.system.Object):
    user: typing.Optional[winrt.windows.system.User]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IActivatedEventArgsWithUser: ...

class IApplicationViewActivatedEventArgs(winrt.system.Object):
    currently_shown_application_view_id: winrt.system.Int32
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IApplicationViewActivatedEventArgs: ...

class IAppointmentsProviderActivatedEventArgs(winrt.system.Object):
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAppointmentsProviderActivatedEventArgs: ...

class IAppointmentsProviderAddAppointmentActivatedEventArgs(winrt.system.Object):
    add_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAppointmentsProviderAddAppointmentActivatedEventArgs: ...

class IAppointmentsProviderRemoveAppointmentActivatedEventArgs(winrt.system.Object):
    remove_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class IAppointmentsProviderReplaceAppointmentActivatedEventArgs(winrt.system.Object):
    replace_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(winrt.system.Object):
    instance_start_date: typing.Optional[typing.Optional[datetime.datetime]]
    local_id: str
    roaming_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class IAppointmentsProviderShowTimeFrameActivatedEventArgs(winrt.system.Object):
    duration: datetime.timedelta
    time_to_show: datetime.datetime
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class IBackgroundActivatedEventArgs(winrt.system.Object):
    task_instance: typing.Optional[winrt.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundActivatedEventArgs: ...

class IBarcodeScannerPreviewActivatedEventArgs(winrt.system.Object):
    connection_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBarcodeScannerPreviewActivatedEventArgs: ...

class ICachedFileUpdaterActivatedEventArgs(winrt.system.Object):
    cached_file_updater_u_i: typing.Optional[winrt.windows.storage.provider.CachedFileUpdaterUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICachedFileUpdaterActivatedEventArgs: ...

class ICameraSettingsActivatedEventArgs(winrt.system.Object):
    video_device_controller: typing.Optional[winrt.system.Object]
    video_device_extension: typing.Optional[winrt.system.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICameraSettingsActivatedEventArgs: ...

class ICommandLineActivatedEventArgs(winrt.system.Object):
    operation: typing.Optional[CommandLineActivationOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICommandLineActivatedEventArgs: ...

class IContactActivatedEventArgs(winrt.system.Object):
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactActivatedEventArgs: ...

class IContactCallActivatedEventArgs(winrt.system.Object):
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactCallActivatedEventArgs: ...

class IContactMapActivatedEventArgs(winrt.system.Object):
    address: typing.Optional[winrt.windows.applicationmodel.contacts.ContactAddress]
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactMapActivatedEventArgs: ...

class IContactMessageActivatedEventArgs(winrt.system.Object):
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactMessageActivatedEventArgs: ...

class IContactPanelActivatedEventArgs(winrt.system.Object):
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winrt.windows.applicationmodel.contacts.ContactPanel]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactPanelActivatedEventArgs: ...

class IContactPickerActivatedEventArgs(winrt.system.Object):
    contact_picker_u_i: typing.Optional[winrt.windows.applicationmodel.contacts.provider.ContactPickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactPickerActivatedEventArgs: ...

class IContactPostActivatedEventArgs(winrt.system.Object):
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactPostActivatedEventArgs: ...

class IContactVideoCallActivatedEventArgs(winrt.system.Object):
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactVideoCallActivatedEventArgs: ...

class IContactsProviderActivatedEventArgs(winrt.system.Object):
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactsProviderActivatedEventArgs: ...

class IContinuationActivatedEventArgs(winrt.system.Object):
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContinuationActivatedEventArgs: ...

class IDeviceActivatedEventArgs(winrt.system.Object):
    device_information_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IDeviceActivatedEventArgs: ...

class IDevicePairingActivatedEventArgs(winrt.system.Object):
    device_information: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IDevicePairingActivatedEventArgs: ...

class IDialReceiverActivatedEventArgs(winrt.system.Object):
    app_name: str
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IDialReceiverActivatedEventArgs: ...

class IFileActivatedEventArgs(winrt.system.Object):
    files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileActivatedEventArgs: ...

class IFileActivatedEventArgsWithCallerPackageFamilyName(winrt.system.Object):
    caller_package_family_name: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileActivatedEventArgsWithCallerPackageFamilyName: ...

class IFileActivatedEventArgsWithNeighboringFiles(winrt.system.Object):
    neighboring_files_query: typing.Optional[winrt.windows.storage.search.StorageFileQueryResult]
    files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileActivatedEventArgsWithNeighboringFiles: ...

class IFileOpenPickerActivatedEventArgs(winrt.system.Object):
    file_open_picker_u_i: typing.Optional[winrt.windows.storage.pickers.provider.FileOpenPickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileOpenPickerActivatedEventArgs: ...

class IFileOpenPickerActivatedEventArgs2(winrt.system.Object):
    caller_package_family_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileOpenPickerActivatedEventArgs2: ...

class IFileOpenPickerContinuationEventArgs(winrt.system.Object):
    files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileOpenPickerContinuationEventArgs: ...

class IFileSavePickerActivatedEventArgs(winrt.system.Object):
    file_save_picker_u_i: typing.Optional[winrt.windows.storage.pickers.provider.FileSavePickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileSavePickerActivatedEventArgs: ...

class IFileSavePickerActivatedEventArgs2(winrt.system.Object):
    caller_package_family_name: str
    enterprise_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileSavePickerActivatedEventArgs2: ...

class IFileSavePickerContinuationEventArgs(winrt.system.Object):
    file: typing.Optional[winrt.windows.storage.StorageFile]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileSavePickerContinuationEventArgs: ...

class IFolderPickerContinuationEventArgs(winrt.system.Object):
    folder: typing.Optional[winrt.windows.storage.StorageFolder]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFolderPickerContinuationEventArgs: ...

class ILaunchActivatedEventArgs(winrt.system.Object):
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILaunchActivatedEventArgs: ...

class ILaunchActivatedEventArgs2(winrt.system.Object):
    tile_activated_info: typing.Optional[TileActivatedInfo]
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILaunchActivatedEventArgs2: ...

class ILockScreenActivatedEventArgs(winrt.system.Object):
    info: typing.Optional[winrt.system.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILockScreenActivatedEventArgs: ...

class ILockScreenCallActivatedEventArgs(winrt.system.Object):
    call_u_i: typing.Optional[winrt.windows.applicationmodel.calls.LockScreenCallUI]
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILockScreenCallActivatedEventArgs: ...

class IPhoneCallActivatedEventArgs(winrt.system.Object):
    line_id: winrt.system.Guid
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPhoneCallActivatedEventArgs: ...

class IPickerReturnedActivatedEventArgs(winrt.system.Object):
    picker_operation_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPickerReturnedActivatedEventArgs: ...

class IPrelaunchActivatedEventArgs(winrt.system.Object):
    prelaunch_activated: winrt.system.Boolean
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPrelaunchActivatedEventArgs: ...

class IPrint3DWorkflowActivatedEventArgs(winrt.system.Object):
    workflow: typing.Optional[winrt.windows.devices.printers.extensions.Print3DWorkflow]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPrint3DWorkflowActivatedEventArgs: ...

class IPrintTaskSettingsActivatedEventArgs(winrt.system.Object):
    configuration: typing.Optional[winrt.windows.devices.printers.extensions.PrintTaskConfiguration]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPrintTaskSettingsActivatedEventArgs: ...

class IProtocolActivatedEventArgs(winrt.system.Object):
    uri: typing.Optional[winrt.windows.foundation.Uri]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IProtocolActivatedEventArgs: ...

class IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData(winrt.system.Object):
    caller_package_family_name: str
    data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData: ...

class IProtocolForResultsActivatedEventArgs(winrt.system.Object):
    protocol_for_results_operation: typing.Optional[winrt.windows.system.ProtocolForResultsOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IProtocolForResultsActivatedEventArgs: ...

class IRestrictedLaunchActivatedEventArgs(winrt.system.Object):
    shared_context: typing.Optional[winrt.system.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IRestrictedLaunchActivatedEventArgs: ...

class ISearchActivatedEventArgs(winrt.system.Object):
    language: str
    query_text: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ISearchActivatedEventArgs: ...

class ISearchActivatedEventArgsWithLinguisticDetails(winrt.system.Object):
    linguistic_details: typing.Optional[winrt.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ISearchActivatedEventArgsWithLinguisticDetails: ...

class IShareTargetActivatedEventArgs(winrt.system.Object):
    share_operation: typing.Optional[winrt.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IShareTargetActivatedEventArgs: ...

class IStartupTaskActivatedEventArgs(winrt.system.Object):
    task_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IStartupTaskActivatedEventArgs: ...

class IToastNotificationActivatedEventArgs(winrt.system.Object):
    argument: str
    user_input: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IToastNotificationActivatedEventArgs: ...

class IUserDataAccountProviderActivatedEventArgs(winrt.system.Object):
    operation: typing.Optional[winrt.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IUserDataAccountProviderActivatedEventArgs: ...

class IViewSwitcherProvider(winrt.system.Object):
    view_switcher: typing.Optional[winrt.windows.ui.viewmanagement.ActivationViewSwitcher]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IViewSwitcherProvider: ...

class IVoiceCommandActivatedEventArgs(winrt.system.Object):
    result: typing.Optional[winrt.windows.media.speechrecognition.SpeechRecognitionResult]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IVoiceCommandActivatedEventArgs: ...

class IWalletActionActivatedEventArgs(winrt.system.Object):
    action_id: str
    action_kind: winrt.windows.applicationmodel.wallet.WalletActionKind
    item_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWalletActionActivatedEventArgs: ...

class IWebAccountProviderActivatedEventArgs(winrt.system.Object):
    operation: typing.Optional[winrt.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebAccountProviderActivatedEventArgs: ...

class IWebAuthenticationBrokerContinuationEventArgs(winrt.system.Object):
    web_authentication_result: typing.Optional[winrt.windows.security.authentication.web.WebAuthenticationResult]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebAuthenticationBrokerContinuationEventArgs: ...

