# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

class IndexedResourceType(enum.IntEnum):
    STRING = 0
    PATH = 1
    EMBEDDED_DATA = 2

Self = typing.TypeVar('Self')

class IndexedResourceCandidate(winrt.system.Object):
    metadata: typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]
    qualifiers: typing.Optional[winrt.windows.foundation.collections.IVectorView[IndexedResourceQualifier]]
    type: IndexedResourceType
    uri: typing.Optional[winrt.windows.foundation.Uri]
    value_as_string: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IndexedResourceCandidate: ...
    def get_qualifier_value(self, qualifier_name: str, /) -> str: ...

class IndexedResourceQualifier(winrt.system.Object):
    qualifier_name: str
    qualifier_value: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IndexedResourceQualifier: ...

class ResourceIndexer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceIndexer: ...
    @typing.overload
    def __new__(cls: typing.Type[ResourceIndexer], project_root: typing.Optional[winrt.windows.foundation.Uri], extension_dll_path: typing.Optional[winrt.windows.foundation.Uri]) -> ResourceIndexer:...
    @typing.overload
    def __new__(cls: typing.Type[ResourceIndexer], project_root: typing.Optional[winrt.windows.foundation.Uri]) -> ResourceIndexer:...
    def index_file_contents_async(self, file: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[IndexedResourceCandidate]]: ...
    def index_file_path(self, file_path: typing.Optional[winrt.windows.foundation.Uri], /) -> typing.Optional[IndexedResourceCandidate]: ...

