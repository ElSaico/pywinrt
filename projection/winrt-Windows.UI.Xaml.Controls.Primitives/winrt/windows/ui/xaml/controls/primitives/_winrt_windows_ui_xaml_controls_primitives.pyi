# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.foundation.numerics
import winrt.windows.ui
import winrt.windows.ui.xaml
import winrt.windows.ui.xaml.controls
import winrt.windows.ui.xaml.input
import winrt.windows.ui.xaml.interop
import winrt.windows.ui.xaml.media
import winrt.windows.ui.xaml.media.animation

from . import AnimationDirection, ComponentResourceLocation, EdgeTransitionLocation, FlyoutPlacementMode, FlyoutShowMode, GeneratorDirection, GroupHeaderPlacement, ListViewItemPresenterCheckMode, ListViewItemPresenterSelectionIndicatorMode, PlacementMode, PopupPlacementMode, ScrollEventType, ScrollingIndicatorMode, SliderSnapsTo, SnapPointsAlignment, TickPlacement
from . import DragCompletedEventHandler, DragDeltaEventHandler, DragStartedEventHandler, ItemsChangedEventHandler, RangeBaseValueChangedEventHandler, ScrollEventHandler

Self = typing.TypeVar('Self')

class GeneratorPosition:
    index: winrt.system.Int32
    offset: winrt.system.Int32
    def __new__(cls: typing.Type[GeneratorPosition], index: winrt.system.Int32, offset: winrt.system.Int32) -> GeneratorPosition: ...

class AppBarButtonTemplateSettings(winrt.system.Object):
    keyboard_accelerator_text_min_width: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarButtonTemplateSettings: ...

class AppBarTemplateSettings(winrt.system.Object):
    clip_rect: winrt.windows.foundation.Rect
    compact_root_margin: winrt.windows.ui.xaml.Thickness
    compact_vertical_delta: winrt.system.Double
    hidden_root_margin: winrt.windows.ui.xaml.Thickness
    hidden_vertical_delta: winrt.system.Double
    minimal_root_margin: winrt.windows.ui.xaml.Thickness
    minimal_vertical_delta: winrt.system.Double
    negative_compact_vertical_delta: winrt.system.Double
    negative_hidden_vertical_delta: winrt.system.Double
    negative_minimal_vertical_delta: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarTemplateSettings: ...

class AppBarToggleButtonTemplateSettings(winrt.system.Object):
    keyboard_accelerator_text_min_width: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarToggleButtonTemplateSettings: ...

class ButtonBase(winrt.system.Object):
    command_parameter: typing.Optional[winrt.system.Object]
    command: typing.Optional[winrt.windows.ui.xaml.input.ICommand]
    click_mode: winrt.windows.ui.xaml.controls.ClickMode
    is_pointer_over: winrt.system.Boolean
    is_pressed: winrt.system.Boolean
    click_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    command_parameter_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    command_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_pointer_over_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_pressed_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ButtonBase: ...
    def add_click(self, handler: typing.Optional[winrt.windows.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_click(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CalendarPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarPanel: ...
    def __new__(cls: typing.Type[CalendarPanel]) -> CalendarPanel:...

class CalendarViewTemplateSettings(winrt.system.Object):
    center_x: winrt.system.Double
    center_y: winrt.system.Double
    clip_rect: winrt.windows.foundation.Rect
    has_more_content_after: winrt.system.Boolean
    has_more_content_before: winrt.system.Boolean
    has_more_views: winrt.system.Boolean
    header_text: str
    min_view_width: winrt.system.Double
    week_day1: str
    week_day2: str
    week_day3: str
    week_day4: str
    week_day5: str
    week_day6: str
    week_day7: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarViewTemplateSettings: ...

class CarouselPanel(winrt.system.Object):
    scroll_owner: typing.Optional[winrt.system.Object]
    can_vertically_scroll: winrt.system.Boolean
    can_horizontally_scroll: winrt.system.Boolean
    extent_height: winrt.system.Double
    extent_width: winrt.system.Double
    horizontal_offset: winrt.system.Double
    vertical_offset: winrt.system.Double
    viewport_height: winrt.system.Double
    viewport_width: winrt.system.Double
    are_horizontal_snap_points_regular: winrt.system.Boolean
    are_vertical_snap_points_regular: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CarouselPanel: ...
    def __new__(cls: typing.Type[CarouselPanel]) -> CarouselPanel:...
    def get_irregular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def line_down(self) -> None: ...
    def line_left(self) -> None: ...
    def line_right(self) -> None: ...
    def line_up(self) -> None: ...
    def make_visible(self, visual: typing.Optional[winrt.windows.ui.xaml.UIElement], rectangle: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.Rect: ...
    def mouse_wheel_down(self) -> None: ...
    def mouse_wheel_left(self) -> None: ...
    def mouse_wheel_right(self) -> None: ...
    def mouse_wheel_up(self) -> None: ...
    def page_down(self) -> None: ...
    def page_left(self) -> None: ...
    def page_right(self) -> None: ...
    def page_up(self) -> None: ...
    def set_horizontal_offset(self, offset: winrt.system.Double, /) -> None: ...
    def set_vertical_offset(self, offset: winrt.system.Double, /) -> None: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ColorPickerSlider(winrt.system.Object):
    color_channel: winrt.windows.ui.xaml.controls.ColorPickerHsvChannel
    color_channel_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorPickerSlider: ...
    def __new__(cls: typing.Type[ColorPickerSlider]) -> ColorPickerSlider:...

class ColorSpectrum(winrt.system.Object):
    shape: winrt.windows.ui.xaml.controls.ColorSpectrumShape
    min_value: winrt.system.Int32
    min_saturation: winrt.system.Int32
    min_hue: winrt.system.Int32
    max_value: winrt.system.Int32
    max_saturation: winrt.system.Int32
    max_hue: winrt.system.Int32
    hsv_color: winrt.windows.foundation.numerics.Vector4
    components: winrt.windows.ui.xaml.controls.ColorSpectrumComponents
    color: winrt.windows.ui.Color
    color_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    components_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    hsv_color_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    max_hue_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    max_saturation_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    max_value_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    min_hue_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    min_saturation_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    min_value_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    shape_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorSpectrum: ...
    def __new__(cls: typing.Type[ColorSpectrum]) -> ColorSpectrum:...
    def add_color_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ColorSpectrum, winrt.windows.ui.xaml.controls.ColorChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_color_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ComboBoxTemplateSettings(winrt.system.Object):
    drop_down_closed_height: winrt.system.Double
    drop_down_offset: winrt.system.Double
    drop_down_opened_height: winrt.system.Double
    selected_item_direction: AnimationDirection
    drop_down_content_min_width: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComboBoxTemplateSettings: ...

class CommandBarFlyoutCommandBar(winrt.system.Object):
    flyout_template_settings: typing.Optional[CommandBarFlyoutCommandBarTemplateSettings]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarFlyoutCommandBar: ...
    def __new__(cls: typing.Type[CommandBarFlyoutCommandBar]) -> CommandBarFlyoutCommandBar:...

class CommandBarFlyoutCommandBarTemplateSettings(winrt.system.Object):
    close_animation_end_position: winrt.system.Double
    content_clip_rect: winrt.windows.foundation.Rect
    current_width: winrt.system.Double
    expand_down_animation_end_position: winrt.system.Double
    expand_down_animation_hold_position: winrt.system.Double
    expand_down_animation_start_position: winrt.system.Double
    expand_down_overflow_vertical_position: winrt.system.Double
    expand_up_animation_end_position: winrt.system.Double
    expand_up_animation_hold_position: winrt.system.Double
    expand_up_animation_start_position: winrt.system.Double
    expand_up_overflow_vertical_position: winrt.system.Double
    expanded_width: winrt.system.Double
    open_animation_end_position: winrt.system.Double
    open_animation_start_position: winrt.system.Double
    overflow_content_clip_rect: winrt.windows.foundation.Rect
    width_expansion_animation_end_position: winrt.system.Double
    width_expansion_animation_start_position: winrt.system.Double
    width_expansion_delta: winrt.system.Double
    width_expansion_more_button_animation_end_position: winrt.system.Double
    width_expansion_more_button_animation_start_position: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarFlyoutCommandBarTemplateSettings: ...

class CommandBarTemplateSettings(winrt.system.Object):
    content_height: winrt.system.Double
    negative_overflow_content_height: winrt.system.Double
    overflow_content_clip_rect: winrt.windows.foundation.Rect
    overflow_content_height: winrt.system.Double
    overflow_content_horizontal_offset: winrt.system.Double
    overflow_content_max_height: winrt.system.Double
    overflow_content_min_width: winrt.system.Double
    overflow_content_max_width: winrt.system.Double
    effective_overflow_button_visibility: winrt.windows.ui.xaml.Visibility
    overflow_content_compact_y_translation: winrt.system.Double
    overflow_content_hidden_y_translation: winrt.system.Double
    overflow_content_minimal_y_translation: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarTemplateSettings: ...

class DragCompletedEventArgs(winrt.system.Object):
    canceled: winrt.system.Boolean
    horizontal_change: winrt.system.Double
    vertical_change: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragCompletedEventArgs: ...
    def __new__(cls: typing.Type[DragCompletedEventArgs], horizontal_change: winrt.system.Double, vertical_change: winrt.system.Double, canceled: winrt.system.Boolean) -> DragCompletedEventArgs:...

class DragDeltaEventArgs(winrt.system.Object):
    horizontal_change: winrt.system.Double
    vertical_change: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragDeltaEventArgs: ...
    def __new__(cls: typing.Type[DragDeltaEventArgs], horizontal_change: winrt.system.Double, vertical_change: winrt.system.Double) -> DragDeltaEventArgs:...

class DragStartedEventArgs(winrt.system.Object):
    horizontal_offset: winrt.system.Double
    vertical_offset: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragStartedEventArgs: ...
    def __new__(cls: typing.Type[DragStartedEventArgs], horizontal_offset: winrt.system.Double, vertical_offset: winrt.system.Double) -> DragStartedEventArgs:...

class FlyoutBase(winrt.system.Object):
    placement: FlyoutPlacementMode
    light_dismiss_overlay_mode: winrt.windows.ui.xaml.controls.LightDismissOverlayMode
    element_sound_mode: winrt.windows.ui.xaml.ElementSoundMode
    allow_focus_when_disabled: winrt.system.Boolean
    allow_focus_on_interaction: winrt.system.Boolean
    target: typing.Optional[winrt.windows.ui.xaml.FrameworkElement]
    overlay_input_pass_through_element: typing.Optional[winrt.windows.ui.xaml.DependencyObject]
    show_mode: FlyoutShowMode
    are_open_close_animations_enabled: winrt.system.Boolean
    input_device_prefers_primary_commands: winrt.system.Boolean
    is_open: winrt.system.Boolean
    xaml_root: typing.Optional[winrt.windows.ui.xaml.XamlRoot]
    should_constrain_to_root_bounds: winrt.system.Boolean
    is_constrained_to_root_bounds: winrt.system.Boolean
    attached_flyout_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    placement_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    allow_focus_on_interaction_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    allow_focus_when_disabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    element_sound_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    light_dismiss_overlay_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    overlay_input_pass_through_element_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    are_open_close_animations_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    input_device_prefers_primary_commands_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_open_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    show_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    target_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    should_constrain_to_root_bounds_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlyoutBase: ...
    def create_presenter(self) -> typing.Optional[winrt.windows.ui.xaml.controls.Control]: ...
    @staticmethod
    def get_attached_flyout(element: typing.Optional[winrt.windows.ui.xaml.FrameworkElement], /) -> typing.Optional[FlyoutBase]: ...
    def hide(self) -> None: ...
    def on_process_keyboard_accelerators(self, args: typing.Optional[winrt.windows.ui.xaml.input.ProcessKeyboardAcceleratorEventArgs], /) -> None: ...
    @staticmethod
    def set_attached_flyout(element: typing.Optional[winrt.windows.ui.xaml.FrameworkElement], value: typing.Optional[FlyoutBase], /) -> None: ...
    @typing.overload
    def show_at(self, placement_target: typing.Optional[winrt.windows.ui.xaml.FrameworkElement], /) -> None: ...
    @typing.overload
    def show_at(self, placement_target: typing.Optional[winrt.windows.ui.xaml.DependencyObject], show_options: typing.Optional[FlyoutShowOptions], /) -> None: ...
    @staticmethod
    def show_attached_flyout(flyout_owner: typing.Optional[winrt.windows.ui.xaml.FrameworkElement], /) -> None: ...
    def try_invoke_keyboard_accelerator(self, args: typing.Optional[winrt.windows.ui.xaml.input.ProcessKeyboardAcceleratorEventArgs], /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_opened(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_opening(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_opening(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closing(self, handler: winrt.windows.foundation.TypedEventHandler[FlyoutBase, FlyoutBaseClosingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class FlyoutBaseClosingEventArgs(winrt.system.Object):
    cancel: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlyoutBaseClosingEventArgs: ...

class FlyoutShowOptions(winrt.system.Object):
    show_mode: FlyoutShowMode
    position: typing.Optional[typing.Optional[winrt.windows.foundation.Point]]
    placement: FlyoutPlacementMode
    exclusion_rect: typing.Optional[typing.Optional[winrt.windows.foundation.Rect]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlyoutShowOptions: ...
    def __new__(cls: typing.Type[FlyoutShowOptions]) -> FlyoutShowOptions:...

class GeneratorPositionHelper(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeneratorPositionHelper: ...
    @staticmethod
    def from_index_and_offset(index: winrt.system.Int32, offset: winrt.system.Int32, /) -> GeneratorPosition: ...

class GridViewItemPresenter(winrt.system.Object):
    selection_check_mark_visual_enabled: winrt.system.Boolean
    selected_pointer_over_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_pointer_over_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_foreground: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_border_thickness: winrt.windows.ui.xaml.Thickness
    selected_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    reorder_hint_offset: winrt.system.Double
    pointer_over_background_margin: winrt.windows.ui.xaml.Thickness
    pointer_over_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    placeholder_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    grid_view_item_presenter_vertical_content_alignment: winrt.windows.ui.xaml.VerticalAlignment
    grid_view_item_presenter_padding: winrt.windows.ui.xaml.Thickness
    grid_view_item_presenter_horizontal_content_alignment: winrt.windows.ui.xaml.HorizontalAlignment
    focus_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    drag_opacity: winrt.system.Double
    drag_foreground: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    drag_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    disabled_opacity: winrt.system.Double
    content_margin: winrt.windows.ui.xaml.Thickness
    check_selecting_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_hint_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_hint_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_selecting_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    content_margin_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    disabled_opacity_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    drag_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    drag_foreground_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    drag_opacity_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    focus_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    grid_view_item_presenter_horizontal_content_alignment_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    grid_view_item_presenter_padding_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    grid_view_item_presenter_vertical_content_alignment_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    placeholder_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pointer_over_background_margin_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pointer_over_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    reorder_hint_offset_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_border_thickness_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_foreground_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_pointer_over_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_pointer_over_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_check_mark_visual_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridViewItemPresenter: ...
    def __new__(cls: typing.Type[GridViewItemPresenter]) -> GridViewItemPresenter:...

class GridViewItemTemplateSettings(winrt.system.Object):
    drag_items_count: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridViewItemTemplateSettings: ...

class ItemsChangedEventArgs(winrt.system.Object):
    action: winrt.system.Int32
    item_count: winrt.system.Int32
    item_u_i_count: winrt.system.Int32
    old_position: GeneratorPosition
    position: GeneratorPosition
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsChangedEventArgs: ...

class JumpListItemBackgroundConverter(winrt.system.Object):
    enabled: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    disabled: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    disabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JumpListItemBackgroundConverter: ...
    def __new__(cls: typing.Type[JumpListItemBackgroundConverter]) -> JumpListItemBackgroundConverter:...
    def convert(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    def convert_back(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...

class JumpListItemForegroundConverter(winrt.system.Object):
    enabled: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    disabled: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    disabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JumpListItemForegroundConverter: ...
    def __new__(cls: typing.Type[JumpListItemForegroundConverter]) -> JumpListItemForegroundConverter:...
    def convert(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    def convert_back(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...

class LayoutInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LayoutInformation: ...
    @staticmethod
    def get_available_size(element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> winrt.windows.foundation.Size: ...
    @staticmethod
    def get_layout_exception_element(dispatcher: typing.Optional[winrt.system.Object], /) -> typing.Optional[winrt.windows.ui.xaml.UIElement]: ...
    @staticmethod
    def get_layout_slot(element: typing.Optional[winrt.windows.ui.xaml.FrameworkElement], /) -> winrt.windows.foundation.Rect: ...

class ListViewItemPresenter(winrt.system.Object):
    selection_check_mark_visual_enabled: winrt.system.Boolean
    selected_pointer_over_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_pointer_over_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_foreground: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_border_thickness: winrt.windows.ui.xaml.Thickness
    selected_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    reorder_hint_offset: winrt.system.Double
    check_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    pointer_over_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    placeholder_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    list_view_item_presenter_vertical_content_alignment: winrt.windows.ui.xaml.VerticalAlignment
    list_view_item_presenter_padding: winrt.windows.ui.xaml.Thickness
    list_view_item_presenter_horizontal_content_alignment: winrt.windows.ui.xaml.HorizontalAlignment
    focus_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    drag_opacity: winrt.system.Double
    drag_foreground: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    drag_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    disabled_opacity: winrt.system.Double
    content_margin: winrt.windows.ui.xaml.Thickness
    check_selecting_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_hint_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    pointer_over_background_margin: winrt.windows.ui.xaml.Thickness
    selected_pressed_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    pressed_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    pointer_over_foreground: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    focus_secondary_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_mode: ListViewItemPresenterCheckMode
    check_box_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    reveal_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    reveal_background_shows_above_content: winrt.system.Boolean
    reveal_border_thickness: winrt.windows.ui.xaml.Thickness
    reveal_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_disabled_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selection_indicator_pressed_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selection_indicator_pointer_over_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selection_indicator_mode: ListViewItemPresenterSelectionIndicatorMode
    selection_indicator_disabled_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selection_indicator_corner_radius: winrt.windows.ui.xaml.CornerRadius
    selection_indicator_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_pressed_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_inner_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_disabled_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_disabled_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    pointer_over_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_pressed_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selection_indicator_visual_enabled: winrt.system.Boolean
    check_box_selected_pressed_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_selected_pointer_over_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_selected_disabled_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_selected_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_pressed_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_pressed_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_pointer_over_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_pointer_over_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_disabled_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_disabled_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    check_box_corner_radius: winrt.windows.ui.xaml.CornerRadius
    check_box_border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    selected_pointer_over_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_pointer_over_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_foreground_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_border_thickness_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    reorder_hint_offset_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pointer_over_background_margin_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pointer_over_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    placeholder_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    list_view_item_presenter_vertical_content_alignment_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    list_view_item_presenter_padding_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    list_view_item_presenter_horizontal_content_alignment_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    focus_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    drag_opacity_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    drag_foreground_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    drag_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    disabled_opacity_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    content_margin_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_selecting_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_hint_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_check_mark_visual_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pressed_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_pressed_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pointer_over_foreground_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    focus_secondary_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    reveal_background_shows_above_content_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    reveal_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    reveal_border_thickness_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    reveal_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_indicator_pressed_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_indicator_pointer_over_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_indicator_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_indicator_corner_radius_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_indicator_disabled_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_indicator_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_pressed_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_inner_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_disabled_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_disabled_background_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    pointer_over_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_pressed_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_disabled_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_selected_pressed_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_selected_pointer_over_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_selected_disabled_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_selected_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_pressed_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_pressed_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_pointer_over_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_pointer_over_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_disabled_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_disabled_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_corner_radius_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    check_box_border_brush_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selection_indicator_visual_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewItemPresenter: ...
    def __new__(cls: typing.Type[ListViewItemPresenter]) -> ListViewItemPresenter:...

class ListViewItemTemplateSettings(winrt.system.Object):
    drag_items_count: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewItemTemplateSettings: ...

class LoopingSelector(winrt.system.Object):
    should_loop: winrt.system.Boolean
    selected_item: typing.Optional[winrt.system.Object]
    selected_index: winrt.system.Int32
    items: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.system.Object]]
    item_width: winrt.system.Int32
    item_template: typing.Optional[winrt.windows.ui.xaml.DataTemplate]
    item_height: winrt.system.Int32
    item_height_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    item_template_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    item_width_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    items_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_index_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_item_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    should_loop_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoopingSelector: ...
    def add_selection_changed(self, handler: typing.Optional[winrt.windows.ui.xaml.controls.SelectionChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class LoopingSelectorItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoopingSelectorItem: ...

class LoopingSelectorPanel(winrt.system.Object):
    are_horizontal_snap_points_regular: winrt.system.Boolean
    are_vertical_snap_points_regular: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoopingSelectorPanel: ...
    def get_irregular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class MenuFlyoutItemTemplateSettings(winrt.system.Object):
    keyboard_accelerator_text_min_width: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutItemTemplateSettings: ...

class MenuFlyoutPresenterTemplateSettings(winrt.system.Object):
    flyout_content_min_width: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutPresenterTemplateSettings: ...

class NavigationViewItemPresenter(winrt.system.Object):
    icon: typing.Optional[winrt.windows.ui.xaml.controls.IconElement]
    icon_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemPresenter: ...
    def __new__(cls: typing.Type[NavigationViewItemPresenter]) -> NavigationViewItemPresenter:...

class OrientedVirtualizingPanel(winrt.system.Object):
    scroll_owner: typing.Optional[winrt.system.Object]
    can_vertically_scroll: winrt.system.Boolean
    can_horizontally_scroll: winrt.system.Boolean
    extent_height: winrt.system.Double
    extent_width: winrt.system.Double
    horizontal_offset: winrt.system.Double
    vertical_offset: winrt.system.Double
    viewport_height: winrt.system.Double
    viewport_width: winrt.system.Double
    are_horizontal_snap_points_regular: winrt.system.Boolean
    are_vertical_snap_points_regular: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OrientedVirtualizingPanel: ...
    def get_insertion_indexes(self, position: winrt.windows.foundation.Point, /) -> typing.Tuple[winrt.system.Int32, winrt.system.Int32]: ...
    def get_irregular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def line_down(self) -> None: ...
    def line_left(self) -> None: ...
    def line_right(self) -> None: ...
    def line_up(self) -> None: ...
    def make_visible(self, visual: typing.Optional[winrt.windows.ui.xaml.UIElement], rectangle: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.Rect: ...
    def mouse_wheel_down(self) -> None: ...
    def mouse_wheel_left(self) -> None: ...
    def mouse_wheel_right(self) -> None: ...
    def mouse_wheel_up(self) -> None: ...
    def page_down(self) -> None: ...
    def page_left(self) -> None: ...
    def page_right(self) -> None: ...
    def page_up(self) -> None: ...
    def set_horizontal_offset(self, offset: winrt.system.Double, /) -> None: ...
    def set_vertical_offset(self, offset: winrt.system.Double, /) -> None: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PickerFlyoutBase(winrt.system.Object):
    title_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerFlyoutBase: ...
    @staticmethod
    def get_title(element: typing.Optional[winrt.windows.ui.xaml.DependencyObject], /) -> str: ...
    def on_confirmed(self) -> None: ...
    @staticmethod
    def set_title(element: typing.Optional[winrt.windows.ui.xaml.DependencyObject], value: str, /) -> None: ...
    def should_show_confirmation_buttons(self) -> winrt.system.Boolean: ...

class PivotHeaderItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotHeaderItem: ...
    def __new__(cls: typing.Type[PivotHeaderItem]) -> PivotHeaderItem:...

class PivotHeaderPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotHeaderPanel: ...
    def __new__(cls: typing.Type[PivotHeaderPanel]) -> PivotHeaderPanel:...

class PivotPanel(winrt.system.Object):
    are_horizontal_snap_points_regular: winrt.system.Boolean
    are_vertical_snap_points_regular: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotPanel: ...
    def __new__(cls: typing.Type[PivotPanel]) -> PivotPanel:...
    def get_irregular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class Popup(winrt.system.Object):
    vertical_offset: winrt.system.Double
    is_open: winrt.system.Boolean
    is_light_dismiss_enabled: winrt.system.Boolean
    horizontal_offset: winrt.system.Double
    child_transitions: typing.Optional[winrt.windows.ui.xaml.media.animation.TransitionCollection]
    child: typing.Optional[winrt.windows.ui.xaml.UIElement]
    light_dismiss_overlay_mode: winrt.windows.ui.xaml.controls.LightDismissOverlayMode
    should_constrain_to_root_bounds: winrt.system.Boolean
    is_constrained_to_root_bounds: winrt.system.Boolean
    placement_target: typing.Optional[winrt.windows.ui.xaml.FrameworkElement]
    desired_placement: PopupPlacementMode
    actual_placement: PopupPlacementMode
    child_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    child_transitions_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    horizontal_offset_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_light_dismiss_enabled_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_open_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    vertical_offset_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    light_dismiss_overlay_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    should_constrain_to_root_bounds_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    desired_placement_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    placement_target_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Popup: ...
    def __new__(cls: typing.Type[Popup]) -> Popup:...
    def add_closed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_opened(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_placement_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_actual_placement_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ProgressBarTemplateSettings(winrt.system.Object):
    container_animation_end_position: winrt.system.Double
    container_animation_start_position: winrt.system.Double
    ellipse_animation_end_position: winrt.system.Double
    ellipse_animation_well_position: winrt.system.Double
    ellipse_diameter: winrt.system.Double
    ellipse_offset: winrt.system.Double
    indicator_length_delta: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProgressBarTemplateSettings: ...

class ProgressRingTemplateSettings(winrt.system.Object):
    ellipse_diameter: winrt.system.Double
    ellipse_offset: winrt.windows.ui.xaml.Thickness
    max_side_length: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProgressRingTemplateSettings: ...

class RangeBase(winrt.system.Object):
    value: winrt.system.Double
    small_change: winrt.system.Double
    minimum: winrt.system.Double
    maximum: winrt.system.Double
    large_change: winrt.system.Double
    large_change_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    maximum_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    minimum_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    small_change_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    value_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RangeBase: ...
    def on_maximum_changed(self, old_maximum: winrt.system.Double, new_maximum: winrt.system.Double, /) -> None: ...
    def on_minimum_changed(self, old_minimum: winrt.system.Double, new_minimum: winrt.system.Double, /) -> None: ...
    def on_value_changed(self, old_value: winrt.system.Double, new_value: winrt.system.Double, /) -> None: ...
    def add_value_changed(self, handler: typing.Optional[RangeBaseValueChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_value_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RangeBaseValueChangedEventArgs(winrt.system.Object):
    new_value: winrt.system.Double
    old_value: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RangeBaseValueChangedEventArgs: ...

class RepeatButton(winrt.system.Object):
    interval: winrt.system.Int32
    delay: winrt.system.Int32
    delay_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    interval_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RepeatButton: ...
    def __new__(cls: typing.Type[RepeatButton]) -> RepeatButton:...

class ScrollBar(winrt.system.Object):
    viewport_size: winrt.system.Double
    orientation: winrt.windows.ui.xaml.controls.Orientation
    indicator_mode: ScrollingIndicatorMode
    indicator_mode_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    orientation_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    viewport_size_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollBar: ...
    def __new__(cls: typing.Type[ScrollBar]) -> ScrollBar:...
    def add_scroll(self, handler: typing.Optional[ScrollEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scroll(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ScrollEventArgs(winrt.system.Object):
    new_value: winrt.system.Double
    scroll_event_type: ScrollEventType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollEventArgs: ...
    def __new__(cls: typing.Type[ScrollEventArgs]) -> ScrollEventArgs:...

class Selector(winrt.system.Object):
    selected_value_path: str
    selected_value: typing.Optional[winrt.system.Object]
    selected_item: typing.Optional[winrt.system.Object]
    selected_index: winrt.system.Int32
    is_synchronized_with_current_item: typing.Optional[typing.Optional[winrt.system.Boolean]]
    is_synchronized_with_current_item_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_index_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_item_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_value_path_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    selected_value_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Selector: ...
    @staticmethod
    def get_is_selection_active(element: typing.Optional[winrt.windows.ui.xaml.DependencyObject], /) -> winrt.system.Boolean: ...
    def add_selection_changed(self, handler: typing.Optional[winrt.windows.ui.xaml.controls.SelectionChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class SelectorItem(winrt.system.Object):
    is_selected: winrt.system.Boolean
    is_selected_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SelectorItem: ...

class SettingsFlyoutTemplateSettings(winrt.system.Object):
    border_brush: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    border_thickness: winrt.windows.ui.xaml.Thickness
    content_transitions: typing.Optional[winrt.windows.ui.xaml.media.animation.TransitionCollection]
    header_background: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    header_foreground: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    icon_source: typing.Optional[winrt.windows.ui.xaml.media.ImageSource]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsFlyoutTemplateSettings: ...

class SplitViewTemplateSettings(winrt.system.Object):
    compact_pane_grid_length: winrt.windows.ui.xaml.GridLength
    negative_open_pane_length: winrt.system.Double
    negative_open_pane_length_minus_compact_length: winrt.system.Double
    open_pane_grid_length: winrt.windows.ui.xaml.GridLength
    open_pane_length: winrt.system.Double
    open_pane_length_minus_compact_length: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitViewTemplateSettings: ...

class Thumb(winrt.system.Object):
    is_dragging: winrt.system.Boolean
    is_dragging_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Thumb: ...
    def __new__(cls: typing.Type[Thumb]) -> Thumb:...
    def cancel_drag(self) -> None: ...
    def add_drag_completed(self, handler: typing.Optional[DragCompletedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_drag_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_delta(self, handler: typing.Optional[DragDeltaEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_drag_delta(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_started(self, handler: typing.Optional[DragStartedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_drag_started(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class TickBar(winrt.system.Object):
    fill: typing.Optional[winrt.windows.ui.xaml.media.Brush]
    fill_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TickBar: ...
    def __new__(cls: typing.Type[TickBar]) -> TickBar:...

class ToggleButton(winrt.system.Object):
    is_three_state: winrt.system.Boolean
    is_checked: typing.Optional[typing.Optional[winrt.system.Boolean]]
    is_checked_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    is_three_state_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleButton: ...
    def __new__(cls: typing.Type[ToggleButton]) -> ToggleButton:...
    def on_toggle(self) -> None: ...
    def add_checked(self, handler: typing.Optional[winrt.windows.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_checked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_indeterminate(self, handler: typing.Optional[winrt.windows.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_indeterminate(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unchecked(self, handler: typing.Optional[winrt.windows.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unchecked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ToggleSwitchTemplateSettings(winrt.system.Object):
    curtain_current_to_off_offset: winrt.system.Double
    curtain_current_to_on_offset: winrt.system.Double
    curtain_off_to_on_offset: winrt.system.Double
    curtain_on_to_off_offset: winrt.system.Double
    knob_current_to_off_offset: winrt.system.Double
    knob_current_to_on_offset: winrt.system.Double
    knob_off_to_on_offset: winrt.system.Double
    knob_on_to_off_offset: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleSwitchTemplateSettings: ...

class ToolTipTemplateSettings(winrt.system.Object):
    from_horizontal_offset: winrt.system.Double
    from_vertical_offset: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToolTipTemplateSettings: ...

class IScrollSnapPointsInfo(winrt.system.Object):
    are_horizontal_snap_points_regular: winrt.system.Boolean
    are_vertical_snap_points_regular: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IScrollSnapPointsInfo: ...
    def get_irregular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.windows.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

