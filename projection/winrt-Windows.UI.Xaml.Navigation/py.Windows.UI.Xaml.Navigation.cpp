// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.UI.Xaml.Navigation.h"


namespace py::cpp::Windows::UI::Xaml::Navigation
{
    struct module_state
    {
        PyObject* type_NavigationCacheMode;
        PyObject* type_NavigationMode;
        PyTypeObject* type_FrameNavigationOptions;
        PyTypeObject* type_NavigatingCancelEventArgs;
        PyTypeObject* type_NavigationEventArgs;
        PyTypeObject* type_NavigationFailedEventArgs;
        PyTypeObject* type_PageStackEntry;
    };

    static PyObject* register_NavigationCacheMode(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        WINRT_ASSERT(state);

        if (state->type_NavigationCacheMode)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_NavigationCacheMode = type;
        Py_INCREF(state->type_NavigationCacheMode);


        Py_RETURN_NONE;
    }

    static PyObject* register_NavigationMode(PyObject* module, PyObject* type) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        WINRT_ASSERT(state);

        if (state->type_NavigationMode)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_NavigationMode = type;
        Py_INCREF(state->type_NavigationMode);


        Py_RETURN_NONE;
    }

    // ----- FrameNavigationOptions class --------------------
    static constexpr const char* const type_name_FrameNavigationOptions = "FrameNavigationOptions";

    static PyObject* _new_FrameNavigationOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::Xaml::Navigation::FrameNavigationOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FrameNavigationOptions(py::wrapper::Windows::UI::Xaml::Navigation::FrameNavigationOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FrameNavigationOptions_get_TransitionInfoOverride(py::wrapper::Windows::UI::Xaml::Navigation::FrameNavigationOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.FrameNavigationOptions", L"TransitionInfoOverride"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TransitionInfoOverride());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FrameNavigationOptions_put_TransitionInfoOverride(py::wrapper::Windows::UI::Xaml::Navigation::FrameNavigationOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.FrameNavigationOptions", L"TransitionInfoOverride"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo>(arg);

            self->obj.TransitionInfoOverride(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FrameNavigationOptions_get_IsNavigationStackEnabled(py::wrapper::Windows::UI::Xaml::Navigation::FrameNavigationOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.FrameNavigationOptions", L"IsNavigationStackEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsNavigationStackEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FrameNavigationOptions_put_IsNavigationStackEnabled(py::wrapper::Windows::UI::Xaml::Navigation::FrameNavigationOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.FrameNavigationOptions", L"IsNavigationStackEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsNavigationStackEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_FrameNavigationOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Xaml::Navigation::FrameNavigationOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FrameNavigationOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Xaml::Navigation::FrameNavigationOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FrameNavigationOptions[] = {
        { "_assign_array_", _assign_array_FrameNavigationOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FrameNavigationOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FrameNavigationOptions[] = {
        { "transition_info_override", reinterpret_cast<getter>(FrameNavigationOptions_get_TransitionInfoOverride), reinterpret_cast<setter>(FrameNavigationOptions_put_TransitionInfoOverride), nullptr, nullptr },
        { "is_navigation_stack_enabled", reinterpret_cast<getter>(FrameNavigationOptions_get_IsNavigationStackEnabled), reinterpret_cast<setter>(FrameNavigationOptions_put_IsNavigationStackEnabled), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FrameNavigationOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FrameNavigationOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FrameNavigationOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FrameNavigationOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FrameNavigationOptions) },
        { },
    };

    static PyType_Spec type_spec_FrameNavigationOptions =
    {
        "_winrt_Windows_UI_Xaml_Navigation.FrameNavigationOptions",
        sizeof(py::wrapper::Windows::UI::Xaml::Navigation::FrameNavigationOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FrameNavigationOptions
    };

    // ----- NavigatingCancelEventArgs class --------------------
    static constexpr const char* const type_name_NavigatingCancelEventArgs = "NavigatingCancelEventArgs";

    static PyObject* _new_NavigatingCancelEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_NavigatingCancelEventArgs);
        return nullptr;
    }

    static void _dealloc_NavigatingCancelEventArgs(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* NavigatingCancelEventArgs_get_Cancel(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs", L"Cancel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Cancel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int NavigatingCancelEventArgs_put_Cancel(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs", L"Cancel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Cancel(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* NavigatingCancelEventArgs_get_NavigationMode(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs", L"NavigationMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NavigationMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigatingCancelEventArgs_get_SourcePageType(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs", L"SourcePageType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourcePageType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigatingCancelEventArgs_get_NavigationTransitionInfo(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs", L"NavigationTransitionInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NavigationTransitionInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigatingCancelEventArgs_get_Parameter(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs", L"Parameter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parameter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_NavigatingCancelEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_NavigatingCancelEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NavigatingCancelEventArgs[] = {
        { "_assign_array_", _assign_array_NavigatingCancelEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_NavigatingCancelEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_NavigatingCancelEventArgs[] = {
        { "cancel", reinterpret_cast<getter>(NavigatingCancelEventArgs_get_Cancel), reinterpret_cast<setter>(NavigatingCancelEventArgs_put_Cancel), nullptr, nullptr },
        { "navigation_mode", reinterpret_cast<getter>(NavigatingCancelEventArgs_get_NavigationMode), nullptr, nullptr, nullptr },
        { "source_page_type", reinterpret_cast<getter>(NavigatingCancelEventArgs_get_SourcePageType), nullptr, nullptr, nullptr },
        { "navigation_transition_info", reinterpret_cast<getter>(NavigatingCancelEventArgs_get_NavigationTransitionInfo), nullptr, nullptr, nullptr },
        { "parameter", reinterpret_cast<getter>(NavigatingCancelEventArgs_get_Parameter), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_NavigatingCancelEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_NavigatingCancelEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_NavigatingCancelEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_NavigatingCancelEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_NavigatingCancelEventArgs) },
        { },
    };

    static PyType_Spec type_spec_NavigatingCancelEventArgs =
    {
        "_winrt_Windows_UI_Xaml_Navigation.NavigatingCancelEventArgs",
        sizeof(py::wrapper::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NavigatingCancelEventArgs
    };

    // ----- NavigationEventArgs class --------------------
    static constexpr const char* const type_name_NavigationEventArgs = "NavigationEventArgs";

    static PyObject* _new_NavigationEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_NavigationEventArgs);
        return nullptr;
    }

    static void _dealloc_NavigationEventArgs(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* NavigationEventArgs_get_Uri(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationEventArgs", L"Uri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int NavigationEventArgs_put_Uri(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationEventArgs", L"Uri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Uri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* NavigationEventArgs_get_Content(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationEventArgs", L"Content"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigationEventArgs_get_NavigationMode(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationEventArgs", L"NavigationMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NavigationMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigationEventArgs_get_Parameter(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationEventArgs", L"Parameter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parameter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigationEventArgs_get_SourcePageType(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationEventArgs", L"SourcePageType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourcePageType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigationEventArgs_get_NavigationTransitionInfo(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationEventArgs", L"NavigationTransitionInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NavigationTransitionInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_NavigationEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_NavigationEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NavigationEventArgs[] = {
        { "_assign_array_", _assign_array_NavigationEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_NavigationEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_NavigationEventArgs[] = {
        { "uri", reinterpret_cast<getter>(NavigationEventArgs_get_Uri), reinterpret_cast<setter>(NavigationEventArgs_put_Uri), nullptr, nullptr },
        { "content", reinterpret_cast<getter>(NavigationEventArgs_get_Content), nullptr, nullptr, nullptr },
        { "navigation_mode", reinterpret_cast<getter>(NavigationEventArgs_get_NavigationMode), nullptr, nullptr, nullptr },
        { "parameter", reinterpret_cast<getter>(NavigationEventArgs_get_Parameter), nullptr, nullptr, nullptr },
        { "source_page_type", reinterpret_cast<getter>(NavigationEventArgs_get_SourcePageType), nullptr, nullptr, nullptr },
        { "navigation_transition_info", reinterpret_cast<getter>(NavigationEventArgs_get_NavigationTransitionInfo), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_NavigationEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_NavigationEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_NavigationEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_NavigationEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_NavigationEventArgs) },
        { },
    };

    static PyType_Spec type_spec_NavigationEventArgs =
    {
        "_winrt_Windows_UI_Xaml_Navigation.NavigationEventArgs",
        sizeof(py::wrapper::Windows::UI::Xaml::Navigation::NavigationEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NavigationEventArgs
    };

    // ----- NavigationFailedEventArgs class --------------------
    static constexpr const char* const type_name_NavigationFailedEventArgs = "NavigationFailedEventArgs";

    static PyObject* _new_NavigationFailedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_NavigationFailedEventArgs);
        return nullptr;
    }

    static void _dealloc_NavigationFailedEventArgs(py::wrapper::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* NavigationFailedEventArgs_get_Handled(py::wrapper::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationFailedEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int NavigationFailedEventArgs_put_Handled(py::wrapper::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationFailedEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* NavigationFailedEventArgs_get_Exception(py::wrapper::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationFailedEventArgs", L"Exception"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Exception());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NavigationFailedEventArgs_get_SourcePageType(py::wrapper::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.NavigationFailedEventArgs", L"SourcePageType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourcePageType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_NavigationFailedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_NavigationFailedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NavigationFailedEventArgs[] = {
        { "_assign_array_", _assign_array_NavigationFailedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_NavigationFailedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_NavigationFailedEventArgs[] = {
        { "handled", reinterpret_cast<getter>(NavigationFailedEventArgs_get_Handled), reinterpret_cast<setter>(NavigationFailedEventArgs_put_Handled), nullptr, nullptr },
        { "exception", reinterpret_cast<getter>(NavigationFailedEventArgs_get_Exception), nullptr, nullptr, nullptr },
        { "source_page_type", reinterpret_cast<getter>(NavigationFailedEventArgs_get_SourcePageType), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_NavigationFailedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_NavigationFailedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_NavigationFailedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_NavigationFailedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_NavigationFailedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_NavigationFailedEventArgs =
    {
        "_winrt_Windows_UI_Xaml_Navigation.NavigationFailedEventArgs",
        sizeof(py::wrapper::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NavigationFailedEventArgs
    };

    // ----- PageStackEntry class --------------------
    static constexpr const char* const type_name_PageStackEntry = "PageStackEntry";

    static PyObject* _new_PageStackEntry(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Xaml::Interop::TypeName>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::IInspectable>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo>(args, 2);

                winrt::Windows::UI::Xaml::Navigation::PageStackEntry instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PageStackEntry(py::wrapper::Windows::UI::Xaml::Navigation::PageStackEntry* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PageStackEntry_get_NavigationTransitionInfo(py::wrapper::Windows::UI::Xaml::Navigation::PageStackEntry* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.PageStackEntry", L"NavigationTransitionInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NavigationTransitionInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PageStackEntry_get_Parameter(py::wrapper::Windows::UI::Xaml::Navigation::PageStackEntry* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.PageStackEntry", L"Parameter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Parameter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PageStackEntry_get_SourcePageType(py::wrapper::Windows::UI::Xaml::Navigation::PageStackEntry* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.PageStackEntry", L"SourcePageType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourcePageType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PageStackEntry_get_SourcePageTypeProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Navigation.PageStackEntry", L"SourcePageTypeProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Xaml::Navigation::PageStackEntry::SourcePageTypeProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PageStackEntry(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Xaml::Navigation::PageStackEntry>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PageStackEntry(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Xaml::Navigation::PageStackEntry>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PageStackEntry[] = {
        { "_assign_array_", _assign_array_PageStackEntry, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PageStackEntry), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PageStackEntry[] = {
        { "navigation_transition_info", reinterpret_cast<getter>(PageStackEntry_get_NavigationTransitionInfo), nullptr, nullptr, nullptr },
        { "parameter", reinterpret_cast<getter>(PageStackEntry_get_Parameter), nullptr, nullptr, nullptr },
        { "source_page_type", reinterpret_cast<getter>(PageStackEntry_get_SourcePageType), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PageStackEntry[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PageStackEntry) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PageStackEntry) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PageStackEntry) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PageStackEntry) },
        { },
    };

    static PyType_Spec type_spec_PageStackEntry =
    {
        "_winrt_Windows_UI_Xaml_Navigation.PageStackEntry",
        sizeof(py::wrapper::Windows::UI::Xaml::Navigation::PageStackEntry),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PageStackEntry
    };

    static PyGetSetDef getset_PageStackEntry_Meta[] = {
        { "source_page_type_property", reinterpret_cast<getter>(PageStackEntry_get_SourcePageTypeProperty), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_PageStackEntry_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PageStackEntry_Meta) },
        { }
    };

    static PyType_Spec type_spec_PageStackEntry_Meta =
    {
        "_winrt_Windows_UI_Xaml_Navigation.PageStackEntry_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PageStackEntry_Meta
    };

    // ----- Windows.UI.Xaml.Navigation Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Xaml::Navigation");

    static PyMethodDef module_methods[] = {
        {"_register_NavigationCacheMode", register_NavigationCacheMode, METH_O, "registers type"},
        {"_register_NavigationMode", register_NavigationMode, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_NavigationCacheMode);
        Py_VISIT(state->type_NavigationMode);
        Py_VISIT(state->type_FrameNavigationOptions);
        Py_VISIT(state->type_NavigatingCancelEventArgs);
        Py_VISIT(state->type_NavigationEventArgs);
        Py_VISIT(state->type_NavigationFailedEventArgs);
        Py_VISIT(state->type_PageStackEntry);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_NavigationCacheMode);
        Py_CLEAR(state->type_NavigationMode);
        Py_CLEAR(state->type_FrameNavigationOptions);
        Py_CLEAR(state->type_NavigatingCancelEventArgs);
        Py_CLEAR(state->type_NavigationEventArgs);
        Py_CLEAR(state->type_NavigationFailedEventArgs);
        Py_CLEAR(state->type_PageStackEntry);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_Windows_UI_Xaml_Navigation",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::UI::Xaml::Navigation

PyMODINIT_FUNC PyInit__winrt_Windows_UI_Xaml_Navigation(void) noexcept
{
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    WINRT_ASSERT(state);

    state->type_FrameNavigationOptions = py::register_python_type(module.get(), type_name_FrameNavigationOptions, &type_spec_FrameNavigationOptions, object_bases.get(), nullptr);
    if (!state->type_FrameNavigationOptions)
    {
        return nullptr;
    }

    state->type_NavigatingCancelEventArgs = py::register_python_type(module.get(), type_name_NavigatingCancelEventArgs, &type_spec_NavigatingCancelEventArgs, object_bases.get(), nullptr);
    if (!state->type_NavigatingCancelEventArgs)
    {
        return nullptr;
    }

    state->type_NavigationEventArgs = py::register_python_type(module.get(), type_name_NavigationEventArgs, &type_spec_NavigationEventArgs, object_bases.get(), nullptr);
    if (!state->type_NavigationEventArgs)
    {
        return nullptr;
    }

    state->type_NavigationFailedEventArgs = py::register_python_type(module.get(), type_name_NavigationFailedEventArgs, &type_spec_NavigationFailedEventArgs, object_bases.get(), nullptr);
    if (!state->type_NavigationFailedEventArgs)
    {
        return nullptr;
    }

    py::pyobj_handle type_PageStackEntry_Meta{PyType_FromSpec(&type_spec_PageStackEntry_Meta)};
    if (!type_PageStackEntry_Meta)
    {
        return nullptr;
    }

    state->type_PageStackEntry = py::register_python_type(module.get(), type_name_PageStackEntry, &type_spec_PageStackEntry, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PageStackEntry_Meta.get()));
    if (!state->type_PageStackEntry)
    {
        return nullptr;
    }


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::UI::Xaml::Navigation::NavigationCacheMode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Navigation");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_NavigationCacheMode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Navigation::NavigationCacheMode is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::UI::Xaml::Navigation::NavigationMode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Navigation");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_NavigationMode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Navigation::NavigationMode is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Xaml::Navigation::FrameNavigationOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Navigation");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_FrameNavigationOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Navigation::FrameNavigationOptions is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Navigation");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_NavigatingCancelEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Navigation");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_NavigationEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Navigation::NavigationEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Navigation");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_NavigationFailedEventArgs;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Xaml::Navigation::PageStackEntry>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Navigation;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Navigation");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PageStackEntry;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Navigation::PageStackEntry is not registered");
        return nullptr;
    }

    return python_type;
}
