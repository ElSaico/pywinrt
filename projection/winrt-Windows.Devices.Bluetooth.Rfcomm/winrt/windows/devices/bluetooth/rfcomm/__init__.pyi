# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.devices.bluetooth
import winrt.windows.devices.enumeration
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking
import winrt.windows.networking.sockets
import winrt.windows.storage.streams

Self = typing.TypeVar('Self')

class RfcommDeviceService(winrt.system.Object):
    connection_host_name: typing.Optional[winrt.windows.networking.HostName]
    connection_service_name: str
    max_protection_level: winrt.windows.networking.sockets.SocketProtectionLevel
    protection_level: winrt.windows.networking.sockets.SocketProtectionLevel
    service_id: typing.Optional[RfcommServiceId]
    device: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDevice]
    device_access_information: typing.Optional[winrt.windows.devices.enumeration.DeviceAccessInformation]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RfcommDeviceService: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[RfcommDeviceService]: ...
    @staticmethod
    def get_device_selector(service_id: typing.Optional[RfcommServiceId], /) -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device(bluetooth_device: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDevice], /) -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device(bluetooth_device: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDevice], cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device_and_service_id(bluetooth_device: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDevice], service_id: typing.Optional[RfcommServiceId], /) -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector_for_bluetooth_device_and_service_id(bluetooth_device: typing.Optional[winrt.windows.devices.bluetooth.BluetoothDevice], service_id: typing.Optional[RfcommServiceId], cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> str: ...
    @typing.overload
    def get_sdp_raw_attributes_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMapView[winrt.system.UInt32, winrt.windows.storage.streams.IBuffer]]: ...
    @typing.overload
    def get_sdp_raw_attributes_async(self, cache_mode: winrt.windows.devices.bluetooth.BluetoothCacheMode, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMapView[winrt.system.UInt32, winrt.windows.storage.streams.IBuffer]]: ...
    def request_access_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.devices.enumeration.DeviceAccessStatus]: ...

class RfcommDeviceServicesResult(winrt.system.Object):
    error: winrt.windows.devices.bluetooth.BluetoothError
    services: typing.Optional[winrt.windows.foundation.collections.IVectorView[RfcommDeviceService]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RfcommDeviceServicesResult: ...

class RfcommServiceId(winrt.system.Object):
    uuid: winrt.system.Guid
    generic_file_transfer: typing.ClassVar[typing.Optional[RfcommServiceId]]
    obex_file_transfer: typing.ClassVar[typing.Optional[RfcommServiceId]]
    obex_object_push: typing.ClassVar[typing.Optional[RfcommServiceId]]
    phone_book_access_pce: typing.ClassVar[typing.Optional[RfcommServiceId]]
    phone_book_access_pse: typing.ClassVar[typing.Optional[RfcommServiceId]]
    serial_port: typing.ClassVar[typing.Optional[RfcommServiceId]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RfcommServiceId: ...
    def as_short_id(self) -> winrt.system.UInt32: ...
    def as_string(self) -> str: ...
    @staticmethod
    def from_short_id(short_id: winrt.system.UInt32, /) -> typing.Optional[RfcommServiceId]: ...
    @staticmethod
    def from_uuid(uuid: winrt.system.Guid, /) -> typing.Optional[RfcommServiceId]: ...

class RfcommServiceProvider(winrt.system.Object):
    sdp_raw_attributes: typing.Optional[winrt.windows.foundation.collections.IMap[winrt.system.UInt32, winrt.windows.storage.streams.IBuffer]]
    service_id: typing.Optional[RfcommServiceId]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RfcommServiceProvider: ...
    @staticmethod
    def create_async(service_id: typing.Optional[RfcommServiceId], /) -> winrt.windows.foundation.IAsyncOperation[RfcommServiceProvider]: ...
    @typing.overload
    def start_advertising(self, listener: typing.Optional[winrt.windows.networking.sockets.StreamSocketListener], /) -> None: ...
    @typing.overload
    def start_advertising(self, listener: typing.Optional[winrt.windows.networking.sockets.StreamSocketListener], radio_discoverable: winrt.system.Boolean, /) -> None: ...
    def stop_advertising(self) -> None: ...

