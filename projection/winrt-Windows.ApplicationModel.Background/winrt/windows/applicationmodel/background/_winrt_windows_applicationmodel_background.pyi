# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.applicationmodel.activation
import winrt.windows.applicationmodel.calls.background
import winrt.windows.devices.bluetooth
import winrt.windows.devices.bluetooth.advertisement
import winrt.windows.devices.bluetooth.background
import winrt.windows.devices.bluetooth.genericattributeprofile
import winrt.windows.devices.geolocation
import winrt.windows.devices.sensors
import winrt.windows.devices.smartcards
import winrt.windows.devices.sms
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking
import winrt.windows.networking.sockets
import winrt.windows.storage
import winrt.windows.storage.provider
import winrt.windows.system
import winrt.windows.ui.notifications

from . import AlarmAccessStatus, ApplicationTriggerResult, BackgroundAccessRequestKind, BackgroundAccessStatus, BackgroundTaskCancellationReason, BackgroundTaskThrottleCounter, BackgroundWorkCostValue, CustomSystemEventTriggerRecurrence, DeviceTriggerResult, LocationTriggerType, MediaProcessingTriggerResult, SystemConditionType, SystemTriggerType
from . import BackgroundTaskCanceledEventHandler, BackgroundTaskCompletedEventHandler, BackgroundTaskProgressEventHandler

Self = typing.TypeVar('Self')

class ActivitySensorTrigger(winrt.system.Object):
    minimum_report_interval: winrt.system.UInt32
    report_interval: winrt.system.UInt32
    subscribed_activities: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.devices.sensors.ActivityType]]
    supported_activities: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.devices.sensors.ActivityType]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivitySensorTrigger: ...
    def __new__(cls: typing.Type[ActivitySensorTrigger], report_interval_in_milliseconds: winrt.system.UInt32) -> ActivitySensorTrigger:...

class AlarmApplicationManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AlarmApplicationManager: ...
    @staticmethod
    def get_access_status() -> AlarmAccessStatus: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[AlarmAccessStatus]: ...

class AppBroadcastTrigger(winrt.system.Object):
    provider_info: typing.Optional[AppBroadcastTriggerProviderInfo]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBroadcastTrigger: ...
    def __new__(cls: typing.Type[AppBroadcastTrigger], provider_key: str) -> AppBroadcastTrigger:...

class AppBroadcastTriggerProviderInfo(winrt.system.Object):
    video_key_frame_interval: datetime.timedelta
    max_video_width: winrt.system.UInt32
    max_video_height: winrt.system.UInt32
    max_video_bitrate: winrt.system.UInt32
    logo_resource: str
    display_name_resource: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBroadcastTriggerProviderInfo: ...

class ApplicationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationTrigger: ...
    def __new__(cls: typing.Type[ApplicationTrigger]) -> ApplicationTrigger:...
    @typing.overload
    def request_async(self) -> winrt.windows.foundation.IAsyncOperation[ApplicationTriggerResult]: ...
    @typing.overload
    def request_async(self, arguments: typing.Optional[winrt.windows.foundation.collections.ValueSet], /) -> winrt.windows.foundation.IAsyncOperation[ApplicationTriggerResult]: ...

class ApplicationTriggerDetails(winrt.system.Object):
    arguments: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationTriggerDetails: ...

class AppointmentStoreNotificationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreNotificationTrigger: ...
    def __new__(cls: typing.Type[AppointmentStoreNotificationTrigger]) -> AppointmentStoreNotificationTrigger:...

class BackgroundExecutionManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundExecutionManager: ...
    @typing.overload
    @staticmethod
    def get_access_status() -> BackgroundAccessStatus: ...
    @typing.overload
    @staticmethod
    def get_access_status(application_id: str, /) -> BackgroundAccessStatus: ...
    @typing.overload
    @staticmethod
    def get_access_status_for_modern_standby() -> BackgroundAccessStatus: ...
    @typing.overload
    @staticmethod
    def get_access_status_for_modern_standby(application_id: str, /) -> BackgroundAccessStatus: ...
    @typing.overload
    @staticmethod
    def remove_access() -> None: ...
    @typing.overload
    @staticmethod
    def remove_access(application_id: str, /) -> None: ...
    @typing.overload
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[BackgroundAccessStatus]: ...
    @typing.overload
    @staticmethod
    def request_access_async(application_id: str, /) -> winrt.windows.foundation.IAsyncOperation[BackgroundAccessStatus]: ...
    @staticmethod
    def request_access_kind_async(requested_access: BackgroundAccessRequestKind, reason: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @staticmethod
    def request_access_kind_for_modern_standby_async(requested_access: BackgroundAccessRequestKind, reason: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...

class BackgroundTaskBuilder(winrt.system.Object):
    task_entry_point: str
    name: str
    cancel_on_condition_loss: bool
    is_network_requested: bool
    task_group: typing.Optional[BackgroundTaskRegistrationGroup]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskBuilder: ...
    def __new__(cls: typing.Type[BackgroundTaskBuilder]) -> BackgroundTaskBuilder:...
    def add_condition(self, condition: typing.Optional[IBackgroundCondition], /) -> None: ...
    def register(self) -> typing.Optional[BackgroundTaskRegistration]: ...
    def set_task_entry_point_clsid(self, task_entry_point: uuid.UUID, /) -> None: ...
    def set_trigger(self, trigger: typing.Optional[IBackgroundTrigger], /) -> None: ...

class BackgroundTaskCompletedEventArgs(winrt.system.Object):
    instance_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskCompletedEventArgs: ...
    def check_result(self) -> None: ...

class BackgroundTaskDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskDeferral: ...
    def complete(self) -> None: ...

class BackgroundTaskProgressEventArgs(winrt.system.Object):
    instance_id: uuid.UUID
    progress: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskProgressEventArgs: ...

class BackgroundTaskRegistration(winrt.system.Object):
    name: str
    task_id: uuid.UUID
    trigger: typing.Optional[IBackgroundTrigger]
    task_group: typing.Optional[BackgroundTaskRegistrationGroup]
    all_tasks: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IMapView[uuid.UUID, IBackgroundTaskRegistration]]]
    all_task_groups: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IMapView[str, BackgroundTaskRegistrationGroup]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskRegistration: ...
    @staticmethod
    def get_task_group(group_id: str, /) -> typing.Optional[BackgroundTaskRegistrationGroup]: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: typing.Optional[BackgroundTaskCompletedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: typing.Optional[BackgroundTaskProgressEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class BackgroundTaskRegistrationGroup(winrt.system.Object):
    all_tasks: typing.Optional[winrt.windows.foundation.collections.IMapView[uuid.UUID, BackgroundTaskRegistration]]
    id: str
    name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskRegistrationGroup: ...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTaskRegistrationGroup], id: str) -> BackgroundTaskRegistrationGroup:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTaskRegistrationGroup], id: str, name: str) -> BackgroundTaskRegistrationGroup:...
    def add_background_activated(self, handler: winrt.windows.foundation.TypedEventHandler[BackgroundTaskRegistrationGroup, winrt.windows.applicationmodel.activation.BackgroundActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_background_activated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class BackgroundWorkCost(winrt.system.Object):
    current_background_work_cost: typing.ClassVar[BackgroundWorkCostValue]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundWorkCost: ...

class BluetoothLEAdvertisementPublisherTrigger(winrt.system.Object):
    advertisement: typing.Optional[winrt.windows.devices.bluetooth.advertisement.BluetoothLEAdvertisement]
    use_extended_format: bool
    preferred_transmit_power_level_in_d_bm: typing.Optional[typing.Optional[winrt.system.Int16]]
    is_anonymous: bool
    include_transmit_power_level: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BluetoothLEAdvertisementPublisherTrigger: ...
    def __new__(cls: typing.Type[BluetoothLEAdvertisementPublisherTrigger]) -> BluetoothLEAdvertisementPublisherTrigger:...

class BluetoothLEAdvertisementWatcherTrigger(winrt.system.Object):
    signal_strength_filter: typing.Optional[winrt.windows.devices.bluetooth.BluetoothSignalStrengthFilter]
    advertisement_filter: typing.Optional[winrt.windows.devices.bluetooth.advertisement.BluetoothLEAdvertisementFilter]
    max_out_of_range_timeout: datetime.timedelta
    max_sampling_interval: datetime.timedelta
    min_out_of_range_timeout: datetime.timedelta
    min_sampling_interval: datetime.timedelta
    allow_extended_advertisements: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BluetoothLEAdvertisementWatcherTrigger: ...
    def __new__(cls: typing.Type[BluetoothLEAdvertisementWatcherTrigger]) -> BluetoothLEAdvertisementWatcherTrigger:...

class CachedFileUpdaterTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CachedFileUpdaterTrigger: ...
    def __new__(cls: typing.Type[CachedFileUpdaterTrigger]) -> CachedFileUpdaterTrigger:...

class CachedFileUpdaterTriggerDetails(winrt.system.Object):
    can_request_user_input: bool
    update_request: typing.Optional[winrt.windows.storage.provider.FileUpdateRequest]
    update_target: winrt.windows.storage.provider.CachedFileTarget
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CachedFileUpdaterTriggerDetails: ...

class ChatMessageNotificationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ChatMessageNotificationTrigger: ...
    def __new__(cls: typing.Type[ChatMessageNotificationTrigger]) -> ChatMessageNotificationTrigger:...

class ChatMessageReceivedNotificationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ChatMessageReceivedNotificationTrigger: ...
    def __new__(cls: typing.Type[ChatMessageReceivedNotificationTrigger]) -> ChatMessageReceivedNotificationTrigger:...

class CommunicationBlockingAppSetAsActiveTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommunicationBlockingAppSetAsActiveTrigger: ...
    def __new__(cls: typing.Type[CommunicationBlockingAppSetAsActiveTrigger]) -> CommunicationBlockingAppSetAsActiveTrigger:...

class ContactStoreNotificationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactStoreNotificationTrigger: ...
    def __new__(cls: typing.Type[ContactStoreNotificationTrigger]) -> ContactStoreNotificationTrigger:...

class ContentPrefetchTrigger(winrt.system.Object):
    wait_interval: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentPrefetchTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[ContentPrefetchTrigger], wait_interval: datetime.timedelta) -> ContentPrefetchTrigger:...
    @typing.overload
    def __new__(cls: typing.Type[ContentPrefetchTrigger]) -> ContentPrefetchTrigger:...

class ConversationalAgentTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConversationalAgentTrigger: ...
    def __new__(cls: typing.Type[ConversationalAgentTrigger]) -> ConversationalAgentTrigger:...

class CustomSystemEventTrigger(winrt.system.Object):
    recurrence: CustomSystemEventTriggerRecurrence
    trigger_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CustomSystemEventTrigger: ...
    def __new__(cls: typing.Type[CustomSystemEventTrigger], trigger_id: str, recurrence: CustomSystemEventTriggerRecurrence) -> CustomSystemEventTrigger:...

class DeviceConnectionChangeTrigger(winrt.system.Object):
    maintain_connection: bool
    can_maintain_connection: bool
    device_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceConnectionChangeTrigger: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[DeviceConnectionChangeTrigger]: ...

class DeviceManufacturerNotificationTrigger(winrt.system.Object):
    one_shot: bool
    trigger_qualifier: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceManufacturerNotificationTrigger: ...
    def __new__(cls: typing.Type[DeviceManufacturerNotificationTrigger], trigger_qualifier: str, one_shot: bool) -> DeviceManufacturerNotificationTrigger:...

class DeviceServicingTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceServicingTrigger: ...
    def __new__(cls: typing.Type[DeviceServicingTrigger]) -> DeviceServicingTrigger:...
    @typing.overload
    def request_async(self, device_id: str, expected_duration: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]: ...
    @typing.overload
    def request_async(self, device_id: str, expected_duration: datetime.timedelta, arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]: ...

class DeviceUseTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceUseTrigger: ...
    def __new__(cls: typing.Type[DeviceUseTrigger]) -> DeviceUseTrigger:...
    @typing.overload
    def request_async(self, device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]: ...
    @typing.overload
    def request_async(self, device_id: str, arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[DeviceTriggerResult]: ...

class DeviceWatcherTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceWatcherTrigger: ...

class EmailStoreNotificationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EmailStoreNotificationTrigger: ...
    def __new__(cls: typing.Type[EmailStoreNotificationTrigger]) -> EmailStoreNotificationTrigger:...

class GattCharacteristicNotificationTrigger(winrt.system.Object):
    characteristic: typing.Optional[winrt.windows.devices.bluetooth.genericattributeprofile.GattCharacteristic]
    event_triggering_mode: winrt.windows.devices.bluetooth.background.BluetoothEventTriggeringMode
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattCharacteristicNotificationTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[GattCharacteristicNotificationTrigger], characteristic: typing.Optional[winrt.windows.devices.bluetooth.genericattributeprofile.GattCharacteristic], event_triggering_mode: winrt.windows.devices.bluetooth.background.BluetoothEventTriggeringMode) -> GattCharacteristicNotificationTrigger:...
    @typing.overload
    def __new__(cls: typing.Type[GattCharacteristicNotificationTrigger], characteristic: typing.Optional[winrt.windows.devices.bluetooth.genericattributeprofile.GattCharacteristic]) -> GattCharacteristicNotificationTrigger:...

class GattServiceProviderTrigger(winrt.system.Object):
    advertising_parameters: typing.Optional[winrt.windows.devices.bluetooth.genericattributeprofile.GattServiceProviderAdvertisingParameters]
    service: typing.Optional[winrt.windows.devices.bluetooth.genericattributeprofile.GattLocalService]
    trigger_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProviderTrigger: ...
    @staticmethod
    def create_async(trigger_id: str, service_uuid: uuid.UUID, /) -> winrt.windows.foundation.IAsyncOperation[GattServiceProviderTriggerResult]: ...

class GattServiceProviderTriggerResult(winrt.system.Object):
    error: winrt.windows.devices.bluetooth.BluetoothError
    trigger: typing.Optional[GattServiceProviderTrigger]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProviderTriggerResult: ...

class GeovisitTrigger(winrt.system.Object):
    monitoring_scope: winrt.windows.devices.geolocation.VisitMonitoringScope
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeovisitTrigger: ...
    def __new__(cls: typing.Type[GeovisitTrigger]) -> GeovisitTrigger:...

class LocationTrigger(winrt.system.Object):
    trigger_type: LocationTriggerType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LocationTrigger: ...
    def __new__(cls: typing.Type[LocationTrigger], trigger_type: LocationTriggerType) -> LocationTrigger:...

class MaintenanceTrigger(winrt.system.Object):
    freshness_time: winrt.system.UInt32
    one_shot: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MaintenanceTrigger: ...
    def __new__(cls: typing.Type[MaintenanceTrigger], freshness_time: winrt.system.UInt32, one_shot: bool) -> MaintenanceTrigger:...

class MediaProcessingTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProcessingTrigger: ...
    def __new__(cls: typing.Type[MediaProcessingTrigger]) -> MediaProcessingTrigger:...
    @typing.overload
    def request_async(self) -> winrt.windows.foundation.IAsyncOperation[MediaProcessingTriggerResult]: ...
    @typing.overload
    def request_async(self, arguments: typing.Optional[winrt.windows.foundation.collections.ValueSet], /) -> winrt.windows.foundation.IAsyncOperation[MediaProcessingTriggerResult]: ...

class MobileBroadbandDeviceServiceNotificationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandDeviceServiceNotificationTrigger: ...
    def __new__(cls: typing.Type[MobileBroadbandDeviceServiceNotificationTrigger]) -> MobileBroadbandDeviceServiceNotificationTrigger:...

class MobileBroadbandPcoDataChangeTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandPcoDataChangeTrigger: ...
    def __new__(cls: typing.Type[MobileBroadbandPcoDataChangeTrigger]) -> MobileBroadbandPcoDataChangeTrigger:...

class MobileBroadbandPinLockStateChangeTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandPinLockStateChangeTrigger: ...
    def __new__(cls: typing.Type[MobileBroadbandPinLockStateChangeTrigger]) -> MobileBroadbandPinLockStateChangeTrigger:...

class MobileBroadbandRadioStateChangeTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandRadioStateChangeTrigger: ...
    def __new__(cls: typing.Type[MobileBroadbandRadioStateChangeTrigger]) -> MobileBroadbandRadioStateChangeTrigger:...

class MobileBroadbandRegistrationStateChangeTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandRegistrationStateChangeTrigger: ...
    def __new__(cls: typing.Type[MobileBroadbandRegistrationStateChangeTrigger]) -> MobileBroadbandRegistrationStateChangeTrigger:...

class NetworkOperatorDataUsageTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NetworkOperatorDataUsageTrigger: ...
    def __new__(cls: typing.Type[NetworkOperatorDataUsageTrigger]) -> NetworkOperatorDataUsageTrigger:...

class NetworkOperatorHotspotAuthenticationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NetworkOperatorHotspotAuthenticationTrigger: ...
    def __new__(cls: typing.Type[NetworkOperatorHotspotAuthenticationTrigger]) -> NetworkOperatorHotspotAuthenticationTrigger:...

class NetworkOperatorNotificationTrigger(winrt.system.Object):
    network_account_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NetworkOperatorNotificationTrigger: ...
    def __new__(cls: typing.Type[NetworkOperatorNotificationTrigger], network_account_id: str) -> NetworkOperatorNotificationTrigger:...

class PaymentAppCanMakePaymentTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PaymentAppCanMakePaymentTrigger: ...
    def __new__(cls: typing.Type[PaymentAppCanMakePaymentTrigger]) -> PaymentAppCanMakePaymentTrigger:...

class PhoneTrigger(winrt.system.Object):
    one_shot: bool
    trigger_type: winrt.windows.applicationmodel.calls.background.PhoneTriggerType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneTrigger: ...
    def __new__(cls: typing.Type[PhoneTrigger], type: winrt.windows.applicationmodel.calls.background.PhoneTriggerType, one_shot: bool) -> PhoneTrigger:...

class PushNotificationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[PushNotificationTrigger], application_id: str) -> PushNotificationTrigger:...
    @typing.overload
    def __new__(cls: typing.Type[PushNotificationTrigger]) -> PushNotificationTrigger:...

class RcsEndUserMessageAvailableTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RcsEndUserMessageAvailableTrigger: ...
    def __new__(cls: typing.Type[RcsEndUserMessageAvailableTrigger]) -> RcsEndUserMessageAvailableTrigger:...

class RfcommConnectionTrigger(winrt.system.Object):
    remote_host_name: typing.Optional[winrt.windows.networking.HostName]
    protection_level: winrt.windows.networking.sockets.SocketProtectionLevel
    allow_multiple_connections: bool
    inbound_connection: typing.Optional[winrt.windows.devices.bluetooth.background.RfcommInboundConnectionInformation]
    outbound_connection: typing.Optional[winrt.windows.devices.bluetooth.background.RfcommOutboundConnectionInformation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RfcommConnectionTrigger: ...
    def __new__(cls: typing.Type[RfcommConnectionTrigger]) -> RfcommConnectionTrigger:...

class SecondaryAuthenticationFactorAuthenticationTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SecondaryAuthenticationFactorAuthenticationTrigger: ...
    def __new__(cls: typing.Type[SecondaryAuthenticationFactorAuthenticationTrigger]) -> SecondaryAuthenticationFactorAuthenticationTrigger:...

class SensorDataThresholdTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SensorDataThresholdTrigger: ...
    def __new__(cls: typing.Type[SensorDataThresholdTrigger], threshold: typing.Optional[winrt.windows.devices.sensors.ISensorDataThreshold]) -> SensorDataThresholdTrigger:...

class SmartCardTrigger(winrt.system.Object):
    trigger_type: winrt.windows.devices.smartcards.SmartCardTriggerType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardTrigger: ...
    def __new__(cls: typing.Type[SmartCardTrigger], trigger_type: winrt.windows.devices.smartcards.SmartCardTriggerType) -> SmartCardTrigger:...

class SmsMessageReceivedTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmsMessageReceivedTrigger: ...
    def __new__(cls: typing.Type[SmsMessageReceivedTrigger], filter_rules: typing.Optional[winrt.windows.devices.sms.SmsFilterRules]) -> SmsMessageReceivedTrigger:...

class SocketActivityTrigger(winrt.system.Object):
    is_wake_from_low_power_supported: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SocketActivityTrigger: ...
    def __new__(cls: typing.Type[SocketActivityTrigger]) -> SocketActivityTrigger:...

class StorageLibraryChangeTrackerTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StorageLibraryChangeTrackerTrigger: ...
    def __new__(cls: typing.Type[StorageLibraryChangeTrackerTrigger], tracker: typing.Optional[winrt.windows.storage.StorageLibraryChangeTracker]) -> StorageLibraryChangeTrackerTrigger:...

class StorageLibraryContentChangedTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StorageLibraryContentChangedTrigger: ...
    @staticmethod
    def create(storage_library: typing.Optional[winrt.windows.storage.StorageLibrary], /) -> typing.Optional[StorageLibraryContentChangedTrigger]: ...
    @staticmethod
    def create_from_libraries(storage_libraries: typing.Iterable[winrt.windows.storage.StorageLibrary], /) -> typing.Optional[StorageLibraryContentChangedTrigger]: ...

class SystemCondition(winrt.system.Object):
    condition_type: SystemConditionType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemCondition: ...
    def __new__(cls: typing.Type[SystemCondition], condition_type: SystemConditionType) -> SystemCondition:...

class SystemTrigger(winrt.system.Object):
    one_shot: bool
    trigger_type: SystemTriggerType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemTrigger: ...
    def __new__(cls: typing.Type[SystemTrigger], trigger_type: SystemTriggerType, one_shot: bool) -> SystemTrigger:...

class TetheringEntitlementCheckTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TetheringEntitlementCheckTrigger: ...
    def __new__(cls: typing.Type[TetheringEntitlementCheckTrigger]) -> TetheringEntitlementCheckTrigger:...

class TimeTrigger(winrt.system.Object):
    freshness_time: winrt.system.UInt32
    one_shot: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimeTrigger: ...
    def __new__(cls: typing.Type[TimeTrigger], freshness_time: winrt.system.UInt32, one_shot: bool) -> TimeTrigger:...

class ToastNotificationActionTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToastNotificationActionTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[ToastNotificationActionTrigger], application_id: str) -> ToastNotificationActionTrigger:...
    @typing.overload
    def __new__(cls: typing.Type[ToastNotificationActionTrigger]) -> ToastNotificationActionTrigger:...

class ToastNotificationHistoryChangedTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToastNotificationHistoryChangedTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[ToastNotificationHistoryChangedTrigger], application_id: str) -> ToastNotificationHistoryChangedTrigger:...
    @typing.overload
    def __new__(cls: typing.Type[ToastNotificationHistoryChangedTrigger]) -> ToastNotificationHistoryChangedTrigger:...

class UserNotificationChangedTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserNotificationChangedTrigger: ...
    def __new__(cls: typing.Type[UserNotificationChangedTrigger], notification_kinds: winrt.windows.ui.notifications.NotificationKinds) -> UserNotificationChangedTrigger:...

class WiFiOnDemandHotspotConnectTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotConnectTrigger: ...
    def __new__(cls: typing.Type[WiFiOnDemandHotspotConnectTrigger]) -> WiFiOnDemandHotspotConnectTrigger:...

class WiFiOnDemandHotspotUpdateMetadataTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotUpdateMetadataTrigger: ...
    def __new__(cls: typing.Type[WiFiOnDemandHotspotUpdateMetadataTrigger]) -> WiFiOnDemandHotspotUpdateMetadataTrigger:...

class IBackgroundCondition(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundCondition: ...

class IBackgroundTask(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTask: ...
    def run(self, task_instance: typing.Optional[IBackgroundTaskInstance], /) -> None: ...

class IBackgroundTaskInstance(winrt.system.Object):
    instance_id: uuid.UUID
    progress: winrt.system.UInt32
    suspended_count: winrt.system.UInt32
    task: typing.Optional[BackgroundTaskRegistration]
    trigger_details: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskInstance: ...
    def get_deferral(self) -> typing.Optional[BackgroundTaskDeferral]: ...
    def add_canceled(self, cancel_handler: typing.Optional[BackgroundTaskCanceledEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IBackgroundTaskInstance2(winrt.system.Object):
    instance_id: uuid.UUID
    progress: winrt.system.UInt32
    suspended_count: winrt.system.UInt32
    task: typing.Optional[BackgroundTaskRegistration]
    trigger_details: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskInstance2: ...
    def get_deferral(self) -> typing.Optional[BackgroundTaskDeferral]: ...
    def get_throttle_count(self, counter: BackgroundTaskThrottleCounter, /) -> winrt.system.UInt32: ...
    def add_canceled(self, cancel_handler: typing.Optional[BackgroundTaskCanceledEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IBackgroundTaskInstance4(winrt.system.Object):
    user: typing.Optional[winrt.windows.system.User]
    instance_id: uuid.UUID
    progress: winrt.system.UInt32
    suspended_count: winrt.system.UInt32
    task: typing.Optional[BackgroundTaskRegistration]
    trigger_details: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskInstance4: ...
    def get_deferral(self) -> typing.Optional[BackgroundTaskDeferral]: ...
    def add_canceled(self, cancel_handler: typing.Optional[BackgroundTaskCanceledEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IBackgroundTaskRegistration(winrt.system.Object):
    name: str
    task_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskRegistration: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: typing.Optional[BackgroundTaskCompletedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: typing.Optional[BackgroundTaskProgressEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IBackgroundTaskRegistration2(winrt.system.Object):
    trigger: typing.Optional[IBackgroundTrigger]
    name: str
    task_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskRegistration2: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: typing.Optional[BackgroundTaskCompletedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: typing.Optional[BackgroundTaskProgressEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IBackgroundTaskRegistration3(winrt.system.Object):
    task_group: typing.Optional[BackgroundTaskRegistrationGroup]
    name: str
    task_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskRegistration3: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: typing.Optional[BackgroundTaskCompletedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: typing.Optional[BackgroundTaskProgressEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IBackgroundTrigger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTrigger: ...

