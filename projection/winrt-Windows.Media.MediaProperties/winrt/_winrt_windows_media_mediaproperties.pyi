# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.core
import winrt.windows.storage
import winrt.windows.storage.streams

from winrt.windows.media.mediaproperties import AudioEncodingQuality, MediaMirroringOptions, MediaPixelFormat, MediaRotation, MediaThumbnailFormat, SphericalVideoFrameFormat, StereoscopicVideoPackingMode, VideoEncodingQuality

Self = typing.TypeVar('Self')

class AudioEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioEncodingProperties: ...
    def __new__(cls: typing.Type[AudioEncodingProperties]) -> AudioEncodingProperties:...
    def copy(self) -> typing.Optional[AudioEncodingProperties]: ...
    @staticmethod
    def create_aac(sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    @staticmethod
    def create_aac_adts(sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    @staticmethod
    def create_alac(sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bits_per_sample: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    @staticmethod
    def create_flac(sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bits_per_sample: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    @staticmethod
    def create_mp3(sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    @staticmethod
    def create_pcm(sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bits_per_sample: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    @staticmethod
    def create_wma(sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    def get_format_user_data(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    def set_format_user_data(self, value: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    @_property
    def sample_rate(self) -> winrt.system.UInt32: ...
    @sample_rate.setter
    def sample_rate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def channel_count(self) -> winrt.system.UInt32: ...
    @channel_count.setter
    def channel_count(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bits_per_sample(self) -> winrt.system.UInt32: ...
    @bits_per_sample.setter
    def bits_per_sample(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bitrate(self) -> winrt.system.UInt32: ...
    @bitrate.setter
    def bitrate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_spatial(self) -> bool: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

class ContainerEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContainerEncodingProperties: ...
    def __new__(cls: typing.Type[ContainerEncodingProperties]) -> ContainerEncodingProperties:...
    def copy(self) -> typing.Optional[ContainerEncodingProperties]: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

class H264ProfileIds(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> H264ProfileIds: ...
    baseline: typing.ClassVar[winrt.system.Int32]
    constrained_baseline: typing.ClassVar[winrt.system.Int32]
    extended: typing.ClassVar[winrt.system.Int32]
    high: typing.ClassVar[winrt.system.Int32]
    high10: typing.ClassVar[winrt.system.Int32]
    high422: typing.ClassVar[winrt.system.Int32]
    high444: typing.ClassVar[winrt.system.Int32]
    main: typing.ClassVar[winrt.system.Int32]
    multiview_high: typing.ClassVar[winrt.system.Int32]
    stereo_high: typing.ClassVar[winrt.system.Int32]

class ImageEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageEncodingProperties: ...
    def __new__(cls: typing.Type[ImageEncodingProperties]) -> ImageEncodingProperties:...
    def copy(self) -> typing.Optional[ImageEncodingProperties]: ...
    @staticmethod
    def create_bmp() -> typing.Optional[ImageEncodingProperties]: ...
    @staticmethod
    def create_heif() -> typing.Optional[ImageEncodingProperties]: ...
    @staticmethod
    def create_jpeg() -> typing.Optional[ImageEncodingProperties]: ...
    @staticmethod
    def create_jpeg_x_r() -> typing.Optional[ImageEncodingProperties]: ...
    @staticmethod
    def create_png() -> typing.Optional[ImageEncodingProperties]: ...
    @staticmethod
    def create_uncompressed(format: MediaPixelFormat, /) -> typing.Optional[ImageEncodingProperties]: ...
    @_property
    def width(self) -> winrt.system.UInt32: ...
    @width.setter
    def width(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def height(self) -> winrt.system.UInt32: ...
    @height.setter
    def height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

class MediaEncodingProfile(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaEncodingProfile: ...
    def __new__(cls: typing.Type[MediaEncodingProfile]) -> MediaEncodingProfile:...
    @staticmethod
    def create_alac(quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_avi(quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_flac(quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_from_file_async(file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncOperation[MediaEncodingProfile]: ...
    @staticmethod
    def create_from_stream_async(stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncOperation[MediaEncodingProfile]: ...
    @staticmethod
    def create_hevc(quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_m4a(quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_mp3(quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_mp4(quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_wav(quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_wma(quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    @staticmethod
    def create_wmv(quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def get_audio_tracks(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.media.core.AudioStreamDescriptor]]: ...
    def get_timed_metadata_tracks(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.media.core.TimedMetadataStreamDescriptor]]: ...
    def get_video_tracks(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.media.core.VideoStreamDescriptor]]: ...
    def set_audio_tracks(self, value: typing.Iterable[winrt.windows.media.core.AudioStreamDescriptor], /) -> None: ...
    def set_timed_metadata_tracks(self, value: typing.Iterable[winrt.windows.media.core.TimedMetadataStreamDescriptor], /) -> None: ...
    def set_video_tracks(self, value: typing.Iterable[winrt.windows.media.core.VideoStreamDescriptor], /) -> None: ...
    @_property
    def video(self) -> typing.Optional[VideoEncodingProperties]: ...
    @video.setter
    def video(self, value: typing.Optional[VideoEncodingProperties]) -> None: ...
    @_property
    def container(self) -> typing.Optional[ContainerEncodingProperties]: ...
    @container.setter
    def container(self, value: typing.Optional[ContainerEncodingProperties]) -> None: ...
    @_property
    def audio(self) -> typing.Optional[AudioEncodingProperties]: ...
    @audio.setter
    def audio(self, value: typing.Optional[AudioEncodingProperties]) -> None: ...

class MediaEncodingSubtypes(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaEncodingSubtypes: ...
    asf: typing.ClassVar[str]
    aac: typing.ClassVar[str]
    aac_adts: typing.ClassVar[str]
    ac3: typing.ClassVar[str]
    amr_nb: typing.ClassVar[str]
    amr_wb: typing.ClassVar[str]
    argb32: typing.ClassVar[str]
    mpeg1: typing.ClassVar[str]
    avi: typing.ClassVar[str]
    bgra8: typing.ClassVar[str]
    bmp: typing.ClassVar[str]
    eac3: typing.ClassVar[str]
    float: typing.ClassVar[str]
    gif: typing.ClassVar[str]
    h263: typing.ClassVar[str]
    h264: typing.ClassVar[str]
    h264_es: typing.ClassVar[str]
    hevc: typing.ClassVar[str]
    hevc_es: typing.ClassVar[str]
    iyuv: typing.ClassVar[str]
    jpeg: typing.ClassVar[str]
    jpeg_xr: typing.ClassVar[str]
    mjpg: typing.ClassVar[str]
    mp3: typing.ClassVar[str]
    mpeg: typing.ClassVar[str]
    mpeg2: typing.ClassVar[str]
    mpeg4: typing.ClassVar[str]
    nv12: typing.ClassVar[str]
    pcm: typing.ClassVar[str]
    png: typing.ClassVar[str]
    rgb24: typing.ClassVar[str]
    rgb32: typing.ClassVar[str]
    tiff: typing.ClassVar[str]
    wave: typing.ClassVar[str]
    wma8: typing.ClassVar[str]
    wma9: typing.ClassVar[str]
    wmv3: typing.ClassVar[str]
    wvc1: typing.ClassVar[str]
    yuy2: typing.ClassVar[str]
    yv12: typing.ClassVar[str]
    d16: typing.ClassVar[str]
    l16: typing.ClassVar[str]
    l8: typing.ClassVar[str]
    vp9: typing.ClassVar[str]
    alac: typing.ClassVar[str]
    flac: typing.ClassVar[str]
    p010: typing.ClassVar[str]
    heif: typing.ClassVar[str]
    srt: typing.ClassVar[str]
    ssa: typing.ClassVar[str]
    vob_sub: typing.ClassVar[str]
    pgs: typing.ClassVar[str]

class MediaPropertySet(winrt.system.Object, typing.MutableMapping[_uuid.UUID, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[_uuid.UUID]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: _uuid.UUID, value: winrt.system.Object) -> None: ...
    def __getitem__(self, key: _uuid.UUID) -> winrt.system.Object: ...
    def __delitem__(self, key: _uuid.UUID) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaPropertySet: ...
    def __new__(cls: typing.Type[MediaPropertySet]) -> MediaPropertySet:...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[_uuid.UUID, winrt.system.Object]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[_uuid.UUID, winrt.system.Object]]: ...
    def has_key(self, key: _uuid.UUID, /) -> bool: ...
    def insert(self, key: _uuid.UUID, value: typing.Optional[winrt.system.Object], /) -> bool: ...
    def lookup(self, key: _uuid.UUID, /) -> typing.Optional[winrt.system.Object]: ...
    def remove(self, key: _uuid.UUID, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

class MediaRatio(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaRatio: ...
    @_property
    def numerator(self) -> winrt.system.UInt32: ...
    @numerator.setter
    def numerator(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def denominator(self) -> winrt.system.UInt32: ...
    @denominator.setter
    def denominator(self, value: winrt.system.UInt32) -> None: ...

class Mpeg2ProfileIds(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Mpeg2ProfileIds: ...
    high: typing.ClassVar[winrt.system.Int32]
    main: typing.ClassVar[winrt.system.Int32]
    signal_noise_ratio_scalable: typing.ClassVar[winrt.system.Int32]
    simple: typing.ClassVar[winrt.system.Int32]
    spatially_scalable: typing.ClassVar[winrt.system.Int32]

class TimedMetadataEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimedMetadataEncodingProperties: ...
    def __new__(cls: typing.Type[TimedMetadataEncodingProperties]) -> TimedMetadataEncodingProperties:...
    def copy(self) -> typing.Optional[TimedMetadataEncodingProperties]: ...
    @staticmethod
    def create_pgs() -> typing.Optional[TimedMetadataEncodingProperties]: ...
    @staticmethod
    def create_srt() -> typing.Optional[TimedMetadataEncodingProperties]: ...
    @staticmethod
    def create_ssa(format_user_data: winrt.system.Array[winrt.system.UInt8], /) -> typing.Optional[TimedMetadataEncodingProperties]: ...
    @staticmethod
    def create_vob_sub(format_user_data: winrt.system.Array[winrt.system.UInt8], /) -> typing.Optional[TimedMetadataEncodingProperties]: ...
    def get_format_user_data(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    def set_format_user_data(self, value: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

class VideoEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoEncodingProperties: ...
    def __new__(cls: typing.Type[VideoEncodingProperties]) -> VideoEncodingProperties:...
    def copy(self) -> typing.Optional[VideoEncodingProperties]: ...
    @staticmethod
    def create_h264() -> typing.Optional[VideoEncodingProperties]: ...
    @staticmethod
    def create_hevc() -> typing.Optional[VideoEncodingProperties]: ...
    @staticmethod
    def create_mpeg2() -> typing.Optional[VideoEncodingProperties]: ...
    @staticmethod
    def create_uncompressed(subtype: str, width: winrt.system.UInt32, height: winrt.system.UInt32, /) -> typing.Optional[VideoEncodingProperties]: ...
    def get_format_user_data(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    def set_format_user_data(self, value: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def type(self) -> str: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def width(self) -> winrt.system.UInt32: ...
    @width.setter
    def width(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def height(self) -> winrt.system.UInt32: ...
    @height.setter
    def height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bitrate(self) -> winrt.system.UInt32: ...
    @bitrate.setter
    def bitrate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pixel_aspect_ratio(self) -> typing.Optional[MediaRatio]: ...
    @_property
    def frame_rate(self) -> typing.Optional[MediaRatio]: ...
    @_property
    def profile_id(self) -> winrt.system.Int32: ...
    @profile_id.setter
    def profile_id(self, value: winrt.system.Int32) -> None: ...
    @_property
    def stereoscopic_video_packing_mode(self) -> StereoscopicVideoPackingMode: ...
    @_property
    def spherical_video_frame_format(self) -> SphericalVideoFrameFormat: ...

class IMediaEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMediaEncodingProperties: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def type(self) -> str: ...

