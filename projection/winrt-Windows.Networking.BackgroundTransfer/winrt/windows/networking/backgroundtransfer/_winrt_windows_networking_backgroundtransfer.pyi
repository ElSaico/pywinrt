# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.applicationmodel.background
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.credentials
import winrt.windows.storage
import winrt.windows.storage.streams
import winrt.windows.ui.notifications
import winrt.windows.web

class BackgroundTransferBehavior(enum.IntEnum):
    PARALLEL = 0
    SERIALIZED = 1

class BackgroundTransferCostPolicy(enum.IntEnum):
    DEFAULT = 0
    UNRESTRICTED_ONLY = 1
    ALWAYS = 2

class BackgroundTransferPriority(enum.IntEnum):
    DEFAULT = 0
    HIGH = 1
    LOW = 2

class BackgroundTransferStatus(enum.IntEnum):
    IDLE = 0
    RUNNING = 1
    PAUSED_BY_APPLICATION = 2
    PAUSED_COSTED_NETWORK = 3
    PAUSED_NO_NETWORK = 4
    COMPLETED = 5
    CANCELED = 6
    ERROR = 7
    PAUSED_RECOVERABLE_WEB_ERROR_STATUS = 8
    PAUSED_SYSTEM_POLICY = 32

Self = typing.TypeVar('Self')

class BackgroundDownloadProgress:
    bytes_received: winrt.system.UInt64
    total_bytes_to_receive: winrt.system.UInt64
    status: BackgroundTransferStatus
    has_response_changed: winrt.system.Boolean
    has_restarted: winrt.system.Boolean
    def __new__(cls: typing.Type[BackgroundDownloadProgress], bytes_received: winrt.system.UInt64, total_bytes_to_receive: winrt.system.UInt64, status: BackgroundTransferStatus, has_response_changed: winrt.system.Boolean, has_restarted: winrt.system.Boolean) -> BackgroundDownloadProgress: ...

class BackgroundTransferFileRange:
    offset: winrt.system.UInt64
    length: winrt.system.UInt64
    def __new__(cls: typing.Type[BackgroundTransferFileRange], offset: winrt.system.UInt64, length: winrt.system.UInt64) -> BackgroundTransferFileRange: ...

class BackgroundUploadProgress:
    bytes_received: winrt.system.UInt64
    bytes_sent: winrt.system.UInt64
    total_bytes_to_receive: winrt.system.UInt64
    total_bytes_to_send: winrt.system.UInt64
    status: BackgroundTransferStatus
    has_response_changed: winrt.system.Boolean
    has_restarted: winrt.system.Boolean
    def __new__(cls: typing.Type[BackgroundUploadProgress], bytes_received: winrt.system.UInt64, bytes_sent: winrt.system.UInt64, total_bytes_to_receive: winrt.system.UInt64, total_bytes_to_send: winrt.system.UInt64, status: BackgroundTransferStatus, has_response_changed: winrt.system.Boolean, has_restarted: winrt.system.Boolean) -> BackgroundUploadProgress: ...

class BackgroundDownloader(winrt.system.Object):
    failure_toast_notification: typing.Optional[winrt.windows.ui.notifications.ToastNotification]
    success_tile_notification: typing.Optional[winrt.windows.ui.notifications.TileNotification]
    success_toast_notification: typing.Optional[winrt.windows.ui.notifications.ToastNotification]
    transfer_group: typing.Optional[BackgroundTransferGroup]
    failure_tile_notification: typing.Optional[winrt.windows.ui.notifications.TileNotification]
    completion_group: typing.Optional[BackgroundTransferCompletionGroup]
    cost_policy: BackgroundTransferCostPolicy
    group: str
    method: str
    proxy_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    server_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundDownloader: ...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundDownloader], completion_group: typing.Optional[BackgroundTransferCompletionGroup]) -> BackgroundDownloader:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundDownloader]) -> BackgroundDownloader:...
    @typing.overload
    def create_download(self, uri: typing.Optional[winrt.windows.foundation.Uri], result_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[DownloadOperation]: ...
    @typing.overload
    def create_download(self, uri: typing.Optional[winrt.windows.foundation.Uri], result_file: typing.Optional[winrt.windows.storage.IStorageFile], request_body_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[DownloadOperation]: ...
    def create_download_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], result_file: typing.Optional[winrt.windows.storage.IStorageFile], request_body_stream: typing.Optional[winrt.windows.storage.streams.IInputStream], /) -> winrt.windows.foundation.IAsyncOperation[DownloadOperation]: ...
    @typing.overload
    @staticmethod
    def get_current_downloads_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @typing.overload
    @staticmethod
    def get_current_downloads_async(group: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @staticmethod
    def get_current_downloads_for_transfer_group_async(group: typing.Optional[BackgroundTransferGroup], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @staticmethod
    def request_unconstrained_downloads_async(operations: typing.Iterable[DownloadOperation], /) -> winrt.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...

class BackgroundTransferCompletionGroup(winrt.system.Object):
    is_enabled: winrt.system.Boolean
    trigger: typing.Optional[winrt.windows.applicationmodel.background.IBackgroundTrigger]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferCompletionGroup: ...
    def __new__(cls: typing.Type[BackgroundTransferCompletionGroup]) -> BackgroundTransferCompletionGroup:...
    def enable(self) -> None: ...

class BackgroundTransferCompletionGroupTriggerDetails(winrt.system.Object):
    downloads: typing.Optional[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]
    uploads: typing.Optional[winrt.windows.foundation.collections.IVectorView[UploadOperation]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferCompletionGroupTriggerDetails: ...

class BackgroundTransferContentPart(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferContentPart: ...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTransferContentPart], name: str) -> BackgroundTransferContentPart:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTransferContentPart], name: str, file_name: str) -> BackgroundTransferContentPart:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTransferContentPart]) -> BackgroundTransferContentPart:...
    def set_file(self, value: typing.Optional[winrt.windows.storage.IStorageFile], /) -> None: ...
    def set_header(self, header_name: str, header_value: str, /) -> None: ...
    def set_text(self, value: str, /) -> None: ...

class BackgroundTransferError(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferError: ...
    @staticmethod
    def get_status(hresult: winrt.system.Int32, /) -> winrt.windows.web.WebErrorStatus: ...

class BackgroundTransferGroup(winrt.system.Object):
    transfer_behavior: BackgroundTransferBehavior
    name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferGroup: ...
    @staticmethod
    def create_group(name: str, /) -> typing.Optional[BackgroundTransferGroup]: ...

class BackgroundTransferRangesDownloadedEventArgs(winrt.system.Object):
    added_ranges: typing.Optional[winrt.windows.foundation.collections.IVector[BackgroundTransferFileRange]]
    was_download_restarted: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferRangesDownloadedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class BackgroundUploader(winrt.system.Object):
    server_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    proxy_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    method: str
    group: str
    cost_policy: BackgroundTransferCostPolicy
    failure_tile_notification: typing.Optional[winrt.windows.ui.notifications.TileNotification]
    transfer_group: typing.Optional[BackgroundTransferGroup]
    success_toast_notification: typing.Optional[winrt.windows.ui.notifications.ToastNotification]
    success_tile_notification: typing.Optional[winrt.windows.ui.notifications.TileNotification]
    failure_toast_notification: typing.Optional[winrt.windows.ui.notifications.ToastNotification]
    completion_group: typing.Optional[BackgroundTransferCompletionGroup]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundUploader: ...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundUploader], completion_group: typing.Optional[BackgroundTransferCompletionGroup]) -> BackgroundUploader:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundUploader]) -> BackgroundUploader:...
    def create_upload(self, uri: typing.Optional[winrt.windows.foundation.Uri], source_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], parts: typing.Iterable[BackgroundTransferContentPart], /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str, /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str, boundary: str, /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    def create_upload_from_stream_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], source_stream: typing.Optional[winrt.windows.storage.streams.IInputStream], /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    @staticmethod
    def get_current_uploads_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    @typing.overload
    @staticmethod
    def get_current_uploads_async(group: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    @staticmethod
    def get_current_uploads_for_transfer_group_async(group: typing.Optional[BackgroundTransferGroup], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    @staticmethod
    def request_unconstrained_uploads_async(operations: typing.Iterable[UploadOperation], /) -> winrt.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...

class ContentPrefetcher(winrt.system.Object):
    indirect_content_uri: typing.ClassVar[typing.Optional[winrt.windows.foundation.Uri]]
    content_uris: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.foundation.Uri]]]
    last_successful_prefetch_time: typing.ClassVar[typing.Optional[typing.Optional[datetime.datetime]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentPrefetcher: ...

class DownloadOperation(winrt.system.Object):
    cost_policy: BackgroundTransferCostPolicy
    requested_uri: typing.Optional[winrt.windows.foundation.Uri]
    method: str
    group: str
    guid: winrt.system.Guid
    priority: BackgroundTransferPriority
    progress: BackgroundDownloadProgress
    result_file: typing.Optional[winrt.windows.storage.IStorageFile]
    transfer_group: typing.Optional[BackgroundTransferGroup]
    is_random_access_required: winrt.system.Boolean
    current_web_error_status: typing.Optional[typing.Optional[winrt.windows.web.WebErrorStatus]]
    recoverable_web_error_statuses: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.web.WebErrorStatus]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DownloadOperation: ...
    def attach_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]: ...
    def get_downloaded_ranges(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[BackgroundTransferFileRange]]: ...
    def get_response_information(self) -> typing.Optional[ResponseInformation]: ...
    def get_result_random_access_stream_reference(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    def get_result_stream_at(self, position: winrt.system.UInt64, /) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...
    def make_current_in_transfer_group(self) -> None: ...
    def pause(self) -> None: ...
    def remove_request_header(self, header_name: str, /) -> None: ...
    def resume(self) -> None: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]: ...
    def add_ranges_downloaded(self, event_handler: winrt.windows.foundation.TypedEventHandler[DownloadOperation, BackgroundTransferRangesDownloadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_ranges_downloaded(self, event_cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ResponseInformation(winrt.system.Object):
    actual_uri: typing.Optional[winrt.windows.foundation.Uri]
    headers: typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]
    is_resumable: winrt.system.Boolean
    status_code: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResponseInformation: ...

class UnconstrainedTransferRequestResult(winrt.system.Object):
    is_unconstrained: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UnconstrainedTransferRequestResult: ...

class UploadOperation(winrt.system.Object):
    cost_policy: BackgroundTransferCostPolicy
    group: str
    guid: winrt.system.Guid
    method: str
    requested_uri: typing.Optional[winrt.windows.foundation.Uri]
    priority: BackgroundTransferPriority
    progress: BackgroundUploadProgress
    source_file: typing.Optional[winrt.windows.storage.IStorageFile]
    transfer_group: typing.Optional[BackgroundTransferGroup]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UploadOperation: ...
    def attach_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]: ...
    def get_response_information(self) -> typing.Optional[ResponseInformation]: ...
    def get_result_stream_at(self, position: winrt.system.UInt64, /) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...
    def make_current_in_transfer_group(self) -> None: ...
    def remove_request_header(self, header_name: str, /) -> None: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]: ...

class IBackgroundTransferBase(winrt.system.Object):
    cost_policy: BackgroundTransferCostPolicy
    group: str
    method: str
    proxy_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    server_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferBase: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...

class IBackgroundTransferContentPartFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferContentPartFactory: ...
    def create_with_name(self, name: str, /) -> typing.Optional[BackgroundTransferContentPart]: ...
    def create_with_name_and_file_name(self, name: str, file_name: str, /) -> typing.Optional[BackgroundTransferContentPart]: ...

class IBackgroundTransferOperation(winrt.system.Object):
    cost_policy: BackgroundTransferCostPolicy
    group: str
    guid: winrt.system.Guid
    method: str
    requested_uri: typing.Optional[winrt.windows.foundation.Uri]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferOperation: ...
    def get_response_information(self) -> typing.Optional[ResponseInformation]: ...
    def get_result_stream_at(self, position: winrt.system.UInt64, /) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...

class IBackgroundTransferOperationPriority(winrt.system.Object):
    priority: BackgroundTransferPriority
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferOperationPriority: ...

