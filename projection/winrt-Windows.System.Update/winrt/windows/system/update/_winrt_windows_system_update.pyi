# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import SystemUpdateAttentionRequiredReason, SystemUpdateItemState, SystemUpdateManagerState, SystemUpdateStartInstallAction

Self = typing.TypeVar('Self')

class SystemUpdateItem(winrt.system.Object):
    description: str
    download_progress: winrt.system.Double
    extended_error: winrt.windows.foundation.HResult
    id: str
    install_progress: winrt.system.Double
    revision: winrt.system.UInt32
    state: SystemUpdateItemState
    title: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemUpdateItem: ...

class SystemUpdateLastErrorInfo(winrt.system.Object):
    extended_error: winrt.windows.foundation.HResult
    is_interactive: bool
    state: SystemUpdateManagerState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemUpdateLastErrorInfo: ...

class SystemUpdateManager(winrt.system.Object):
    attention_required_reason: typing.ClassVar[SystemUpdateAttentionRequiredReason]
    download_progress: typing.ClassVar[winrt.system.Double]
    extended_error: typing.ClassVar[winrt.windows.foundation.HResult]
    install_progress: typing.ClassVar[winrt.system.Double]
    last_error_info: typing.ClassVar[typing.Optional[SystemUpdateLastErrorInfo]]
    last_update_check_time: typing.ClassVar[datetime.datetime]
    last_update_install_time: typing.ClassVar[datetime.datetime]
    state: typing.ClassVar[SystemUpdateManagerState]
    user_active_hours_end: typing.ClassVar[datetime.timedelta]
    user_active_hours_max: typing.ClassVar[winrt.system.Int32]
    user_active_hours_start: typing.ClassVar[datetime.timedelta]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemUpdateManager: ...
    @staticmethod
    def block_automatic_reboot_async(lock_id: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @staticmethod
    def get_automatic_reboot_block_ids() -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @staticmethod
    def get_flight_ring() -> str: ...
    @staticmethod
    def get_update_items() -> typing.Optional[winrt.windows.foundation.collections.IVectorView[SystemUpdateItem]]: ...
    @staticmethod
    def is_supported() -> bool: ...
    @staticmethod
    def reboot_to_complete_install() -> None: ...
    @staticmethod
    def set_flight_ring(flight_ring: str, /) -> bool: ...
    @staticmethod
    def start_cancel_updates() -> None: ...
    @staticmethod
    def start_install(action: SystemUpdateStartInstallAction, /) -> None: ...
    @staticmethod
    def try_set_user_active_hours(start: datetime.timedelta, end: datetime.timedelta, /) -> bool: ...
    @staticmethod
    def unblock_automatic_reboot_async(lock_id: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @staticmethod
    def add_state_changed(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_state_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

