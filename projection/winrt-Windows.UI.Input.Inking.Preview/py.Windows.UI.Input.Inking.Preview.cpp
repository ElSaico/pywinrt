// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.UI.Input.Inking.Preview.h"


namespace py::cpp::Windows::UI::Input::Inking::Preview
{
    // ----- PalmRejectionDelayZonePreview class --------------------
    static constexpr const char* const type_name_PalmRejectionDelayZonePreview = "PalmRejectionDelayZonePreview";

    static PyObject* _new_PalmRejectionDelayZonePreview(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_PalmRejectionDelayZonePreview);
        return nullptr;
    }

    static void _dealloc_PalmRejectionDelayZonePreview(py::wrapper::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PalmRejectionDelayZonePreview_Close(py::wrapper::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Preview.PalmRejectionDelayZonePreview", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PalmRejectionDelayZonePreview_CreateForVisual(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Preview.PalmRejectionDelayZonePreview", L"CreateForVisual", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 1);

                return py::convert(winrt::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview::CreateForVisual(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Preview.PalmRejectionDelayZonePreview", L"CreateForVisual", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::UI::Composition::Visual>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 3);

                return py::convert(winrt::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview::CreateForVisual(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_PalmRejectionDelayZonePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PalmRejectionDelayZonePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_PalmRejectionDelayZonePreview(py::wrapper::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview* self) noexcept
    {
        Py_INCREF(self);
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _exit_PalmRejectionDelayZonePreview(py::wrapper::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PalmRejectionDelayZonePreview[] = {
        { "close", reinterpret_cast<PyCFunction>(PalmRejectionDelayZonePreview_Close), METH_VARARGS, nullptr },
        { "create_for_visual", reinterpret_cast<PyCFunction>(PalmRejectionDelayZonePreview_CreateForVisual), METH_VARARGS | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_PalmRejectionDelayZonePreview, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PalmRejectionDelayZonePreview), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_PalmRejectionDelayZonePreview), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_PalmRejectionDelayZonePreview), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_PalmRejectionDelayZonePreview[] = {
        { }
    };

    static PyType_Slot _type_slots_PalmRejectionDelayZonePreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PalmRejectionDelayZonePreview) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PalmRejectionDelayZonePreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PalmRejectionDelayZonePreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PalmRejectionDelayZonePreview) },
        { },
    };

    static PyType_Spec type_spec_PalmRejectionDelayZonePreview =
    {
        "_winrt_windows_ui_input_inking_preview.PalmRejectionDelayZonePreview",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Preview::PalmRejectionDelayZonePreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PalmRejectionDelayZonePreview
    };

    // ----- Windows.UI.Input.Inking.Preview Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Input::Inking::Preview");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_ui_input_inking_preview",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::UI::Input::Inking::Preview

PyMODINIT_FUNC PyInit__winrt_windows_ui_input_inking_preview(void) noexcept
{
    using namespace py::cpp::Windows::UI::Input::Inking::Preview;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    #if PY_VERSION_HEX < 0x03090000
    if (py::register_python_type(module.get(), type_name_PalmRejectionDelayZonePreview, &type_spec_PalmRejectionDelayZonePreview, nullptr, object_bases.get(), nullptr) == -1)
    #else
    if (py::register_python_type(module.get(), type_name_PalmRejectionDelayZonePreview, &type_spec_PalmRejectionDelayZonePreview, object_bases.get(), nullptr) == -1)
    #endif
    {
        return nullptr;
    }


    return module.detach();
}
