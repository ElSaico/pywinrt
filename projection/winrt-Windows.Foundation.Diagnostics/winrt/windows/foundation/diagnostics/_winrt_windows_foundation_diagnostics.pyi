# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.storage

from . import CausalityRelation, CausalitySource, CausalitySynchronousWork, CausalityTraceLevel, ErrorOptions, LoggingFieldFormat, LoggingLevel, LoggingOpcode

Self = typing.TypeVar('Self')

class AsyncCausalityTracer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AsyncCausalityTracer: ...
    @staticmethod
    def trace_operation_completion(trace_level: CausalityTraceLevel, source: CausalitySource, platform_id: uuid.UUID, operation_id: winrt.system.UInt64, status: winrt.windows.foundation.AsyncStatus, /) -> None: ...
    @staticmethod
    def trace_operation_creation(trace_level: CausalityTraceLevel, source: CausalitySource, platform_id: uuid.UUID, operation_id: winrt.system.UInt64, operation_name: str, related_context: winrt.system.UInt64, /) -> None: ...
    @staticmethod
    def trace_operation_relation(trace_level: CausalityTraceLevel, source: CausalitySource, platform_id: uuid.UUID, operation_id: winrt.system.UInt64, relation: CausalityRelation, /) -> None: ...
    @staticmethod
    def trace_synchronous_work_completion(trace_level: CausalityTraceLevel, source: CausalitySource, work: CausalitySynchronousWork, /) -> None: ...
    @staticmethod
    def trace_synchronous_work_start(trace_level: CausalityTraceLevel, source: CausalitySource, platform_id: uuid.UUID, operation_id: winrt.system.UInt64, work: CausalitySynchronousWork, /) -> None: ...
    @staticmethod
    def add_tracing_status_changed(handler: winrt.windows.foundation.EventHandler[TracingStatusChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_tracing_status_changed(cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ErrorDetails(winrt.system.Object):
    description: str
    help_uri: typing.Optional[winrt.windows.foundation.Uri]
    long_description: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ErrorDetails: ...
    @staticmethod
    def create_from_h_result_async(error_code: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncOperation[ErrorDetails]: ...

class FileLoggingSession(winrt.system.Object):
    name: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileLoggingSession: ...
    def __new__(cls: typing.Type[FileLoggingSession], name: str) -> FileLoggingSession:...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], max_level: LoggingLevel, /) -> None: ...
    def close(self) -> None: ...
    def close_and_save_to_file_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    def remove_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    def add_log_file_generated(self, handler: winrt.windows.foundation.TypedEventHandler[IFileLoggingSession, LogFileGeneratedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_log_file_generated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class LogFileGeneratedEventArgs(winrt.system.Object):
    file: typing.Optional[winrt.windows.storage.StorageFile]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LogFileGeneratedEventArgs: ...

class LoggingActivity(winrt.system.Object):
    id: uuid.UUID
    name: str
    channel: typing.Optional[LoggingChannel]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoggingActivity: ...
    @typing.overload
    def __new__(cls: typing.Type[LoggingActivity], activity_name: str, logging_channel: typing.Optional[ILoggingChannel]) -> LoggingActivity:...
    @typing.overload
    def __new__(cls: typing.Type[LoggingActivity], activity_name: str, logging_channel: typing.Optional[ILoggingChannel], level: LoggingLevel) -> LoggingActivity:...
    def close(self) -> None: ...
    @typing.overload
    def is_enabled(self) -> winrt.system.Boolean: ...
    @typing.overload
    def is_enabled(self, level: LoggingLevel, /) -> winrt.system.Boolean: ...
    @typing.overload
    def is_enabled(self, level: LoggingLevel, keywords: winrt.system.Int64, /) -> winrt.system.Boolean: ...
    @typing.overload
    def log_event(self, event_name: str, /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, options: typing.Optional[LoggingOptions], /) -> None: ...
    @typing.overload
    def start_activity(self, start_event_name: str, /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, options: typing.Optional[LoggingOptions], /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def stop_activity(self, stop_event_name: str, /) -> None: ...
    @typing.overload
    def stop_activity(self, stop_event_name: str, fields: typing.Optional[LoggingFields], /) -> None: ...
    @typing.overload
    def stop_activity(self, stop_event_name: str, fields: typing.Optional[LoggingFields], options: typing.Optional[LoggingOptions], /) -> None: ...

class LoggingChannel(winrt.system.Object):
    enabled: winrt.system.Boolean
    level: LoggingLevel
    name: str
    id: uuid.UUID
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoggingChannel: ...
    @typing.overload
    def __new__(cls: typing.Type[LoggingChannel], name: str, options: typing.Optional[LoggingChannelOptions]) -> LoggingChannel:...
    @typing.overload
    def __new__(cls: typing.Type[LoggingChannel], name: str, options: typing.Optional[LoggingChannelOptions], id: uuid.UUID) -> LoggingChannel:...
    @typing.overload
    def __new__(cls: typing.Type[LoggingChannel], name: str) -> LoggingChannel:...
    def close(self) -> None: ...
    @typing.overload
    def is_enabled(self) -> winrt.system.Boolean: ...
    @typing.overload
    def is_enabled(self, level: LoggingLevel, /) -> winrt.system.Boolean: ...
    @typing.overload
    def is_enabled(self, level: LoggingLevel, keywords: winrt.system.Int64, /) -> winrt.system.Boolean: ...
    @typing.overload
    def log_event(self, event_name: str, /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, options: typing.Optional[LoggingOptions], /) -> None: ...
    @typing.overload
    def log_message(self, event_string: str, /) -> None: ...
    @typing.overload
    def log_message(self, event_string: str, level: LoggingLevel, /) -> None: ...
    @typing.overload
    def log_value_pair(self, value1: str, value2: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def log_value_pair(self, value1: str, value2: winrt.system.Int32, level: LoggingLevel, /) -> None: ...
    @typing.overload
    def start_activity(self, start_event_name: str, /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, options: typing.Optional[LoggingOptions], /) -> typing.Optional[LoggingActivity]: ...
    def add_logging_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[ILoggingChannel, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_logging_enabled(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class LoggingChannelOptions(winrt.system.Object):
    group: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoggingChannelOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[LoggingChannelOptions]) -> LoggingChannelOptions:...
    @typing.overload
    def __new__(cls: typing.Type[LoggingChannelOptions], group: uuid.UUID) -> LoggingChannelOptions:...

class LoggingFields(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoggingFields: ...
    def __new__(cls: typing.Type[LoggingFields]) -> LoggingFields:...
    @typing.overload
    def add_boolean(self, name: str, value: winrt.system.Boolean, /) -> None: ...
    @typing.overload
    def add_boolean(self, name: str, value: winrt.system.Boolean, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_boolean(self, name: str, value: winrt.system.Boolean, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_boolean_array(self, name: str, value: winrt.system.Array[winrt.system.Boolean], /) -> None: ...
    @typing.overload
    def add_boolean_array(self, name: str, value: winrt.system.Array[winrt.system.Boolean], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_boolean_array(self, name: str, value: winrt.system.Array[winrt.system.Boolean], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_char16(self, name: str, value: winrt.system.Char16, /) -> None: ...
    @typing.overload
    def add_char16(self, name: str, value: winrt.system.Char16, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_char16(self, name: str, value: winrt.system.Char16, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_char16_array(self, name: str, value: winrt.system.Array[winrt.system.Char16], /) -> None: ...
    @typing.overload
    def add_char16_array(self, name: str, value: winrt.system.Array[winrt.system.Char16], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_char16_array(self, name: str, value: winrt.system.Array[winrt.system.Char16], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_date_time(self, name: str, value: datetime.datetime, /) -> None: ...
    @typing.overload
    def add_date_time(self, name: str, value: datetime.datetime, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_date_time(self, name: str, value: datetime.datetime, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_date_time_array(self, name: str, value: winrt.system.Array[datetime.datetime], /) -> None: ...
    @typing.overload
    def add_date_time_array(self, name: str, value: winrt.system.Array[datetime.datetime], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_date_time_array(self, name: str, value: winrt.system.Array[datetime.datetime], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_double(self, name: str, value: winrt.system.Double, /) -> None: ...
    @typing.overload
    def add_double(self, name: str, value: winrt.system.Double, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_double(self, name: str, value: winrt.system.Double, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_double_array(self, name: str, value: winrt.system.Array[winrt.system.Double], /) -> None: ...
    @typing.overload
    def add_double_array(self, name: str, value: winrt.system.Array[winrt.system.Double], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_double_array(self, name: str, value: winrt.system.Array[winrt.system.Double], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_empty(self, name: str, /) -> None: ...
    @typing.overload
    def add_empty(self, name: str, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_empty(self, name: str, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_guid(self, name: str, value: uuid.UUID, /) -> None: ...
    @typing.overload
    def add_guid(self, name: str, value: uuid.UUID, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_guid(self, name: str, value: uuid.UUID, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_guid_array(self, name: str, value: winrt.system.Array[uuid.UUID], /) -> None: ...
    @typing.overload
    def add_guid_array(self, name: str, value: winrt.system.Array[uuid.UUID], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_guid_array(self, name: str, value: winrt.system.Array[uuid.UUID], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_int16(self, name: str, value: winrt.system.Int16, /) -> None: ...
    @typing.overload
    def add_int16(self, name: str, value: winrt.system.Int16, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_int16(self, name: str, value: winrt.system.Int16, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_int16_array(self, name: str, value: winrt.system.Array[winrt.system.Int16], /) -> None: ...
    @typing.overload
    def add_int16_array(self, name: str, value: winrt.system.Array[winrt.system.Int16], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_int16_array(self, name: str, value: winrt.system.Array[winrt.system.Int16], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_int32(self, name: str, value: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_int32(self, name: str, value: winrt.system.Int32, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_int32(self, name: str, value: winrt.system.Int32, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_int32_array(self, name: str, value: winrt.system.Array[winrt.system.Int32], /) -> None: ...
    @typing.overload
    def add_int32_array(self, name: str, value: winrt.system.Array[winrt.system.Int32], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_int32_array(self, name: str, value: winrt.system.Array[winrt.system.Int32], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_int64(self, name: str, value: winrt.system.Int64, /) -> None: ...
    @typing.overload
    def add_int64(self, name: str, value: winrt.system.Int64, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_int64(self, name: str, value: winrt.system.Int64, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_int64_array(self, name: str, value: winrt.system.Array[winrt.system.Int64], /) -> None: ...
    @typing.overload
    def add_int64_array(self, name: str, value: winrt.system.Array[winrt.system.Int64], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_int64_array(self, name: str, value: winrt.system.Array[winrt.system.Int64], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_point(self, name: str, value: winrt.windows.foundation.Point, /) -> None: ...
    @typing.overload
    def add_point(self, name: str, value: winrt.windows.foundation.Point, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_point(self, name: str, value: winrt.windows.foundation.Point, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_point_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Point], /) -> None: ...
    @typing.overload
    def add_point_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Point], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_point_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Point], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_rect(self, name: str, value: winrt.windows.foundation.Rect, /) -> None: ...
    @typing.overload
    def add_rect(self, name: str, value: winrt.windows.foundation.Rect, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_rect(self, name: str, value: winrt.windows.foundation.Rect, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_rect_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Rect], /) -> None: ...
    @typing.overload
    def add_rect_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Rect], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_rect_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Rect], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_single(self, name: str, value: winrt.system.Single, /) -> None: ...
    @typing.overload
    def add_single(self, name: str, value: winrt.system.Single, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_single(self, name: str, value: winrt.system.Single, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_single_array(self, name: str, value: winrt.system.Array[winrt.system.Single], /) -> None: ...
    @typing.overload
    def add_single_array(self, name: str, value: winrt.system.Array[winrt.system.Single], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_single_array(self, name: str, value: winrt.system.Array[winrt.system.Single], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_size(self, name: str, value: winrt.windows.foundation.Size, /) -> None: ...
    @typing.overload
    def add_size(self, name: str, value: winrt.windows.foundation.Size, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_size(self, name: str, value: winrt.windows.foundation.Size, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_size_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Size], /) -> None: ...
    @typing.overload
    def add_size_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Size], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_size_array(self, name: str, value: winrt.system.Array[winrt.windows.foundation.Size], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_string(self, name: str, value: str, /) -> None: ...
    @typing.overload
    def add_string(self, name: str, value: str, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_string(self, name: str, value: str, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_string_array(self, name: str, value: winrt.system.Array[str], /) -> None: ...
    @typing.overload
    def add_string_array(self, name: str, value: winrt.system.Array[str], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_string_array(self, name: str, value: winrt.system.Array[str], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_time_span(self, name: str, value: datetime.timedelta, /) -> None: ...
    @typing.overload
    def add_time_span(self, name: str, value: datetime.timedelta, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_time_span(self, name: str, value: datetime.timedelta, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_time_span_array(self, name: str, value: winrt.system.Array[datetime.timedelta], /) -> None: ...
    @typing.overload
    def add_time_span_array(self, name: str, value: winrt.system.Array[datetime.timedelta], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_time_span_array(self, name: str, value: winrt.system.Array[datetime.timedelta], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint16(self, name: str, value: winrt.system.UInt16, /) -> None: ...
    @typing.overload
    def add_uint16(self, name: str, value: winrt.system.UInt16, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint16(self, name: str, value: winrt.system.UInt16, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint16_array(self, name: str, value: winrt.system.Array[winrt.system.UInt16], /) -> None: ...
    @typing.overload
    def add_uint16_array(self, name: str, value: winrt.system.Array[winrt.system.UInt16], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint16_array(self, name: str, value: winrt.system.Array[winrt.system.UInt16], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint32(self, name: str, value: winrt.system.UInt32, /) -> None: ...
    @typing.overload
    def add_uint32(self, name: str, value: winrt.system.UInt32, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint32(self, name: str, value: winrt.system.UInt32, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint32_array(self, name: str, value: winrt.system.Array[winrt.system.UInt32], /) -> None: ...
    @typing.overload
    def add_uint32_array(self, name: str, value: winrt.system.Array[winrt.system.UInt32], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint32_array(self, name: str, value: winrt.system.Array[winrt.system.UInt32], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint64(self, name: str, value: winrt.system.UInt64, /) -> None: ...
    @typing.overload
    def add_uint64(self, name: str, value: winrt.system.UInt64, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint64(self, name: str, value: winrt.system.UInt64, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint64_array(self, name: str, value: winrt.system.Array[winrt.system.UInt64], /) -> None: ...
    @typing.overload
    def add_uint64_array(self, name: str, value: winrt.system.Array[winrt.system.UInt64], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint64_array(self, name: str, value: winrt.system.Array[winrt.system.UInt64], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint8(self, name: str, value: winrt.system.UInt8, /) -> None: ...
    @typing.overload
    def add_uint8(self, name: str, value: winrt.system.UInt8, format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint8(self, name: str, value: winrt.system.UInt8, format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def add_uint8_array(self, name: str, value: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    @typing.overload
    def add_uint8_array(self, name: str, value: winrt.system.Array[winrt.system.UInt8], format: LoggingFieldFormat, /) -> None: ...
    @typing.overload
    def add_uint8_array(self, name: str, value: winrt.system.Array[winrt.system.UInt8], format: LoggingFieldFormat, tags: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def begin_struct(self, name: str, /) -> None: ...
    @typing.overload
    def begin_struct(self, name: str, tags: winrt.system.Int32, /) -> None: ...
    def clear(self) -> None: ...
    def end_struct(self) -> None: ...

class LoggingOptions(winrt.system.Object):
    task: winrt.system.Int16
    tags: winrt.system.Int32
    related_activity_id: uuid.UUID
    opcode: LoggingOpcode
    keywords: winrt.system.Int64
    activity_id: uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoggingOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[LoggingOptions]) -> LoggingOptions:...
    @typing.overload
    def __new__(cls: typing.Type[LoggingOptions], keywords: winrt.system.Int64) -> LoggingOptions:...

class LoggingSession(winrt.system.Object):
    name: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoggingSession: ...
    def __new__(cls: typing.Type[LoggingSession], name: str) -> LoggingSession:...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], max_level: LoggingLevel, /) -> None: ...
    def close(self) -> None: ...
    def remove_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    def save_to_file_async(self, folder: typing.Optional[winrt.windows.storage.IStorageFolder], file_name: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...

class RuntimeBrokerErrorSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RuntimeBrokerErrorSettings: ...
    def __new__(cls: typing.Type[RuntimeBrokerErrorSettings]) -> RuntimeBrokerErrorSettings:...
    def get_error_options(self) -> ErrorOptions: ...
    def set_error_options(self, value: ErrorOptions, /) -> None: ...

class TracingStatusChangedEventArgs(winrt.system.Object):
    enabled: winrt.system.Boolean
    trace_level: CausalityTraceLevel
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TracingStatusChangedEventArgs: ...

class IErrorReportingSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IErrorReportingSettings: ...
    def get_error_options(self) -> ErrorOptions: ...
    def set_error_options(self, value: ErrorOptions, /) -> None: ...

class IFileLoggingSession(winrt.system.Object):
    name: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFileLoggingSession: ...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], max_level: LoggingLevel, /) -> None: ...
    def close(self) -> None: ...
    def close_and_save_to_file_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    def remove_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    def add_log_file_generated(self, handler: winrt.windows.foundation.TypedEventHandler[IFileLoggingSession, LogFileGeneratedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_log_file_generated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ILoggingChannel(winrt.system.Object):
    enabled: winrt.system.Boolean
    level: LoggingLevel
    name: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILoggingChannel: ...
    def close(self) -> None: ...
    @typing.overload
    def log_message(self, event_string: str, /) -> None: ...
    @typing.overload
    def log_message(self, event_string: str, level: LoggingLevel, /) -> None: ...
    @typing.overload
    def log_value_pair(self, value1: str, value2: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def log_value_pair(self, value1: str, value2: winrt.system.Int32, level: LoggingLevel, /) -> None: ...
    def add_logging_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[ILoggingChannel, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_logging_enabled(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ILoggingSession(winrt.system.Object):
    name: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILoggingSession: ...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    @typing.overload
    def add_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], max_level: LoggingLevel, /) -> None: ...
    def close(self) -> None: ...
    def remove_logging_channel(self, logging_channel: typing.Optional[ILoggingChannel], /) -> None: ...
    def save_to_file_async(self, folder: typing.Optional[winrt.windows.storage.IStorageFolder], file_name: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...

class ILoggingTarget(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ILoggingTarget: ...
    @typing.overload
    def is_enabled(self) -> winrt.system.Boolean: ...
    @typing.overload
    def is_enabled(self, level: LoggingLevel, /) -> winrt.system.Boolean: ...
    @typing.overload
    def is_enabled(self, level: LoggingLevel, keywords: winrt.system.Int64, /) -> winrt.system.Boolean: ...
    @typing.overload
    def log_event(self, event_name: str, /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, /) -> None: ...
    @typing.overload
    def log_event(self, event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, options: typing.Optional[LoggingOptions], /) -> None: ...
    @typing.overload
    def start_activity(self, start_event_name: str, /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, /) -> typing.Optional[LoggingActivity]: ...
    @typing.overload
    def start_activity(self, start_event_name: str, fields: typing.Optional[LoggingFields], level: LoggingLevel, options: typing.Optional[LoggingOptions], /) -> typing.Optional[LoggingActivity]: ...

