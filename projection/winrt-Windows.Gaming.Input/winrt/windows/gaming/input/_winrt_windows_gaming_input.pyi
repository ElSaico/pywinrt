# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.devices.haptics
import winrt.windows.devices.power
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.gaming.input.forcefeedback
import winrt.windows.system

from . import ArcadeStickButtons, FlightStickButtons, GameControllerButtonLabel, GameControllerSwitchKind, GameControllerSwitchPosition, GamepadButtons, OptionalUINavigationButtons, RacingWheelButtons, RequiredUINavigationButtons

Self = typing.TypeVar('Self')

class ArcadeStickReading:
    timestamp: winrt.system.UInt64
    buttons: ArcadeStickButtons
    def __new__(cls: typing.Type[ArcadeStickReading], timestamp: winrt.system.UInt64, buttons: ArcadeStickButtons) -> ArcadeStickReading: ...

class FlightStickReading:
    timestamp: winrt.system.UInt64
    buttons: FlightStickButtons
    hat_switch: GameControllerSwitchPosition
    roll: winrt.system.Double
    pitch: winrt.system.Double
    yaw: winrt.system.Double
    throttle: winrt.system.Double
    def __new__(cls: typing.Type[FlightStickReading], timestamp: winrt.system.UInt64, buttons: FlightStickButtons, hat_switch: GameControllerSwitchPosition, roll: winrt.system.Double, pitch: winrt.system.Double, yaw: winrt.system.Double, throttle: winrt.system.Double) -> FlightStickReading: ...

class GamepadReading:
    timestamp: winrt.system.UInt64
    buttons: GamepadButtons
    left_trigger: winrt.system.Double
    right_trigger: winrt.system.Double
    left_thumbstick_x: winrt.system.Double
    left_thumbstick_y: winrt.system.Double
    right_thumbstick_x: winrt.system.Double
    right_thumbstick_y: winrt.system.Double
    def __new__(cls: typing.Type[GamepadReading], timestamp: winrt.system.UInt64, buttons: GamepadButtons, left_trigger: winrt.system.Double, right_trigger: winrt.system.Double, left_thumbstick_x: winrt.system.Double, left_thumbstick_y: winrt.system.Double, right_thumbstick_x: winrt.system.Double, right_thumbstick_y: winrt.system.Double) -> GamepadReading: ...

class GamepadVibration:
    left_motor: winrt.system.Double
    right_motor: winrt.system.Double
    left_trigger: winrt.system.Double
    right_trigger: winrt.system.Double
    def __new__(cls: typing.Type[GamepadVibration], left_motor: winrt.system.Double, right_motor: winrt.system.Double, left_trigger: winrt.system.Double, right_trigger: winrt.system.Double) -> GamepadVibration: ...

class RacingWheelReading:
    timestamp: winrt.system.UInt64
    buttons: RacingWheelButtons
    pattern_shifter_gear: winrt.system.Int32
    wheel: winrt.system.Double
    throttle: winrt.system.Double
    brake: winrt.system.Double
    clutch: winrt.system.Double
    handbrake: winrt.system.Double
    def __new__(cls: typing.Type[RacingWheelReading], timestamp: winrt.system.UInt64, buttons: RacingWheelButtons, pattern_shifter_gear: winrt.system.Int32, wheel: winrt.system.Double, throttle: winrt.system.Double, brake: winrt.system.Double, clutch: winrt.system.Double, handbrake: winrt.system.Double) -> RacingWheelReading: ...

class UINavigationReading:
    timestamp: winrt.system.UInt64
    required_buttons: RequiredUINavigationButtons
    optional_buttons: OptionalUINavigationButtons
    def __new__(cls: typing.Type[UINavigationReading], timestamp: winrt.system.UInt64, required_buttons: RequiredUINavigationButtons, optional_buttons: OptionalUINavigationButtons) -> UINavigationReading: ...

class ArcadeStick(winrt.system.Object):
    headset: typing.Optional[Headset]
    is_wireless: winrt.system.Boolean
    user: typing.Optional[winrt.windows.system.User]
    arcade_sticks: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[ArcadeStick]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ArcadeStick: ...
    @staticmethod
    def from_game_controller(game_controller: typing.Optional[IGameController], /) -> typing.Optional[ArcadeStick]: ...
    def get_button_label(self, button: ArcadeStickButtons, /) -> GameControllerButtonLabel: ...
    def get_current_reading(self) -> ArcadeStickReading: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...
    def add_headset_connected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_connected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_headset_disconnected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_user_changed(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, winrt.windows.system.UserChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_user_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_arcade_stick_added(value: winrt.windows.foundation.EventHandler[ArcadeStick], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_arcade_stick_added(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_arcade_stick_removed(value: winrt.windows.foundation.EventHandler[ArcadeStick], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_arcade_stick_removed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class FlightStick(winrt.system.Object):
    hat_switch_kind: GameControllerSwitchKind
    headset: typing.Optional[Headset]
    is_wireless: winrt.system.Boolean
    user: typing.Optional[winrt.windows.system.User]
    flight_sticks: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[FlightStick]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlightStick: ...
    @staticmethod
    def from_game_controller(game_controller: typing.Optional[IGameController], /) -> typing.Optional[FlightStick]: ...
    def get_button_label(self, button: FlightStickButtons, /) -> GameControllerButtonLabel: ...
    def get_current_reading(self) -> FlightStickReading: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...
    def add_headset_connected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_connected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_headset_disconnected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_user_changed(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, winrt.windows.system.UserChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_user_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_flight_stick_added(value: winrt.windows.foundation.EventHandler[FlightStick], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_flight_stick_added(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_flight_stick_removed(value: winrt.windows.foundation.EventHandler[FlightStick], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_flight_stick_removed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class Gamepad(winrt.system.Object):
    headset: typing.Optional[Headset]
    is_wireless: winrt.system.Boolean
    user: typing.Optional[winrt.windows.system.User]
    vibration: GamepadVibration
    gamepads: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[Gamepad]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Gamepad: ...
    @staticmethod
    def from_game_controller(game_controller: typing.Optional[IGameController], /) -> typing.Optional[Gamepad]: ...
    def get_button_label(self, button: GamepadButtons, /) -> GameControllerButtonLabel: ...
    def get_current_reading(self) -> GamepadReading: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...
    def add_headset_connected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_connected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_headset_disconnected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_user_changed(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, winrt.windows.system.UserChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_user_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_gamepad_added(value: winrt.windows.foundation.EventHandler[Gamepad], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_gamepad_added(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_gamepad_removed(value: winrt.windows.foundation.EventHandler[Gamepad], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_gamepad_removed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class Headset(winrt.system.Object):
    capture_device_id: str
    render_device_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Headset: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...

class RacingWheel(winrt.system.Object):
    headset: typing.Optional[Headset]
    is_wireless: winrt.system.Boolean
    user: typing.Optional[winrt.windows.system.User]
    has_clutch: winrt.system.Boolean
    has_handbrake: winrt.system.Boolean
    has_pattern_shifter: winrt.system.Boolean
    max_pattern_shifter_gear: winrt.system.Int32
    max_wheel_angle: winrt.system.Double
    wheel_motor: typing.Optional[winrt.windows.gaming.input.forcefeedback.ForceFeedbackMotor]
    racing_wheels: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[RacingWheel]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RacingWheel: ...
    @staticmethod
    def from_game_controller(game_controller: typing.Optional[IGameController], /) -> typing.Optional[RacingWheel]: ...
    def get_button_label(self, button: RacingWheelButtons, /) -> GameControllerButtonLabel: ...
    def get_current_reading(self) -> RacingWheelReading: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...
    def add_headset_connected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_connected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_headset_disconnected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_user_changed(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, winrt.windows.system.UserChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_user_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_racing_wheel_added(value: winrt.windows.foundation.EventHandler[RacingWheel], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_racing_wheel_added(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_racing_wheel_removed(value: winrt.windows.foundation.EventHandler[RacingWheel], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_racing_wheel_removed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RawGameController(winrt.system.Object):
    headset: typing.Optional[Headset]
    is_wireless: winrt.system.Boolean
    user: typing.Optional[winrt.windows.system.User]
    axis_count: winrt.system.Int32
    button_count: winrt.system.Int32
    force_feedback_motors: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.gaming.input.forcefeedback.ForceFeedbackMotor]]
    hardware_product_id: winrt.system.UInt16
    hardware_vendor_id: winrt.system.UInt16
    switch_count: winrt.system.Int32
    display_name: str
    non_roamable_id: str
    simple_haptics_controllers: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.devices.haptics.SimpleHapticsController]]
    raw_game_controllers: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[RawGameController]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RawGameController: ...
    @staticmethod
    def from_game_controller(game_controller: typing.Optional[IGameController], /) -> typing.Optional[RawGameController]: ...
    def get_button_label(self, button_index: winrt.system.Int32, /) -> GameControllerButtonLabel: ...
    def get_current_reading(self, button_array: winrt.system.Array[winrt.system.Boolean], switch_array: winrt.system.Array[GameControllerSwitchPosition], axis_array: winrt.system.Array[winrt.system.Double], /) -> winrt.system.UInt64: ...
    def get_switch_kind(self, switch_index: winrt.system.Int32, /) -> GameControllerSwitchKind: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...
    def add_headset_connected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_connected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_headset_disconnected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_user_changed(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, winrt.windows.system.UserChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_user_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_raw_game_controller_added(value: winrt.windows.foundation.EventHandler[RawGameController], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_raw_game_controller_added(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_raw_game_controller_removed(value: winrt.windows.foundation.EventHandler[RawGameController], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_raw_game_controller_removed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class UINavigationController(winrt.system.Object):
    headset: typing.Optional[Headset]
    is_wireless: winrt.system.Boolean
    user: typing.Optional[winrt.windows.system.User]
    u_i_navigation_controllers: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[UINavigationController]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UINavigationController: ...
    @staticmethod
    def from_game_controller(game_controller: typing.Optional[IGameController], /) -> typing.Optional[UINavigationController]: ...
    def get_current_reading(self) -> UINavigationReading: ...
    def get_optional_button_label(self, button: OptionalUINavigationButtons, /) -> GameControllerButtonLabel: ...
    def get_required_button_label(self, button: RequiredUINavigationButtons, /) -> GameControllerButtonLabel: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...
    def add_headset_connected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_connected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_headset_disconnected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_user_changed(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, winrt.windows.system.UserChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_user_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_u_i_navigation_controller_added(value: winrt.windows.foundation.EventHandler[UINavigationController], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_u_i_navigation_controller_added(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_u_i_navigation_controller_removed(value: winrt.windows.foundation.EventHandler[UINavigationController], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_u_i_navigation_controller_removed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IGameController(winrt.system.Object):
    headset: typing.Optional[Headset]
    is_wireless: winrt.system.Boolean
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IGameController: ...
    def add_headset_connected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_connected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_headset_disconnected(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, Headset], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_headset_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_user_changed(self, value: winrt.windows.foundation.TypedEventHandler[IGameController, winrt.windows.system.UserChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_user_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IGameControllerBatteryInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IGameControllerBatteryInfo: ...
    def try_get_battery_report(self) -> typing.Optional[winrt.windows.devices.power.BatteryReport]: ...

