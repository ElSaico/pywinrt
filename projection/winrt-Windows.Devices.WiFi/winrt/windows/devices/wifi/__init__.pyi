# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking.connectivity
import winrt.windows.security.credentials

class WiFiAccessStatus(enum.IntEnum):
    UNSPECIFIED = 0
    ALLOWED = 1
    DENIED_BY_USER = 2
    DENIED_BY_SYSTEM = 3

class WiFiConnectionMethod(enum.IntEnum):
    DEFAULT = 0
    WPS_PIN = 1
    WPS_PUSH_BUTTON = 2

class WiFiConnectionStatus(enum.IntEnum):
    UNSPECIFIED_FAILURE = 0
    SUCCESS = 1
    ACCESS_REVOKED = 2
    INVALID_CREDENTIAL = 3
    NETWORK_NOT_AVAILABLE = 4
    TIMEOUT = 5
    UNSUPPORTED_AUTHENTICATION_PROTOCOL = 6

class WiFiNetworkKind(enum.IntEnum):
    ANY = 0
    INFRASTRUCTURE = 1
    ADHOC = 2

class WiFiOnDemandHotspotAvailability(enum.IntEnum):
    AVAILABLE = 0
    UNAVAILABLE = 1

class WiFiOnDemandHotspotCellularBars(enum.IntEnum):
    ZERO_BARS = 0
    ONE_BAR = 1
    TWO_BARS = 2
    THREE_BARS = 3
    FOUR_BARS = 4
    FIVE_BARS = 5

class WiFiOnDemandHotspotConnectStatus(enum.IntEnum):
    UNSPECIFIED_FAILURE = 0
    SUCCESS = 1
    APP_TIMED_OUT = 2
    INVALID_CREDENTIAL = 3
    NETWORK_NOT_AVAILABLE = 4
    UNSUPPORTED_AUTHENTICATION_PROTOCOL = 5
    BLUETOOTH_CONNECT_FAILED = 6
    BLUETOOTH_TRANSMISSION_ERROR = 7
    OPERATION_CANCELED_BY_USER = 8
    ENTITLEMENT_CHECK_FAILED = 9
    NO_CELLULAR_SIGNAL = 10
    CELLULAR_DATA_TURNED_OFF = 11
    WLAN_CONNECT_FAILED = 12
    WLAN_NOT_VISIBLE = 13
    ACCESS_POINT_CANNOT_CONNECT = 14
    CELLULAR_CONNECT_TIMED_OUT = 15
    ROAMING_NOT_ALLOWED = 16
    PAIRING_REQUIRED = 17
    DATA_LIMIT_REACHED = 18

class WiFiPhyKind(enum.IntEnum):
    UNKNOWN = 0
    FHSS = 1
    DSSS = 2
    I_R_BASEBAND = 3
    OFDM = 4
    HRDSSS = 5
    ERP = 6
    H_T = 7
    VHT = 8
    DMG = 9
    H_E = 10
    EHT = 11

class WiFiReconnectionKind(enum.IntEnum):
    AUTOMATIC = 0
    MANUAL = 1

class WiFiWpsConfigurationStatus(enum.IntEnum):
    UNSPECIFIED_FAILURE = 0
    SUCCESS = 1
    TIMEOUT = 2

class WiFiWpsKind(enum.IntEnum):
    UNKNOWN = 0
    PIN = 1
    PUSH_BUTTON = 2
    NFC = 3
    ETHERNET = 4
    USB = 5

Self = typing.TypeVar('Self')

class WiFiAdapter(winrt.system.Object):
    network_adapter: typing.Optional[winrt.windows.networking.connectivity.NetworkAdapter]
    network_report: typing.Optional[WiFiNetworkReport]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiAdapter: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], ssid: str, /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], ssid: str, connection_method: WiFiConnectionMethod, /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    def disconnect(self) -> None: ...
    @staticmethod
    def find_all_adapters_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[WiFiAdapter]]: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[WiFiAdapter]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def get_wps_configuration_async(self, available_network: typing.Optional[WiFiAvailableNetwork], /) -> winrt.windows.foundation.IAsyncOperation[WiFiWpsConfigurationResult]: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[WiFiAccessStatus]: ...
    def scan_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def add_available_networks_changed(self, args: winrt.windows.foundation.TypedEventHandler[WiFiAdapter, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_available_networks_changed(self, event_cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WiFiAvailableNetwork(winrt.system.Object):
    beacon_interval: datetime.timedelta
    bssid: str
    channel_center_frequency_in_kilohertz: winrt.system.Int32
    is_wi_fi_direct: winrt.system.Boolean
    network_kind: WiFiNetworkKind
    network_rssi_in_decibel_milliwatts: winrt.system.Double
    phy_kind: WiFiPhyKind
    security_settings: typing.Optional[winrt.windows.networking.connectivity.NetworkSecuritySettings]
    signal_bars: winrt.system.UInt8
    ssid: str
    uptime: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiAvailableNetwork: ...

class WiFiConnectionResult(winrt.system.Object):
    connection_status: WiFiConnectionStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiConnectionResult: ...

class WiFiNetworkReport(winrt.system.Object):
    available_networks: typing.Optional[winrt.windows.foundation.collections.IVectorView[WiFiAvailableNetwork]]
    timestamp: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiNetworkReport: ...

class WiFiOnDemandHotspotConnectTriggerDetails(winrt.system.Object):
    requested_network: typing.Optional[WiFiOnDemandHotspotNetwork]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotConnectTriggerDetails: ...
    def connect(self) -> typing.Optional[WiFiOnDemandHotspotConnectionResult]: ...
    def connect_async(self) -> winrt.windows.foundation.IAsyncOperation[WiFiOnDemandHotspotConnectionResult]: ...
    def report_error(self, status: WiFiOnDemandHotspotConnectStatus, /) -> None: ...

class WiFiOnDemandHotspotConnectionResult(winrt.system.Object):
    status: WiFiOnDemandHotspotConnectStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotConnectionResult: ...

class WiFiOnDemandHotspotNetwork(winrt.system.Object):
    id: winrt.system.Guid
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotNetwork: ...
    @staticmethod
    def get_or_create_by_id(network_id: winrt.system.Guid, /) -> typing.Optional[WiFiOnDemandHotspotNetwork]: ...
    def get_properties(self) -> typing.Optional[WiFiOnDemandHotspotNetworkProperties]: ...
    def update_properties(self, new_properties: typing.Optional[WiFiOnDemandHotspotNetworkProperties], /) -> None: ...

class WiFiOnDemandHotspotNetworkProperties(winrt.system.Object):
    ssid: str
    remaining_battery_percent: typing.Optional[typing.Optional[winrt.system.UInt32]]
    password: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    is_metered: winrt.system.Boolean
    display_name: str
    cellular_bars: typing.Optional[typing.Optional[WiFiOnDemandHotspotCellularBars]]
    availability: WiFiOnDemandHotspotAvailability
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotNetworkProperties: ...

class WiFiWpsConfigurationResult(winrt.system.Object):
    status: WiFiWpsConfigurationStatus
    supported_wps_kinds: typing.Optional[winrt.windows.foundation.collections.IVectorView[WiFiWpsKind]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiWpsConfigurationResult: ...

