# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking.connectivity
import winrt.windows.security.credentials

from . import WiFiAccessStatus, WiFiConnectionMethod, WiFiConnectionStatus, WiFiNetworkKind, WiFiOnDemandHotspotAvailability, WiFiOnDemandHotspotCellularBars, WiFiOnDemandHotspotConnectStatus, WiFiPhyKind, WiFiReconnectionKind, WiFiWpsConfigurationStatus, WiFiWpsKind

Self = typing.TypeVar('Self')

class WiFiAdapter(winrt.system.Object):
    network_adapter: typing.Optional[winrt.windows.networking.connectivity.NetworkAdapter]
    network_report: typing.Optional[WiFiNetworkReport]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiAdapter: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], ssid: str, /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    @typing.overload
    def connect_async(self, available_network: typing.Optional[WiFiAvailableNetwork], reconnection_kind: WiFiReconnectionKind, password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], ssid: str, connection_method: WiFiConnectionMethod, /) -> winrt.windows.foundation.IAsyncOperation[WiFiConnectionResult]: ...
    def disconnect(self) -> None: ...
    @staticmethod
    def find_all_adapters_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[WiFiAdapter]]: ...
    @staticmethod
    def from_id_async(device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[WiFiAdapter]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def get_wps_configuration_async(self, available_network: typing.Optional[WiFiAvailableNetwork], /) -> winrt.windows.foundation.IAsyncOperation[WiFiWpsConfigurationResult]: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[WiFiAccessStatus]: ...
    def scan_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def add_available_networks_changed(self, args: winrt.windows.foundation.TypedEventHandler[WiFiAdapter, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_available_networks_changed(self, event_cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WiFiAvailableNetwork(winrt.system.Object):
    beacon_interval: datetime.timedelta
    bssid: str
    channel_center_frequency_in_kilohertz: winrt.system.Int32
    is_wi_fi_direct: bool
    network_kind: WiFiNetworkKind
    network_rssi_in_decibel_milliwatts: winrt.system.Double
    phy_kind: WiFiPhyKind
    security_settings: typing.Optional[winrt.windows.networking.connectivity.NetworkSecuritySettings]
    signal_bars: winrt.system.UInt8
    ssid: str
    uptime: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiAvailableNetwork: ...

class WiFiConnectionResult(winrt.system.Object):
    connection_status: WiFiConnectionStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiConnectionResult: ...

class WiFiNetworkReport(winrt.system.Object):
    available_networks: typing.Optional[winrt.windows.foundation.collections.IVectorView[WiFiAvailableNetwork]]
    timestamp: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiNetworkReport: ...

class WiFiOnDemandHotspotConnectTriggerDetails(winrt.system.Object):
    requested_network: typing.Optional[WiFiOnDemandHotspotNetwork]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotConnectTriggerDetails: ...
    def connect(self) -> typing.Optional[WiFiOnDemandHotspotConnectionResult]: ...
    def connect_async(self) -> winrt.windows.foundation.IAsyncOperation[WiFiOnDemandHotspotConnectionResult]: ...
    def report_error(self, status: WiFiOnDemandHotspotConnectStatus, /) -> None: ...

class WiFiOnDemandHotspotConnectionResult(winrt.system.Object):
    status: WiFiOnDemandHotspotConnectStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotConnectionResult: ...

class WiFiOnDemandHotspotNetwork(winrt.system.Object):
    id: _uuid.UUID
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotNetwork: ...
    @staticmethod
    def get_or_create_by_id(network_id: _uuid.UUID, /) -> typing.Optional[WiFiOnDemandHotspotNetwork]: ...
    def get_properties(self) -> typing.Optional[WiFiOnDemandHotspotNetworkProperties]: ...
    def update_properties(self, new_properties: typing.Optional[WiFiOnDemandHotspotNetworkProperties], /) -> None: ...

class WiFiOnDemandHotspotNetworkProperties(winrt.system.Object):
    ssid: str
    remaining_battery_percent: typing.Optional[typing.Optional[winrt.system.UInt32]]
    password: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    is_metered: bool
    display_name: str
    cellular_bars: typing.Optional[typing.Optional[WiFiOnDemandHotspotCellularBars]]
    availability: WiFiOnDemandHotspotAvailability
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotNetworkProperties: ...

class WiFiWpsConfigurationResult(winrt.system.Object):
    status: WiFiWpsConfigurationStatus
    supported_wps_kinds: typing.Optional[winrt.windows.foundation.collections.IVectorView[WiFiWpsKind]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiWpsConfigurationResult: ...

