# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking
import winrt.windows.networking.sockets
import winrt.windows.storage.streams

from . import PeerDiscoveryTypes, PeerRole, PeerWatcherStatus, TriggeredConnectState
from . import DeviceArrivedEventHandler, DeviceDepartedEventHandler, MessageReceivedHandler, MessageTransmittedHandler

Self = typing.TypeVar('Self')

class ConnectionRequestedEventArgs(winrt.system.Object):
    peer_information: typing.Optional[PeerInformation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConnectionRequestedEventArgs: ...

class PeerFinder(winrt.system.Object):
    display_name: typing.ClassVar[str]
    allow_wi_fi_direct: typing.ClassVar[bool]
    allow_infrastructure: typing.ClassVar[bool]
    allow_bluetooth: typing.ClassVar[bool]
    alternate_identities: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IMap[str, str]]]
    supported_discovery_types: typing.ClassVar[PeerDiscoveryTypes]
    role: typing.ClassVar[PeerRole]
    discovery_data: typing.ClassVar[typing.Optional[winrt.windows.storage.streams.IBuffer]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PeerFinder: ...
    @staticmethod
    def connect_async(peer_information: typing.Optional[PeerInformation], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.networking.sockets.StreamSocket]: ...
    @staticmethod
    def create_watcher() -> typing.Optional[PeerWatcher]: ...
    @staticmethod
    def find_all_peers_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[PeerInformation]]: ...
    @typing.overload
    @staticmethod
    def start() -> None: ...
    @typing.overload
    @staticmethod
    def start(peer_message: str, /) -> None: ...
    @staticmethod
    def stop() -> None: ...
    @staticmethod
    def add_connection_requested(handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, ConnectionRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_connection_requested(cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_triggered_connection_state_changed(handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, TriggeredConnectionStateChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_triggered_connection_state_changed(cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PeerInformation(winrt.system.Object):
    display_name: str
    discovery_data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    id: str
    host_name: typing.Optional[winrt.windows.networking.HostName]
    service_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PeerInformation: ...

class PeerWatcher(winrt.system.Object):
    status: PeerWatcherStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PeerWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, PeerInformation], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, PeerInformation], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_stopped(self, handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_stopped(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_updated(self, handler: winrt.windows.foundation.TypedEventHandler[PeerWatcher, PeerInformation], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ProximityDevice(winrt.system.Object):
    bits_per_second: winrt.system.UInt64
    device_id: str
    max_message_bytes: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProximityDevice: ...
    @staticmethod
    def from_id(device_id: str, /) -> typing.Optional[ProximityDevice]: ...
    @staticmethod
    def get_default() -> typing.Optional[ProximityDevice]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    @typing.overload
    def publish_binary_message(self, message_type: str, message: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.system.Int64: ...
    @typing.overload
    def publish_binary_message(self, message_type: str, message: typing.Optional[winrt.windows.storage.streams.IBuffer], message_transmitted_handler: typing.Optional[MessageTransmittedHandler], /) -> winrt.system.Int64: ...
    @typing.overload
    def publish_message(self, message_type: str, message: str, /) -> winrt.system.Int64: ...
    @typing.overload
    def publish_message(self, message_type: str, message: str, message_transmitted_handler: typing.Optional[MessageTransmittedHandler], /) -> winrt.system.Int64: ...
    @typing.overload
    def publish_uri_message(self, message: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.system.Int64: ...
    @typing.overload
    def publish_uri_message(self, message: typing.Optional[winrt.windows.foundation.Uri], message_transmitted_handler: typing.Optional[MessageTransmittedHandler], /) -> winrt.system.Int64: ...
    def stop_publishing_message(self, message_id: winrt.system.Int64, /) -> None: ...
    def stop_subscribing_for_message(self, subscription_id: winrt.system.Int64, /) -> None: ...
    def subscribe_for_message(self, message_type: str, message_received_handler: typing.Optional[MessageReceivedHandler], /) -> winrt.system.Int64: ...
    def add_device_arrived(self, arrived_handler: typing.Optional[DeviceArrivedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_device_arrived(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_device_departed(self, departed_handler: typing.Optional[DeviceDepartedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_device_departed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ProximityMessage(winrt.system.Object):
    data: typing.Optional[winrt.windows.storage.streams.IBuffer]
    data_as_string: str
    message_type: str
    subscription_id: winrt.system.Int64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProximityMessage: ...

class TriggeredConnectionStateChangedEventArgs(winrt.system.Object):
    id: winrt.system.UInt32
    socket: typing.Optional[winrt.windows.networking.sockets.StreamSocket]
    state: TriggeredConnectState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TriggeredConnectionStateChangedEventArgs: ...

