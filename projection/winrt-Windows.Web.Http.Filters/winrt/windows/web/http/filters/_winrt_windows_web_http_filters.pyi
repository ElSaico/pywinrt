# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking.sockets
import winrt.windows.security.credentials
import winrt.windows.security.cryptography.certificates
import winrt.windows.system
import winrt.windows.web.http

class HttpCacheReadBehavior(enum.IntEnum):
    DEFAULT = 0
    MOST_RECENT = 1
    ONLY_FROM_CACHE = 2
    NO_CACHE = 3

class HttpCacheWriteBehavior(enum.IntEnum):
    DEFAULT = 0
    NO_CACHE = 1

class HttpCookieUsageBehavior(enum.IntEnum):
    DEFAULT = 0
    NO_COOKIES = 1

Self = typing.TypeVar('Self')

class HttpBaseProtocolFilter(winrt.system.Object):
    use_proxy: winrt.system.Boolean
    server_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    proxy_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    max_connections_per_server: winrt.system.UInt32
    client_certificate: typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]
    automatic_decompression: winrt.system.Boolean
    allow_u_i: winrt.system.Boolean
    allow_auto_redirect: winrt.system.Boolean
    cache_control: typing.Optional[HttpCacheControl]
    cookie_manager: typing.Optional[winrt.windows.web.http.HttpCookieManager]
    ignorable_server_certificate_errors: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.security.cryptography.certificates.ChainValidationResult]]
    max_version: winrt.windows.web.http.HttpVersion
    cookie_usage_behavior: HttpCookieUsageBehavior
    user: typing.Optional[winrt.windows.system.User]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpBaseProtocolFilter: ...
    def __new__(cls: typing.Type[HttpBaseProtocolFilter]) -> HttpBaseProtocolFilter:...
    def clear_authentication_cache(self) -> None: ...
    def close(self) -> None: ...
    @staticmethod
    def create_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[HttpBaseProtocolFilter]: ...
    def send_request_async(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.web.http.HttpResponseMessage, winrt.windows.web.http.HttpProgress]: ...
    def add_server_custom_validation_requested(self, handler: winrt.windows.foundation.TypedEventHandler[HttpBaseProtocolFilter, HttpServerCustomValidationRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_server_custom_validation_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class HttpCacheControl(winrt.system.Object):
    write_behavior: HttpCacheWriteBehavior
    read_behavior: HttpCacheReadBehavior
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCacheControl: ...

class HttpServerCustomValidationRequestedEventArgs(winrt.system.Object):
    request_message: typing.Optional[winrt.windows.web.http.HttpRequestMessage]
    server_certificate: typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]
    server_certificate_error_severity: winrt.windows.networking.sockets.SocketSslErrorSeverity
    server_certificate_errors: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]]
    server_intermediate_certificates: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpServerCustomValidationRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def reject(self) -> None: ...

class IHttpFilter(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IHttpFilter: ...
    def close(self) -> None: ...
    def send_request_async(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.web.http.HttpResponseMessage, winrt.windows.web.http.HttpProgress]: ...

