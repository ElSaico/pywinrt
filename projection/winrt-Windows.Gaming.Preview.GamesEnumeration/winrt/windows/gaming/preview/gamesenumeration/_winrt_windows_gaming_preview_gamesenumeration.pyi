# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.applicationmodel
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage

from . import GameListCategory, GameListEntryLaunchableState

Self = typing.TypeVar('Self')

class GameList(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameList: ...
    @typing.overload
    @staticmethod
    def find_all_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GameListEntry]]: ...
    @typing.overload
    @staticmethod
    def find_all_async(package_family_name: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GameListEntry]]: ...
    @staticmethod
    def merge_entries_async(left: typing.Optional[GameListEntry], right: typing.Optional[GameListEntry], /) -> winrt.windows.foundation.IAsyncOperation[GameListEntry]: ...
    @staticmethod
    def unmerge_entry_async(merged_entry: typing.Optional[GameListEntry], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[GameListEntry]]: ...
    @staticmethod
    def add_game_added(handler: typing.Optional[GameListChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_game_added(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_game_removed(handler: typing.Optional[GameListRemovedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_game_removed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_game_updated(handler: typing.Optional[GameListChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_game_updated(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class GameListEntry(winrt.system.Object):
    category: GameListCategory
    display_info: typing.Optional[winrt.windows.applicationmodel.AppDisplayInfo]
    properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    game_mode_configuration: typing.Optional[GameModeConfiguration]
    launch_parameters: str
    launchable_state: GameListEntryLaunchableState
    launcher_executable: typing.Optional[winrt.windows.storage.IStorageFile]
    title_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameListEntry: ...
    def launch_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def set_category_async(self, value: GameListCategory, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def set_launcher_executable_file_async(self, executable_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def set_launcher_executable_file_async(self, executable_file: typing.Optional[winrt.windows.storage.IStorageFile], launch_params: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def set_title_id_async(self, id: str, /) -> winrt.windows.foundation.IAsyncAction: ...

class GameModeConfiguration(winrt.system.Object):
    percent_gpu_time_allocated_to_game: typing.Optional[typing.Optional[winrt.system.Int32]]
    percent_gpu_memory_allocated_to_system_compositor: typing.Optional[typing.Optional[winrt.system.Int32]]
    percent_gpu_memory_allocated_to_game: typing.Optional[typing.Optional[winrt.system.Int32]]
    max_cpu_count: typing.Optional[typing.Optional[winrt.system.Int32]]
    is_enabled: winrt.system.Boolean
    cpu_exclusivity_mask_low: typing.Optional[typing.Optional[winrt.system.Int32]]
    cpu_exclusivity_mask_high: typing.Optional[typing.Optional[winrt.system.Int32]]
    affinitize_to_exclusive_cpus: winrt.system.Boolean
    related_process_names: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameModeConfiguration: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...

class GameModeUserConfiguration(winrt.system.Object):
    gaming_related_process_names: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameModeUserConfiguration: ...
    @staticmethod
    def get_default() -> typing.Optional[GameModeUserConfiguration]: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...

class IGameListEntry(winrt.system.Object):
    category: GameListCategory
    display_info: typing.Optional[winrt.windows.applicationmodel.AppDisplayInfo]
    properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IGameListEntry: ...
    def launch_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def set_category_async(self, value: GameListCategory, /) -> winrt.windows.foundation.IAsyncAction: ...

GameListChangedEventHandler = typing.Callable[[typing.Optional[GameListEntry]], None]

GameListRemovedEventHandler = typing.Callable[[str], None]

