# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.ui.composition
import winrt.windows.ui.windowmanagement
import winrt.windows.ui.xaml
import winrt.windows.ui.xaml.controls
import winrt.windows.ui.xaml.controls.primitives

class DesignerAppViewState(enum.IntEnum):
    VISIBLE = 0
    HIDDEN = 1

class XamlSourceFocusNavigationReason(enum.IntEnum):
    PROGRAMMATIC = 0
    RESTORE = 1
    FIRST = 3
    LAST = 4
    LEFT = 7
    UP = 8
    RIGHT = 9
    DOWN = 10

Self = typing.TypeVar('Self')

class DesignerAppExitedEventArgs(winrt.system.Object):
    exit_code: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DesignerAppExitedEventArgs: ...

class DesignerAppManager(winrt.system.Object):
    app_user_model_id: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DesignerAppManager: ...
    def __new__(cls: typing.Type[DesignerAppManager], app_user_model_id: str) -> DesignerAppManager:...
    def close(self) -> None: ...
    def create_new_view_async(self, initial_view_state: DesignerAppViewState, initial_view_size: winrt.windows.foundation.Size, /) -> winrt.windows.foundation.IAsyncOperation[DesignerAppView]: ...
    def load_object_into_app_async(self, dll_name: str, class_id: winrt.system.Guid, initialization_data: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def add_designer_app_exited(self, handler: winrt.windows.foundation.TypedEventHandler[DesignerAppManager, DesignerAppExitedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_designer_app_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DesignerAppView(winrt.system.Object):
    app_user_model_id: str
    application_view_id: winrt.system.Int32
    view_size: winrt.windows.foundation.Size
    view_state: DesignerAppViewState
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DesignerAppView: ...
    def close(self) -> None: ...
    def update_view_async(self, view_state: DesignerAppViewState, view_size: winrt.windows.foundation.Size, /) -> winrt.windows.foundation.IAsyncAction: ...

class DesktopWindowXamlSource(winrt.system.Object):
    content: typing.Optional[winrt.windows.ui.xaml.UIElement]
    has_focus: winrt.system.Boolean
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DesktopWindowXamlSource: ...
    def __new__(cls: typing.Type[DesktopWindowXamlSource]) -> DesktopWindowXamlSource:...
    def close(self) -> None: ...
    def navigate_focus(self, request: typing.Optional[XamlSourceFocusNavigationRequest], /) -> typing.Optional[XamlSourceFocusNavigationResult]: ...
    def add_got_focus(self, handler: winrt.windows.foundation.TypedEventHandler[DesktopWindowXamlSource, DesktopWindowXamlSourceGotFocusEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_got_focus(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_take_focus_requested(self, handler: winrt.windows.foundation.TypedEventHandler[DesktopWindowXamlSource, DesktopWindowXamlSourceTakeFocusRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_take_focus_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DesktopWindowXamlSourceGotFocusEventArgs(winrt.system.Object):
    request: typing.Optional[XamlSourceFocusNavigationRequest]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DesktopWindowXamlSourceGotFocusEventArgs: ...

class DesktopWindowXamlSourceTakeFocusRequestedEventArgs(winrt.system.Object):
    request: typing.Optional[XamlSourceFocusNavigationRequest]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DesktopWindowXamlSourceTakeFocusRequestedEventArgs: ...

class ElementCompositionPreview(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ElementCompositionPreview: ...
    @staticmethod
    def get_app_window_content(app_window: typing.Optional[winrt.windows.ui.windowmanagement.AppWindow], /) -> typing.Optional[winrt.windows.ui.xaml.UIElement]: ...
    @staticmethod
    def get_element_child_visual(element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> typing.Optional[winrt.windows.ui.composition.Visual]: ...
    @staticmethod
    def get_element_visual(element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> typing.Optional[winrt.windows.ui.composition.Visual]: ...
    @staticmethod
    def get_pointer_position_property_set(target_element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> typing.Optional[winrt.windows.ui.composition.CompositionPropertySet]: ...
    @staticmethod
    def get_scroll_viewer_manipulation_property_set(scroll_viewer: typing.Optional[winrt.windows.ui.xaml.controls.ScrollViewer], /) -> typing.Optional[winrt.windows.ui.composition.CompositionPropertySet]: ...
    @staticmethod
    def set_app_window_content(app_window: typing.Optional[winrt.windows.ui.windowmanagement.AppWindow], xaml_content: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> None: ...
    @staticmethod
    def set_element_child_visual(element: typing.Optional[winrt.windows.ui.xaml.UIElement], visual: typing.Optional[winrt.windows.ui.composition.Visual], /) -> None: ...
    @staticmethod
    def set_implicit_hide_animation(element: typing.Optional[winrt.windows.ui.xaml.UIElement], animation: typing.Optional[winrt.windows.ui.composition.ICompositionAnimationBase], /) -> None: ...
    @staticmethod
    def set_implicit_show_animation(element: typing.Optional[winrt.windows.ui.xaml.UIElement], animation: typing.Optional[winrt.windows.ui.composition.ICompositionAnimationBase], /) -> None: ...
    @staticmethod
    def set_is_translation_enabled(element: typing.Optional[winrt.windows.ui.xaml.UIElement], value: winrt.system.Boolean, /) -> None: ...

class WindowsXamlManager(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsXamlManager: ...
    def close(self) -> None: ...
    @staticmethod
    def initialize_for_current_thread() -> typing.Optional[WindowsXamlManager]: ...

class XamlSourceFocusNavigationRequest(winrt.system.Object):
    correlation_id: winrt.system.Guid
    hint_rect: winrt.windows.foundation.Rect
    reason: XamlSourceFocusNavigationReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XamlSourceFocusNavigationRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[XamlSourceFocusNavigationRequest], reason: XamlSourceFocusNavigationReason) -> XamlSourceFocusNavigationRequest:...
    @typing.overload
    def __new__(cls: typing.Type[XamlSourceFocusNavigationRequest], reason: XamlSourceFocusNavigationReason, hint_rect: winrt.windows.foundation.Rect) -> XamlSourceFocusNavigationRequest:...
    @typing.overload
    def __new__(cls: typing.Type[XamlSourceFocusNavigationRequest], reason: XamlSourceFocusNavigationReason, hint_rect: winrt.windows.foundation.Rect, correlation_id: winrt.system.Guid) -> XamlSourceFocusNavigationRequest:...

class XamlSourceFocusNavigationResult(winrt.system.Object):
    was_focus_moved: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XamlSourceFocusNavigationResult: ...
    def __new__(cls: typing.Type[XamlSourceFocusNavigationResult], focus_moved: winrt.system.Boolean) -> XamlSourceFocusNavigationResult:...

class XamlUIPresenter(winrt.system.Object):
    theme_resources_xaml: str
    theme_key: str
    root_element: typing.Optional[winrt.windows.ui.xaml.UIElement]
    complete_timelines_automatically: typing.ClassVar[winrt.system.Boolean]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XamlUIPresenter: ...
    @staticmethod
    def get_flyout_placement(placement_target_bounds: winrt.windows.foundation.Rect, control_size: winrt.windows.foundation.Size, min_control_size: winrt.windows.foundation.Size, container_rect: winrt.windows.foundation.Rect, target_preferred_placement: winrt.windows.ui.xaml.controls.primitives.FlyoutPlacementMode, allow_fallbacks: winrt.system.Boolean, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.windows.ui.xaml.controls.primitives.FlyoutPlacementMode]: ...
    @staticmethod
    def get_flyout_placement_target_info(placement_target: typing.Optional[winrt.windows.ui.xaml.FrameworkElement], preferred_placement: winrt.windows.ui.xaml.controls.primitives.FlyoutPlacementMode, /) -> typing.Tuple[winrt.windows.foundation.Rect, winrt.windows.ui.xaml.controls.primitives.FlyoutPlacementMode, winrt.system.Boolean]: ...
    @staticmethod
    def notify_window_size_changed() -> None: ...
    def present(self) -> None: ...
    def render(self) -> None: ...
    @staticmethod
    def set_host(host: typing.Optional[IXamlUIPresenterHost], /) -> None: ...
    def set_size(self, width: winrt.system.Int32, height: winrt.system.Int32, /) -> None: ...

class IXamlUIPresenterHost(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXamlUIPresenterHost: ...
    def resolve_file_resource(self, path: str, /) -> str: ...

class IXamlUIPresenterHost2(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXamlUIPresenterHost2: ...
    def get_generic_xaml_file_path(self) -> str: ...

class IXamlUIPresenterHost3(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IXamlUIPresenterHost3: ...
    def resolve_dictionary_resource(self, dictionary: typing.Optional[winrt.windows.ui.xaml.ResourceDictionary], dictionary_key: typing.Optional[winrt.system.Object], suggested_value: typing.Optional[winrt.system.Object], /) -> typing.Optional[winrt.system.Object]: ...

