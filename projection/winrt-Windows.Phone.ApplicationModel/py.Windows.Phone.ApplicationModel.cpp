// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.Phone.ApplicationModel.h"


namespace py::cpp::Windows::Phone::ApplicationModel
{
    struct module_state
    {
        PyTypeObject* type_ApplicationProfile;
    };

    // ----- ApplicationProfile class --------------------
    static constexpr const char* const type_name_ApplicationProfile = "ApplicationProfile";

    static PyObject* _new_ApplicationProfile(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_ApplicationProfile);
        return nullptr;
    }

    static PyObject* ApplicationProfile_get_Modes(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.ApplicationModel.ApplicationProfile", L"Modes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::ApplicationModel::ApplicationProfile::Modes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationProfile[] = {
        { }
    };

    static PyGetSetDef _getset_ApplicationProfile[] = {
        { }
    };

    static PyType_Slot _type_slots_ApplicationProfile[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ApplicationProfile) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ApplicationProfile) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ApplicationProfile) },
        { },
    };

    static PyType_Spec type_spec_ApplicationProfile =
    {
        "_winrt_Windows_Phone_ApplicationModel.ApplicationProfile",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationProfile
    };

    static PyGetSetDef getset_ApplicationProfile_Meta[] = {
        { "modes", reinterpret_cast<getter>(ApplicationProfile_get_Modes), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_ApplicationProfile_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ApplicationProfile_Meta) },
        { }
    };

    static PyType_Spec type_spec_ApplicationProfile_Meta =
    {
        "_winrt_Windows_Phone_ApplicationModel.ApplicationProfile_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ApplicationProfile_Meta
    };

    // ----- Windows.Phone.ApplicationModel Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::ApplicationModel");


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_ApplicationProfile);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_ApplicationProfile);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_Windows_Phone_ApplicationModel",
           module_doc,
           sizeof(module_state),
           nullptr,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Phone::ApplicationModel

PyMODINIT_FUNC PyInit__winrt_Windows_Phone_ApplicationModel(void) noexcept
{
    using namespace py::cpp::Windows::Phone::ApplicationModel;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    WINRT_ASSERT(state);

    py::pyobj_handle type_ApplicationProfile_Meta{PyType_FromSpec(&type_spec_ApplicationProfile_Meta)};
    if (!type_ApplicationProfile_Meta)
    {
        return nullptr;
    }

    state->type_ApplicationProfile = py::register_python_type(module.get(), type_name_ApplicationProfile, &type_spec_ApplicationProfile, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ApplicationProfile_Meta.get()));
    if (!state->type_ApplicationProfile)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Phone::ApplicationModel::ApplicationProfile>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Phone::ApplicationModel;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Phone::ApplicationModel");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ApplicationProfile;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Phone::ApplicationModel::ApplicationProfile is not registered");
        return nullptr;
    }

    return python_type;
}
