# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

Self = typing.TypeVar('Self')

class CustomSensor(winrt.system.Object):
    report_interval: winrt.system.UInt32
    device_id: str
    minimum_report_interval: winrt.system.UInt32
    report_latency: winrt.system.UInt32
    max_batch_size: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CustomSensor: ...
    @staticmethod
    def from_id_async(sensor_id: str, /) -> winrt.windows.foundation.IAsyncOperation[CustomSensor]: ...
    def get_current_reading(self) -> typing.Optional[CustomSensorReading]: ...
    @staticmethod
    def get_device_selector(interface_id: winrt.system.Guid, /) -> str: ...
    def add_reading_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CustomSensor, CustomSensorReadingChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_reading_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CustomSensorReading(winrt.system.Object):
    properties: typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]
    timestamp: datetime.datetime
    performance_count: typing.Optional[typing.Optional[datetime.timedelta]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CustomSensorReading: ...

class CustomSensorReadingChangedEventArgs(winrt.system.Object):
    reading: typing.Optional[CustomSensorReading]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CustomSensorReadingChangedEventArgs: ...

