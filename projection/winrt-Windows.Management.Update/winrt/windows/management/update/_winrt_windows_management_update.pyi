# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import WindowsUpdateAdministratorOptions, WindowsUpdateAdministratorStatus, WindowsUpdateAttentionRequiredReason

Self = typing.TypeVar('Self')

class PreviewBuildsManager(winrt.system.Object):
    are_preview_builds_allowed: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PreviewBuildsManager: ...
    def get_current_state(self) -> typing.Optional[PreviewBuildsState]: ...
    @staticmethod
    def get_default() -> typing.Optional[PreviewBuildsManager]: ...
    @staticmethod
    def is_supported() -> bool: ...
    def sync_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...

class PreviewBuildsState(winrt.system.Object):
    properties: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PreviewBuildsState: ...

class WindowsUpdate(winrt.system.Object):
    action_progress: typing.Optional[WindowsUpdateActionProgress]
    action_result: typing.Optional[WindowsUpdateActionResult]
    attention_required_info: typing.Optional[WindowsUpdateAttentionRequiredInfo]
    current_action: str
    deadline: typing.Optional[typing.Optional[datetime.datetime]]
    description: str
    eula_text: str
    is_critical: bool
    is_driver: bool
    is_eula_accepted: bool
    is_feature_update: bool
    is_for_o_s: bool
    is_mandatory: bool
    is_minor_impact: bool
    is_security: bool
    is_seeker: bool
    is_urgent: bool
    more_info_url: typing.Optional[winrt.windows.foundation.Uri]
    provider_id: str
    support_url: typing.Optional[winrt.windows.foundation.Uri]
    title: str
    update_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdate: ...
    def accept_eula(self) -> None: ...
    def get_property_value(self, property_name: str, /) -> typing.Optional[winrt.system.Object]: ...

class WindowsUpdateActionCompletedEventArgs(winrt.system.Object):
    action: str
    extended_error: winrt.windows.foundation.HResult
    succeeded: bool
    update: typing.Optional[WindowsUpdate]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateActionCompletedEventArgs: ...

class WindowsUpdateActionProgress(winrt.system.Object):
    action: str
    progress: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateActionProgress: ...

class WindowsUpdateActionResult(winrt.system.Object):
    action: str
    extended_error: winrt.windows.foundation.HResult
    succeeded: bool
    timestamp: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateActionResult: ...

class WindowsUpdateAdministrator(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateAdministrator: ...
    def approve_windows_update(self, update_id: str, approval_data: typing.Optional[WindowsUpdateApprovalData], /) -> None: ...
    def approve_windows_update_action(self, update_id: str, action: str, /) -> None: ...
    @staticmethod
    def cancel_restart_request(request_restart_token: str, /) -> None: ...
    @staticmethod
    def get_registered_administrator(organization_name: str, /) -> typing.Optional[WindowsUpdateGetAdministratorResult]: ...
    @staticmethod
    def get_registered_administrator_name() -> str: ...
    def get_updates(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[WindowsUpdate]]: ...
    @staticmethod
    def register_for_administration(organization_name: str, options: WindowsUpdateAdministratorOptions, /) -> WindowsUpdateAdministratorStatus: ...
    @staticmethod
    def request_restart(restart_options: typing.Optional[WindowsUpdateRestartRequestOptions], /) -> str: ...
    def revoke_windows_update_action_approval(self, update_id: str, action: str, /) -> None: ...
    def revoke_windows_update_approval(self, update_id: str, /) -> None: ...
    def start_administrator_scan(self) -> None: ...
    @staticmethod
    def unregister_for_administration(organization_name: str, /) -> WindowsUpdateAdministratorStatus: ...

class WindowsUpdateApprovalData(winrt.system.Object):
    seeker: typing.Optional[typing.Optional[bool]]
    opt_out_of_auto_reboot: typing.Optional[typing.Optional[bool]]
    compliance_grace_period_in_days: typing.Optional[typing.Optional[winrt.system.Int32]]
    compliance_deadline_in_days: typing.Optional[typing.Optional[winrt.system.Int32]]
    allow_download_on_metered: typing.Optional[typing.Optional[bool]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateApprovalData: ...
    def __new__(cls: typing.Type[WindowsUpdateApprovalData]) -> WindowsUpdateApprovalData:...

class WindowsUpdateAttentionRequiredInfo(winrt.system.Object):
    reason: WindowsUpdateAttentionRequiredReason
    timestamp: typing.Optional[typing.Optional[datetime.datetime]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateAttentionRequiredInfo: ...

class WindowsUpdateAttentionRequiredReasonChangedEventArgs(winrt.system.Object):
    reason: WindowsUpdateAttentionRequiredReason
    update: typing.Optional[WindowsUpdate]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateAttentionRequiredReasonChangedEventArgs: ...

class WindowsUpdateGetAdministratorResult(winrt.system.Object):
    administrator: typing.Optional[WindowsUpdateAdministrator]
    status: WindowsUpdateAdministratorStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateGetAdministratorResult: ...

class WindowsUpdateItem(winrt.system.Object):
    category: str
    description: str
    more_info_url: typing.Optional[winrt.windows.foundation.Uri]
    operation: str
    provider_id: str
    timestamp: datetime.datetime
    title: str
    update_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateItem: ...

class WindowsUpdateManager(winrt.system.Object):
    is_scanning: bool
    is_working: bool
    last_successful_scan_timestamp: typing.Optional[typing.Optional[datetime.datetime]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateManager: ...
    def __new__(cls: typing.Type[WindowsUpdateManager], client_id: str) -> WindowsUpdateManager:...
    def get_applicable_updates(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[WindowsUpdate]]: ...
    def get_most_recent_completed_updates(self, count: winrt.system.Int32, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[WindowsUpdateItem]]: ...
    def get_most_recent_completed_updates_async(self, count: winrt.system.Int32, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[WindowsUpdateItem]]: ...
    def start_scan(self, user_initiated: bool, /) -> None: ...
    def add_action_completed(self, handler: winrt.windows.foundation.TypedEventHandler[WindowsUpdateManager, WindowsUpdateActionCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_action_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_attention_required_reason_changed(self, handler: winrt.windows.foundation.TypedEventHandler[WindowsUpdateManager, WindowsUpdateAttentionRequiredReasonChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_attention_required_reason_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_progress_changed(self, handler: winrt.windows.foundation.TypedEventHandler[WindowsUpdateManager, WindowsUpdateProgressChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_progress_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_scan_completed(self, handler: winrt.windows.foundation.TypedEventHandler[WindowsUpdateManager, WindowsUpdateScanCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scan_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_scanning_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[WindowsUpdateManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scanning_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_working_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[WindowsUpdateManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_working_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WindowsUpdateProgressChangedEventArgs(winrt.system.Object):
    action_progress: typing.Optional[WindowsUpdateActionProgress]
    update: typing.Optional[WindowsUpdate]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateProgressChangedEventArgs: ...

class WindowsUpdateRestartRequestOptions(winrt.system.Object):
    title: str
    organization_name: str
    opt_out_of_auto_reboot: bool
    more_info_url: typing.Optional[winrt.windows.foundation.Uri]
    description: str
    compliance_grace_period_in_days: winrt.system.Int32
    compliance_deadline_in_days: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateRestartRequestOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[WindowsUpdateRestartRequestOptions], title: str, description: str, more_info_url: typing.Optional[winrt.windows.foundation.Uri], compliance_deadline_in_days: winrt.system.Int32, compliance_grace_period_in_days: winrt.system.Int32) -> WindowsUpdateRestartRequestOptions:...
    @typing.overload
    def __new__(cls: typing.Type[WindowsUpdateRestartRequestOptions]) -> WindowsUpdateRestartRequestOptions:...

class WindowsUpdateScanCompletedEventArgs(winrt.system.Object):
    extended_error: winrt.windows.foundation.HResult
    provider_id: str
    succeeded: bool
    updates: typing.Optional[winrt.windows.foundation.collections.IVectorView[WindowsUpdate]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowsUpdateScanCompletedEventArgs: ...

