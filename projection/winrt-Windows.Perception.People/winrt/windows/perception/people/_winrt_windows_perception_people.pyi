# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.numerics
import winrt.windows.perception
import winrt.windows.perception.spatial
import winrt.windows.ui.input
import winrt.windows.ui.input.spatial

from . import HandJointKind, JointPoseAccuracy

Self = typing.TypeVar('Self')

class HandMeshVertex:
    position: winrt.windows.foundation.numerics.Vector3
    normal: winrt.windows.foundation.numerics.Vector3
    def __new__(cls: typing.Type[HandMeshVertex], position: winrt.windows.foundation.numerics.Vector3, normal: winrt.windows.foundation.numerics.Vector3) -> HandMeshVertex: ...

class JointPose:
    orientation: winrt.windows.foundation.numerics.Quaternion
    position: winrt.windows.foundation.numerics.Vector3
    radius: winrt.system.Single
    accuracy: JointPoseAccuracy
    def __new__(cls: typing.Type[JointPose], orientation: winrt.windows.foundation.numerics.Quaternion, position: winrt.windows.foundation.numerics.Vector3, radius: winrt.system.Single, accuracy: JointPoseAccuracy) -> JointPose: ...

class EyesPose(winrt.system.Object):
    gaze: typing.Optional[typing.Optional[winrt.windows.perception.spatial.SpatialRay]]
    is_calibration_valid: winrt.system.Boolean
    update_timestamp: typing.Optional[winrt.windows.perception.PerceptionTimestamp]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EyesPose: ...
    @staticmethod
    def is_supported() -> winrt.system.Boolean: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.ui.input.GazeInputAccessStatus]: ...

class HandMeshObserver(winrt.system.Object):
    model_id: winrt.system.Int32
    neutral_pose: typing.Optional[HandPose]
    neutral_pose_version: winrt.system.Int32
    source: typing.Optional[winrt.windows.ui.input.spatial.SpatialInteractionSource]
    triangle_index_count: winrt.system.UInt32
    vertex_count: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HandMeshObserver: ...
    def get_triangle_indices(self, indices: winrt.system.Array[winrt.system.UInt16], /) -> None: ...
    def get_vertex_state_for_pose(self, hand_pose: typing.Optional[HandPose], /) -> typing.Optional[HandMeshVertexState]: ...

class HandMeshVertexState(winrt.system.Object):
    coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem]
    update_timestamp: typing.Optional[winrt.windows.perception.PerceptionTimestamp]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HandMeshVertexState: ...
    def get_vertices(self, vertices: winrt.system.Array[HandMeshVertex], /) -> None: ...

class HandPose(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HandPose: ...
    def get_relative_joint(self, joint: HandJointKind, reference_joint: HandJointKind, /) -> JointPose: ...
    def get_relative_joints(self, joints: winrt.system.Array[HandJointKind], reference_joints: winrt.system.Array[HandJointKind], joint_poses: winrt.system.Array[JointPose], /) -> None: ...
    def try_get_joint(self, coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem], joint: HandJointKind, /) -> typing.Tuple[winrt.system.Boolean, JointPose]: ...
    def try_get_joints(self, coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem], joints: winrt.system.Array[HandJointKind], joint_poses: winrt.system.Array[JointPose], /) -> winrt.system.Boolean: ...

class HeadPose(winrt.system.Object):
    forward_direction: winrt.windows.foundation.numerics.Vector3
    position: winrt.windows.foundation.numerics.Vector3
    up_direction: winrt.windows.foundation.numerics.Vector3
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HeadPose: ...

