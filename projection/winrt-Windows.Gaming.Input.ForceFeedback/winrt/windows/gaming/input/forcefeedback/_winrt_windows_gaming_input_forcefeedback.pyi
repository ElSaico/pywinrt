# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.numerics

from . import ConditionForceEffectKind, ForceFeedbackEffectAxes, ForceFeedbackEffectState, ForceFeedbackLoadEffectResult, PeriodicForceEffectKind

Self = typing.TypeVar('Self')

class ConditionForceEffect(winrt.system.Object):
    kind: ConditionForceEffectKind
    gain: winrt.system.Double
    state: ForceFeedbackEffectState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConditionForceEffect: ...
    def __new__(cls: typing.Type[ConditionForceEffect], effect_kind: ConditionForceEffectKind) -> ConditionForceEffect:...
    def set_parameters(self, direction: winrt.windows.foundation.numerics.Vector3, positive_coefficient: winrt.system.Single, negative_coefficient: winrt.system.Single, max_positive_magnitude: winrt.system.Single, max_negative_magnitude: winrt.system.Single, dead_zone: winrt.system.Single, bias: winrt.system.Single, /) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class ConstantForceEffect(winrt.system.Object):
    gain: winrt.system.Double
    state: ForceFeedbackEffectState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConstantForceEffect: ...
    def __new__(cls: typing.Type[ConstantForceEffect]) -> ConstantForceEffect:...
    def set_parameters(self, vector: winrt.windows.foundation.numerics.Vector3, duration: datetime.timedelta, /) -> None: ...
    def set_parameters_with_envelope(self, vector: winrt.windows.foundation.numerics.Vector3, attack_gain: winrt.system.Single, sustain_gain: winrt.system.Single, release_gain: winrt.system.Single, start_delay: datetime.timedelta, attack_duration: datetime.timedelta, sustain_duration: datetime.timedelta, release_duration: datetime.timedelta, repeat_count: winrt.system.UInt32, /) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class ForceFeedbackMotor(winrt.system.Object):
    master_gain: winrt.system.Double
    are_effects_paused: winrt.system.Boolean
    is_enabled: winrt.system.Boolean
    supported_axes: ForceFeedbackEffectAxes
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ForceFeedbackMotor: ...
    def load_effect_async(self, effect: typing.Optional[IForceFeedbackEffect], /) -> winrt.windows.foundation.IAsyncOperation[ForceFeedbackLoadEffectResult]: ...
    def pause_all_effects(self) -> None: ...
    def resume_all_effects(self) -> None: ...
    def stop_all_effects(self) -> None: ...
    def try_disable_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_enable_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_reset_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def try_unload_effect_async(self, effect: typing.Optional[IForceFeedbackEffect], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

class PeriodicForceEffect(winrt.system.Object):
    gain: winrt.system.Double
    state: ForceFeedbackEffectState
    kind: PeriodicForceEffectKind
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PeriodicForceEffect: ...
    def __new__(cls: typing.Type[PeriodicForceEffect], effect_kind: PeriodicForceEffectKind) -> PeriodicForceEffect:...
    def set_parameters(self, vector: winrt.windows.foundation.numerics.Vector3, frequency: winrt.system.Single, phase: winrt.system.Single, bias: winrt.system.Single, duration: datetime.timedelta, /) -> None: ...
    def set_parameters_with_envelope(self, vector: winrt.windows.foundation.numerics.Vector3, frequency: winrt.system.Single, phase: winrt.system.Single, bias: winrt.system.Single, attack_gain: winrt.system.Single, sustain_gain: winrt.system.Single, release_gain: winrt.system.Single, start_delay: datetime.timedelta, attack_duration: datetime.timedelta, sustain_duration: datetime.timedelta, release_duration: datetime.timedelta, repeat_count: winrt.system.UInt32, /) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class RampForceEffect(winrt.system.Object):
    gain: winrt.system.Double
    state: ForceFeedbackEffectState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RampForceEffect: ...
    def __new__(cls: typing.Type[RampForceEffect]) -> RampForceEffect:...
    def set_parameters(self, start_vector: winrt.windows.foundation.numerics.Vector3, end_vector: winrt.windows.foundation.numerics.Vector3, duration: datetime.timedelta, /) -> None: ...
    def set_parameters_with_envelope(self, start_vector: winrt.windows.foundation.numerics.Vector3, end_vector: winrt.windows.foundation.numerics.Vector3, attack_gain: winrt.system.Single, sustain_gain: winrt.system.Single, release_gain: winrt.system.Single, start_delay: datetime.timedelta, attack_duration: datetime.timedelta, sustain_duration: datetime.timedelta, release_duration: datetime.timedelta, repeat_count: winrt.system.UInt32, /) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class IForceFeedbackEffect(winrt.system.Object):
    gain: winrt.system.Double
    state: ForceFeedbackEffectState
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IForceFeedbackEffect: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

