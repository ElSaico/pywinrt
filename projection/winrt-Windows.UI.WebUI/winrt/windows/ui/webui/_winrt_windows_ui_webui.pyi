# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.applicationmodel
import winrt.windows.applicationmodel.activation
import winrt.windows.applicationmodel.appointments.appointmentsprovider
import winrt.windows.applicationmodel.background
import winrt.windows.applicationmodel.calls
import winrt.windows.applicationmodel.contacts
import winrt.windows.applicationmodel.contacts.provider
import winrt.windows.applicationmodel.core
import winrt.windows.applicationmodel.datatransfer
import winrt.windows.applicationmodel.datatransfer.sharetarget
import winrt.windows.applicationmodel.search
import winrt.windows.applicationmodel.userdataaccounts.provider
import winrt.windows.applicationmodel.wallet
import winrt.windows.devices.enumeration
import winrt.windows.devices.printers.extensions
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.speechrecognition
import winrt.windows.security.authentication.web
import winrt.windows.security.authentication.web.provider
import winrt.windows.storage
import winrt.windows.storage.pickers.provider
import winrt.windows.storage.provider
import winrt.windows.storage.search
import winrt.windows.storage.streams
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.web
import winrt.windows.web.http
import winrt.windows.web.ui

from . import PrintContent

Self = typing.TypeVar('Self')

class ActivatedDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivatedDeferral: ...
    def complete(self) -> None: ...

class ActivatedOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivatedOperation: ...
    def get_deferral(self) -> typing.Optional[ActivatedDeferral]: ...

class BackgroundActivatedEventArgs(winrt.system.Object):
    task_instance: typing.Optional[winrt.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundActivatedEventArgs: ...

class EnteredBackgroundEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EnteredBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class HtmlPrintDocumentSource(winrt.system.Object):
    top_margin: winrt.system.Single
    shrink_to_fit: winrt.system.Boolean
    right_margin: winrt.system.Single
    percent_scale: winrt.system.Single
    left_margin: winrt.system.Single
    enable_header_footer: winrt.system.Boolean
    content: PrintContent
    bottom_margin: winrt.system.Single
    page_range: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HtmlPrintDocumentSource: ...
    def close(self) -> None: ...
    def try_set_page_range(self, str_page_range: str, /) -> winrt.system.Boolean: ...

class LeavingBackgroundEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LeavingBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class NewWebUIViewCreatedEventArgs(winrt.system.Object):
    activated_event_args: typing.Optional[winrt.windows.applicationmodel.activation.IActivatedEventArgs]
    has_pending_navigate: winrt.system.Boolean
    web_u_i_view: typing.Optional[WebUIView]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NewWebUIViewCreatedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class SuspendingDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SuspendingDeferral: ...
    def complete(self) -> None: ...

class SuspendingEventArgs(winrt.system.Object):
    suspending_operation: typing.Optional[winrt.windows.applicationmodel.SuspendingOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SuspendingEventArgs: ...

class SuspendingOperation(winrt.system.Object):
    deadline: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SuspendingOperation: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.applicationmodel.SuspendingDeferral]: ...

class WebUIApplication(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIApplication: ...
    @staticmethod
    def enable_prelaunch(value: winrt.system.Boolean, /) -> None: ...
    @staticmethod
    def request_restart_async(launch_arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.core.AppRestartFailureReason]: ...
    @staticmethod
    def request_restart_for_user_async(user: typing.Optional[winrt.windows.system.User], launch_arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.core.AppRestartFailureReason]: ...
    @staticmethod
    def add_background_activated(handler: typing.Optional[BackgroundActivatedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_background_activated(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_new_web_u_i_view_created(handler: winrt.windows.foundation.EventHandler[NewWebUIViewCreatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_new_web_u_i_view_created(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_entered_background(handler: typing.Optional[EnteredBackgroundEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_entered_background(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_leaving_background(handler: typing.Optional[LeavingBackgroundEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_leaving_background(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_activated(handler: typing.Optional[ActivatedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_activated(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_navigated(handler: typing.Optional[NavigatedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_navigated(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_resuming(handler: typing.Optional[ResumingEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_resuming(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_suspending(handler: typing.Optional[SuspendingEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_suspending(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    add_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderAddAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    remove_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    replace_appointment_operation: typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    instance_start_date: typing.Optional[typing.Optional[datetime.datetime]]
    local_id: str
    roaming_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    verb: str
    duration: datetime.timedelta
    time_to_show: datetime.datetime
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class WebUIBackgroundTaskInstance(winrt.system.Object):
    current: typing.ClassVar[typing.Optional[IWebUIBackgroundTaskInstance]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIBackgroundTaskInstance: ...

class WebUIBackgroundTaskInstanceRuntimeClass(winrt.system.Object):
    progress: winrt.system.UInt32
    instance_id: winrt.system.Guid
    suspended_count: winrt.system.UInt32
    task: typing.Optional[winrt.windows.applicationmodel.background.BackgroundTaskRegistration]
    trigger_details: typing.Optional[winrt.system.Object]
    succeeded: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIBackgroundTaskInstanceRuntimeClass: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.applicationmodel.background.BackgroundTaskDeferral]: ...
    def add_canceled(self, cancel_handler: typing.Optional[winrt.windows.applicationmodel.background.BackgroundTaskCanceledEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUIBarcodeScannerPreviewActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    connection_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIBarcodeScannerPreviewActivatedEventArgs: ...

class WebUICachedFileUpdaterActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    cached_file_updater_u_i: typing.Optional[winrt.windows.storage.provider.CachedFileUpdaterUI]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICachedFileUpdaterActivatedEventArgs: ...

class WebUICameraSettingsActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    video_device_controller: typing.Optional[winrt.system.Object]
    video_device_extension: typing.Optional[winrt.system.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICameraSettingsActivatedEventArgs: ...

class WebUICommandLineActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    operation: typing.Optional[winrt.windows.applicationmodel.activation.CommandLineActivationOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandLineActivatedEventArgs: ...

class WebUIContactCallActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactCallActivatedEventArgs: ...

class WebUIContactMapActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    verb: str
    address: typing.Optional[winrt.windows.applicationmodel.contacts.ContactAddress]
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactMapActivatedEventArgs: ...

class WebUIContactMessageActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactMessageActivatedEventArgs: ...

class WebUIContactPanelActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winrt.windows.applicationmodel.contacts.ContactPanel]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactPanelActivatedEventArgs: ...

class WebUIContactPickerActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    contact_picker_u_i: typing.Optional[winrt.windows.applicationmodel.contacts.provider.ContactPickerUI]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactPickerActivatedEventArgs: ...

class WebUIContactPostActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactPostActivatedEventArgs: ...

class WebUIContactVideoCallActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winrt.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactVideoCallActivatedEventArgs: ...

class WebUIDeviceActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    device_information_id: str
    verb: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIDeviceActivatedEventArgs: ...

class WebUIDevicePairingActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    device_information: typing.Optional[winrt.windows.devices.enumeration.DeviceInformation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIDevicePairingActivatedEventArgs: ...

class WebUIDialReceiverActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    app_name: str
    arguments: str
    tile_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIDialReceiverActivatedEventArgs: ...

class WebUIFileActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]
    verb: str
    neighboring_files_query: typing.Optional[winrt.windows.storage.search.StorageFileQueryResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileActivatedEventArgs: ...

class WebUIFileOpenPickerActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    file_open_picker_u_i: typing.Optional[winrt.windows.storage.pickers.provider.FileOpenPickerUI]
    caller_package_family_name: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileOpenPickerActivatedEventArgs: ...

class WebUIFileOpenPickerContinuationEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    files: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileOpenPickerContinuationEventArgs: ...

class WebUIFileSavePickerActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    file_save_picker_u_i: typing.Optional[winrt.windows.storage.pickers.provider.FileSavePickerUI]
    caller_package_family_name: str
    enterprise_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileSavePickerActivatedEventArgs: ...

class WebUIFileSavePickerContinuationEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    file: typing.Optional[winrt.windows.storage.StorageFile]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileSavePickerContinuationEventArgs: ...

class WebUIFolderPickerContinuationEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    folder: typing.Optional[winrt.windows.storage.StorageFolder]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFolderPickerContinuationEventArgs: ...

class WebUILaunchActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    arguments: str
    tile_id: str
    tile_activated_info: typing.Optional[winrt.windows.applicationmodel.activation.TileActivatedInfo]
    prelaunch_activated: winrt.system.Boolean
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILaunchActivatedEventArgs: ...

class WebUILockScreenActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    info: typing.Optional[winrt.system.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILockScreenActivatedEventArgs: ...

class WebUILockScreenCallActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    currently_shown_application_view_id: winrt.system.Int32
    arguments: str
    tile_id: str
    call_u_i: typing.Optional[winrt.windows.applicationmodel.calls.LockScreenCallUI]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILockScreenCallActivatedEventArgs: ...

class WebUILockScreenComponentActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILockScreenComponentActivatedEventArgs: ...

class WebUINavigatedDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUINavigatedDeferral: ...
    def complete(self) -> None: ...

class WebUINavigatedEventArgs(winrt.system.Object):
    navigated_operation: typing.Optional[WebUINavigatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUINavigatedEventArgs: ...

class WebUINavigatedOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUINavigatedOperation: ...
    def get_deferral(self) -> typing.Optional[WebUINavigatedDeferral]: ...

class WebUIPhoneCallActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    line_id: winrt.system.Guid
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPhoneCallActivatedEventArgs: ...

class WebUIPrint3DWorkflowActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    workflow: typing.Optional[winrt.windows.devices.printers.extensions.Print3DWorkflow]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPrint3DWorkflowActivatedEventArgs: ...

class WebUIPrintTaskSettingsActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    configuration: typing.Optional[winrt.windows.devices.printers.extensions.PrintTaskConfiguration]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPrintTaskSettingsActivatedEventArgs: ...

class WebUIPrintWorkflowForegroundTaskActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPrintWorkflowForegroundTaskActivatedEventArgs: ...

class WebUIProtocolActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    uri: typing.Optional[winrt.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIProtocolActivatedEventArgs: ...

class WebUIProtocolForResultsActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    currently_shown_application_view_id: winrt.system.Int32
    uri: typing.Optional[winrt.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    protocol_for_results_operation: typing.Optional[winrt.windows.system.ProtocolForResultsOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIProtocolForResultsActivatedEventArgs: ...

class WebUIRestrictedLaunchActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    shared_context: typing.Optional[winrt.system.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIRestrictedLaunchActivatedEventArgs: ...

class WebUISearchActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    currently_shown_application_view_id: winrt.system.Int32
    language: str
    query_text: str
    linguistic_details: typing.Optional[winrt.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUISearchActivatedEventArgs: ...

class WebUIShareTargetActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    share_operation: typing.Optional[winrt.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIShareTargetActivatedEventArgs: ...

class WebUIStartupTaskActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    task_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIStartupTaskActivatedEventArgs: ...

class WebUIToastNotificationActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    argument: str
    user_input: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIToastNotificationActivatedEventArgs: ...

class WebUIUserDataAccountProviderActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    operation: typing.Optional[winrt.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIUserDataAccountProviderActivatedEventArgs: ...

class WebUIView(winrt.system.Object):
    ignore_application_content_uri_rules_navigation_restrictions: winrt.system.Boolean
    application_view_id: winrt.system.Int32
    source: typing.Optional[winrt.windows.foundation.Uri]
    default_background_color: winrt.windows.ui.Color
    can_go_back: winrt.system.Boolean
    can_go_forward: winrt.system.Boolean
    contains_full_screen_element: winrt.system.Boolean
    deferred_permission_requests: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.web.ui.WebViewControlDeferredPermissionRequest]]
    document_title: str
    settings: typing.Optional[winrt.windows.web.ui.WebViewControlSettings]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIView: ...
    def add_initialize_script(self, script: str, /) -> None: ...
    def build_local_stream_uri(self, content_identifier: str, relative_path: str, /) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    def capture_preview_to_stream_async(self, stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncAction: ...
    def capture_selected_content_to_data_package_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackage]: ...
    @typing.overload
    @staticmethod
    def create_async() -> winrt.windows.foundation.IAsyncOperation[WebUIView]: ...
    @typing.overload
    @staticmethod
    def create_async(uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperation[WebUIView]: ...
    def get_deferred_permission_request_by_id(self, id: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.web.ui.WebViewControlDeferredPermissionRequest]: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def invoke_script_async(self, script_name: str, arguments: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def navigate(self, source: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def navigate_to_local_stream_uri(self, source: typing.Optional[winrt.windows.foundation.Uri], stream_resolver: typing.Optional[winrt.windows.web.IUriToStreamResolver], /) -> None: ...
    def navigate_to_string(self, text: str, /) -> None: ...
    def navigate_with_http_request_message(self, request_message: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> None: ...
    def refresh(self) -> None: ...
    def stop(self) -> None: ...
    def add_activated(self, handler: winrt.windows.foundation.TypedEventHandler[WebUIView, winrt.windows.applicationmodel.activation.IActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[WebUIView, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_contains_full_screen_element_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contains_full_screen_element_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_long_running_script_detected(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlLongRunningScriptDetectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_long_running_script_detected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_new_window_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNewWindowRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_new_window_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_permission_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlPermissionRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_permission_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_script_notify(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlScriptNotifyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_script_notify(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsafe_content_warning_displaying(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unsafe_content_warning_displaying(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsupported_uri_scheme_identified(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unsupported_uri_scheme_identified(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unviewable_content_identified(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlUnviewableContentIdentifiedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unviewable_content_identified(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_resource_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlWebResourceRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_web_resource_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUIVoiceCommandActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    result: typing.Optional[winrt.windows.media.speechrecognition.SpeechRecognitionResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIVoiceCommandActivatedEventArgs: ...

class WebUIWalletActionActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    action_id: str
    action_kind: winrt.windows.applicationmodel.wallet.WalletActionKind
    item_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIWalletActionActivatedEventArgs: ...

class WebUIWebAccountProviderActivatedEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winrt.windows.system.User]
    operation: typing.Optional[winrt.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIWebAccountProviderActivatedEventArgs: ...

class WebUIWebAuthenticationBrokerContinuationEventArgs(winrt.system.Object):
    kind: winrt.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winrt.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]
    continuation_data: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    web_authentication_result: typing.Optional[winrt.windows.security.authentication.web.WebAuthenticationResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIWebAuthenticationBrokerContinuationEventArgs: ...

class IActivatedEventArgsDeferral(winrt.system.Object):
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IActivatedEventArgsDeferral: ...

class IWebUIBackgroundTaskInstance(winrt.system.Object):
    succeeded: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUIBackgroundTaskInstance: ...

class IWebUINavigatedEventArgs(winrt.system.Object):
    navigated_operation: typing.Optional[WebUINavigatedOperation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUINavigatedEventArgs: ...

ActivatedEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[winrt.windows.applicationmodel.activation.IActivatedEventArgs]], None]

BackgroundActivatedEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[winrt.windows.applicationmodel.activation.IBackgroundActivatedEventArgs]], None]

EnteredBackgroundEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[winrt.windows.applicationmodel.IEnteredBackgroundEventArgs]], None]

LeavingBackgroundEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[winrt.windows.applicationmodel.ILeavingBackgroundEventArgs]], None]

NavigatedEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[IWebUINavigatedEventArgs]], None]

ResumingEventHandler = typing.Callable[[typing.Optional[winrt.system.Object]], None]

SuspendingEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[winrt.windows.applicationmodel.ISuspendingEventArgs]], None]

