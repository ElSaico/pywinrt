// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.UI.Xaml.Resources.h"


namespace py::cpp::Windows::UI::Xaml::Resources
{
    struct module_state
    {
        PyTypeObject* type_CustomXamlResourceLoader;
    };

    // ----- CustomXamlResourceLoader class --------------------
    static constexpr const char* const type_name_CustomXamlResourceLoader = "CustomXamlResourceLoader";

    static PyObject* _new_CustomXamlResourceLoader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CustomXamlResourceLoader(py::wrapper::Windows::UI::Xaml::Resources::CustomXamlResourceLoader* self) noexcept
    {
        auto tp = Py_TYPE(self);

        if (PyType_IS_GC(tp))
        {
            PyObject_GC_UnTrack(self);
        }

        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CustomXamlResourceLoader_GetResource(py::wrapper::Windows::UI::Xaml::Resources::CustomXamlResourceLoader* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Xaml.Resources.CustomXamlResourceLoader", L"GetResource", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                return py::convert(self->obj.GetResource(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CustomXamlResourceLoader_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Resources.CustomXamlResourceLoader", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CustomXamlResourceLoader_put_Current(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Xaml.Resources.CustomXamlResourceLoader", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader>(arg);

            winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader::Current(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CustomXamlResourceLoader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CustomXamlResourceLoader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CustomXamlResourceLoader[] = {
        { "get_resource", reinterpret_cast<PyCFunction>(CustomXamlResourceLoader_GetResource), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_CustomXamlResourceLoader, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CustomXamlResourceLoader), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CustomXamlResourceLoader[] = {
        { }
    };

    static PyType_Slot _type_slots_CustomXamlResourceLoader[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CustomXamlResourceLoader) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CustomXamlResourceLoader) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CustomXamlResourceLoader) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CustomXamlResourceLoader) },
        { },
    };

    static PyType_Spec type_spec_CustomXamlResourceLoader =
    {
        "_winrt_Windows_UI_Xaml_Resources.CustomXamlResourceLoader",
        sizeof(py::wrapper::Windows::UI::Xaml::Resources::CustomXamlResourceLoader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CustomXamlResourceLoader
    };

    static PyGetSetDef getset_CustomXamlResourceLoader_Meta[] = {
        { "current", reinterpret_cast<getter>(CustomXamlResourceLoader_get_Current), reinterpret_cast<setter>(CustomXamlResourceLoader_put_Current), nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_CustomXamlResourceLoader_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CustomXamlResourceLoader_Meta) },
        { }
    };

    static PyType_Spec type_spec_CustomXamlResourceLoader_Meta =
    {
        "_winrt_Windows_UI_Xaml_Resources.CustomXamlResourceLoader_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CustomXamlResourceLoader_Meta
    };

    // ----- Windows.UI.Xaml.Resources Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Xaml::Resources");


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_CustomXamlResourceLoader);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_CustomXamlResourceLoader);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_Windows_UI_Xaml_Resources",
           module_doc,
           sizeof(module_state),
           nullptr,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::UI::Xaml::Resources

PyMODINIT_FUNC PyInit__winrt_Windows_UI_Xaml_Resources(void) noexcept
{
    using namespace py::cpp::Windows::UI::Xaml::Resources;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    WINRT_ASSERT(state);

    py::pyobj_handle type_CustomXamlResourceLoader_Meta{PyType_FromSpec(&type_spec_CustomXamlResourceLoader_Meta)};
    if (!type_CustomXamlResourceLoader_Meta)
    {
        return nullptr;
    }

    state->type_CustomXamlResourceLoader = py::register_python_type(module.get(), type_name_CustomXamlResourceLoader, &type_spec_CustomXamlResourceLoader, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CustomXamlResourceLoader_Meta.get()));
    if (!state->type_CustomXamlResourceLoader)
    {
        return nullptr;
    }


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI::Xaml::Resources;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI::Xaml::Resources");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CustomXamlResourceLoader;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Xaml::Resources::CustomXamlResourceLoader is not registered");
        return nullptr;
    }

    return python_type;
}
