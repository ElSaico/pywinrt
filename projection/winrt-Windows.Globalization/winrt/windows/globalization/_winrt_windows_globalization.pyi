# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system

from . import DayOfWeek, LanguageLayoutDirection

Self = typing.TypeVar('Self')

class ApplicationLanguages(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationLanguages: ...
    @staticmethod
    def get_languages_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    primary_language_override: typing.ClassVar[str]
    languages: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]]
    manifest_languages: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]]

class Calendar(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Calendar: ...
    @typing.overload
    def __new__(cls: typing.Type[Calendar], languages: typing.Iterable[str], calendar: str, clock: str, time_zone_id: str) -> Calendar:...
    @typing.overload
    def __new__(cls: typing.Type[Calendar], languages: typing.Iterable[str]) -> Calendar:...
    @typing.overload
    def __new__(cls: typing.Type[Calendar], languages: typing.Iterable[str], calendar: str, clock: str) -> Calendar:...
    @typing.overload
    def __new__(cls: typing.Type[Calendar]) -> Calendar:...
    def add_days(self, days: winrt.system.Int32, /) -> None: ...
    def add_eras(self, eras: winrt.system.Int32, /) -> None: ...
    def add_hours(self, hours: winrt.system.Int32, /) -> None: ...
    def add_minutes(self, minutes: winrt.system.Int32, /) -> None: ...
    def add_months(self, months: winrt.system.Int32, /) -> None: ...
    def add_nanoseconds(self, nanoseconds: winrt.system.Int32, /) -> None: ...
    def add_periods(self, periods: winrt.system.Int32, /) -> None: ...
    def add_seconds(self, seconds: winrt.system.Int32, /) -> None: ...
    def add_weeks(self, weeks: winrt.system.Int32, /) -> None: ...
    def add_years(self, years: winrt.system.Int32, /) -> None: ...
    def change_calendar_system(self, value: str, /) -> None: ...
    def change_clock(self, value: str, /) -> None: ...
    def change_time_zone(self, time_zone_id: str, /) -> None: ...
    def clone(self) -> typing.Optional[Calendar]: ...
    def compare(self, other: typing.Optional[Calendar], /) -> winrt.system.Int32: ...
    def compare_date_time(self, other: datetime.datetime, /) -> winrt.system.Int32: ...
    def copy_to(self, other: typing.Optional[Calendar], /) -> None: ...
    def day_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def day_as_string(self) -> str: ...
    @typing.overload
    def day_of_week_as_solo_string(self) -> str: ...
    @typing.overload
    def day_of_week_as_solo_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def day_of_week_as_string(self) -> str: ...
    @typing.overload
    def day_of_week_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def era_as_string(self) -> str: ...
    @typing.overload
    def era_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def get_calendar_system(self) -> str: ...
    def get_clock(self) -> str: ...
    def get_date_time(self) -> datetime.datetime: ...
    def get_time_zone(self) -> str: ...
    def hour_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def hour_as_string(self) -> str: ...
    def minute_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def minute_as_string(self) -> str: ...
    def month_as_numeric_string(self) -> str: ...
    def month_as_padded_numeric_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def month_as_solo_string(self) -> str: ...
    @typing.overload
    def month_as_solo_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def month_as_string(self) -> str: ...
    @typing.overload
    def month_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def nanosecond_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def nanosecond_as_string(self) -> str: ...
    @typing.overload
    def period_as_string(self) -> str: ...
    @typing.overload
    def period_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def second_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def second_as_string(self) -> str: ...
    def set_date_time(self, value: datetime.datetime, /) -> None: ...
    def set_to_max(self) -> None: ...
    def set_to_min(self) -> None: ...
    def set_to_now(self) -> None: ...
    @typing.overload
    def time_zone_as_string(self) -> str: ...
    @typing.overload
    def time_zone_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def year_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def year_as_string(self) -> str: ...
    def year_as_truncated_string(self, remaining_digits: winrt.system.Int32, /) -> str: ...
    @_property
    def year(self) -> winrt.system.Int32: ...
    @year.setter
    def year(self, value: winrt.system.Int32) -> None: ...
    @_property
    def second(self) -> winrt.system.Int32: ...
    @second.setter
    def second(self, value: winrt.system.Int32) -> None: ...
    @_property
    def period(self) -> winrt.system.Int32: ...
    @period.setter
    def period(self, value: winrt.system.Int32) -> None: ...
    @_property
    def nanosecond(self) -> winrt.system.Int32: ...
    @nanosecond.setter
    def nanosecond(self, value: winrt.system.Int32) -> None: ...
    @_property
    def month(self) -> winrt.system.Int32: ...
    @month.setter
    def month(self, value: winrt.system.Int32) -> None: ...
    @_property
    def minute(self) -> winrt.system.Int32: ...
    @minute.setter
    def minute(self, value: winrt.system.Int32) -> None: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def era(self) -> winrt.system.Int32: ...
    @era.setter
    def era(self, value: winrt.system.Int32) -> None: ...
    @_property
    def hour(self) -> winrt.system.Int32: ...
    @hour.setter
    def hour(self, value: winrt.system.Int32) -> None: ...
    @_property
    def day(self) -> winrt.system.Int32: ...
    @day.setter
    def day(self, value: winrt.system.Int32) -> None: ...
    @_property
    def first_second_in_this_minute(self) -> winrt.system.Int32: ...
    @_property
    def first_year_in_this_era(self) -> winrt.system.Int32: ...
    @_property
    def is_daylight_saving_time(self) -> bool: ...
    @_property
    def languages(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def last_day_in_this_month(self) -> winrt.system.Int32: ...
    @_property
    def last_era(self) -> winrt.system.Int32: ...
    @_property
    def last_hour_in_this_period(self) -> winrt.system.Int32: ...
    @_property
    def last_minute_in_this_hour(self) -> winrt.system.Int32: ...
    @_property
    def last_month_in_this_year(self) -> winrt.system.Int32: ...
    @_property
    def last_second_in_this_minute(self) -> winrt.system.Int32: ...
    @_property
    def last_year_in_this_era(self) -> winrt.system.Int32: ...
    @_property
    def day_of_week(self) -> DayOfWeek: ...
    @_property
    def first_day_in_this_month(self) -> winrt.system.Int32: ...
    @_property
    def last_period_in_this_day(self) -> winrt.system.Int32: ...
    @_property
    def first_era(self) -> winrt.system.Int32: ...
    @_property
    def number_of_days_in_this_month(self) -> winrt.system.Int32: ...
    @_property
    def number_of_eras(self) -> winrt.system.Int32: ...
    @_property
    def number_of_hours_in_this_period(self) -> winrt.system.Int32: ...
    @_property
    def number_of_minutes_in_this_hour(self) -> winrt.system.Int32: ...
    @_property
    def first_hour_in_this_period(self) -> winrt.system.Int32: ...
    @_property
    def number_of_months_in_this_year(self) -> winrt.system.Int32: ...
    @_property
    def number_of_periods_in_this_day(self) -> winrt.system.Int32: ...
    @_property
    def number_of_seconds_in_this_minute(self) -> winrt.system.Int32: ...
    @_property
    def number_of_years_in_this_era(self) -> winrt.system.Int32: ...
    @_property
    def first_minute_in_this_hour(self) -> winrt.system.Int32: ...
    @_property
    def resolved_language(self) -> str: ...
    @_property
    def first_month_in_this_year(self) -> winrt.system.Int32: ...
    @_property
    def first_period_in_this_day(self) -> winrt.system.Int32: ...

class CalendarIdentifiers(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarIdentifiers: ...
    julian: typing.ClassVar[str]
    gregorian: typing.ClassVar[str]
    hebrew: typing.ClassVar[str]
    hijri: typing.ClassVar[str]
    japanese: typing.ClassVar[str]
    korean: typing.ClassVar[str]
    taiwan: typing.ClassVar[str]
    thai: typing.ClassVar[str]
    um_al_qura: typing.ClassVar[str]
    persian: typing.ClassVar[str]
    chinese_lunar: typing.ClassVar[str]
    vietnamese_lunar: typing.ClassVar[str]
    taiwan_lunar: typing.ClassVar[str]
    korean_lunar: typing.ClassVar[str]
    japanese_lunar: typing.ClassVar[str]

class ClockIdentifiers(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClockIdentifiers: ...
    twelve_hour: typing.ClassVar[str]
    twenty_four_hour: typing.ClassVar[str]

class CurrencyAmount(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CurrencyAmount: ...
    def __new__(cls: typing.Type[CurrencyAmount], amount: str, currency: str) -> CurrencyAmount:...
    @_property
    def amount(self) -> str: ...
    @_property
    def currency(self) -> str: ...

class CurrencyIdentifiers(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CurrencyIdentifiers: ...
    h_n_l: typing.ClassVar[str]
    a_e_d: typing.ClassVar[str]
    a_f_n: typing.ClassVar[str]
    a_l_l: typing.ClassVar[str]
    a_m_d: typing.ClassVar[str]
    a_n_g: typing.ClassVar[str]
    a_o_a: typing.ClassVar[str]
    a_r_s: typing.ClassVar[str]
    a_u_d: typing.ClassVar[str]
    a_w_g: typing.ClassVar[str]
    a_z_n: typing.ClassVar[str]
    b_a_m: typing.ClassVar[str]
    b_b_d: typing.ClassVar[str]
    b_d_t: typing.ClassVar[str]
    b_g_n: typing.ClassVar[str]
    b_h_d: typing.ClassVar[str]
    b_i_f: typing.ClassVar[str]
    b_m_d: typing.ClassVar[str]
    b_n_d: typing.ClassVar[str]
    b_o_b: typing.ClassVar[str]
    b_r_l: typing.ClassVar[str]
    b_s_d: typing.ClassVar[str]
    b_t_n: typing.ClassVar[str]
    b_w_p: typing.ClassVar[str]
    b_y_r: typing.ClassVar[str]
    b_z_d: typing.ClassVar[str]
    c_a_d: typing.ClassVar[str]
    c_d_f: typing.ClassVar[str]
    c_h_f: typing.ClassVar[str]
    c_l_p: typing.ClassVar[str]
    c_n_y: typing.ClassVar[str]
    c_o_p: typing.ClassVar[str]
    c_r_c: typing.ClassVar[str]
    c_u_p: typing.ClassVar[str]
    c_v_e: typing.ClassVar[str]
    c_z_k: typing.ClassVar[str]
    d_j_f: typing.ClassVar[str]
    d_k_k: typing.ClassVar[str]
    d_o_p: typing.ClassVar[str]
    d_z_d: typing.ClassVar[str]
    e_g_p: typing.ClassVar[str]
    e_r_n: typing.ClassVar[str]
    e_t_b: typing.ClassVar[str]
    e_u_r: typing.ClassVar[str]
    f_j_d: typing.ClassVar[str]
    f_k_p: typing.ClassVar[str]
    g_b_p: typing.ClassVar[str]
    g_e_l: typing.ClassVar[str]
    g_h_s: typing.ClassVar[str]
    g_i_p: typing.ClassVar[str]
    g_m_d: typing.ClassVar[str]
    g_n_f: typing.ClassVar[str]
    g_t_q: typing.ClassVar[str]
    g_y_d: typing.ClassVar[str]
    h_k_d: typing.ClassVar[str]
    r_o_n: typing.ClassVar[str]
    h_r_k: typing.ClassVar[str]
    h_t_g: typing.ClassVar[str]
    h_u_f: typing.ClassVar[str]
    i_d_r: typing.ClassVar[str]
    i_l_s: typing.ClassVar[str]
    i_n_r: typing.ClassVar[str]
    i_q_d: typing.ClassVar[str]
    i_r_r: typing.ClassVar[str]
    i_s_k: typing.ClassVar[str]
    j_m_d: typing.ClassVar[str]
    j_o_d: typing.ClassVar[str]
    j_p_y: typing.ClassVar[str]
    k_e_s: typing.ClassVar[str]
    k_g_s: typing.ClassVar[str]
    k_h_r: typing.ClassVar[str]
    k_m_f: typing.ClassVar[str]
    k_p_w: typing.ClassVar[str]
    k_r_w: typing.ClassVar[str]
    k_w_d: typing.ClassVar[str]
    k_y_d: typing.ClassVar[str]
    k_z_t: typing.ClassVar[str]
    l_a_k: typing.ClassVar[str]
    l_b_p: typing.ClassVar[str]
    l_k_r: typing.ClassVar[str]
    l_r_d: typing.ClassVar[str]
    l_s_l: typing.ClassVar[str]
    l_t_l: typing.ClassVar[str]
    l_v_l: typing.ClassVar[str]
    l_y_d: typing.ClassVar[str]
    m_a_d: typing.ClassVar[str]
    m_d_l: typing.ClassVar[str]
    m_g_a: typing.ClassVar[str]
    m_k_d: typing.ClassVar[str]
    m_m_k: typing.ClassVar[str]
    m_n_t: typing.ClassVar[str]
    m_o_p: typing.ClassVar[str]
    m_r_o: typing.ClassVar[str]
    m_u_r: typing.ClassVar[str]
    m_v_r: typing.ClassVar[str]
    m_w_k: typing.ClassVar[str]
    m_x_n: typing.ClassVar[str]
    m_y_r: typing.ClassVar[str]
    m_z_n: typing.ClassVar[str]
    n_a_d: typing.ClassVar[str]
    n_g_n: typing.ClassVar[str]
    n_i_o: typing.ClassVar[str]
    n_o_k: typing.ClassVar[str]
    n_p_r: typing.ClassVar[str]
    n_z_d: typing.ClassVar[str]
    o_m_r: typing.ClassVar[str]
    p_a_b: typing.ClassVar[str]
    p_e_n: typing.ClassVar[str]
    p_g_k: typing.ClassVar[str]
    p_h_p: typing.ClassVar[str]
    p_k_r: typing.ClassVar[str]
    p_l_n: typing.ClassVar[str]
    p_y_g: typing.ClassVar[str]
    q_a_r: typing.ClassVar[str]
    r_s_d: typing.ClassVar[str]
    r_u_b: typing.ClassVar[str]
    r_w_f: typing.ClassVar[str]
    s_a_r: typing.ClassVar[str]
    s_b_d: typing.ClassVar[str]
    s_c_r: typing.ClassVar[str]
    s_d_g: typing.ClassVar[str]
    s_e_k: typing.ClassVar[str]
    s_g_d: typing.ClassVar[str]
    s_h_p: typing.ClassVar[str]
    s_l_l: typing.ClassVar[str]
    s_o_s: typing.ClassVar[str]
    s_r_d: typing.ClassVar[str]
    s_t_d: typing.ClassVar[str]
    s_y_p: typing.ClassVar[str]
    s_z_l: typing.ClassVar[str]
    t_h_b: typing.ClassVar[str]
    t_j_s: typing.ClassVar[str]
    t_m_t: typing.ClassVar[str]
    t_n_d: typing.ClassVar[str]
    t_o_p: typing.ClassVar[str]
    t_r_y: typing.ClassVar[str]
    t_t_d: typing.ClassVar[str]
    t_w_d: typing.ClassVar[str]
    t_z_s: typing.ClassVar[str]
    u_a_h: typing.ClassVar[str]
    u_g_x: typing.ClassVar[str]
    u_s_d: typing.ClassVar[str]
    u_y_u: typing.ClassVar[str]
    u_z_s: typing.ClassVar[str]
    v_e_f: typing.ClassVar[str]
    v_n_d: typing.ClassVar[str]
    v_u_v: typing.ClassVar[str]
    w_s_t: typing.ClassVar[str]
    x_a_f: typing.ClassVar[str]
    x_c_d: typing.ClassVar[str]
    x_o_f: typing.ClassVar[str]
    x_p_f: typing.ClassVar[str]
    x_x_x: typing.ClassVar[str]
    y_e_r: typing.ClassVar[str]
    z_a_r: typing.ClassVar[str]
    z_m_w: typing.ClassVar[str]
    z_w_l: typing.ClassVar[str]
    b_y_n: typing.ClassVar[str]
    s_s_p: typing.ClassVar[str]
    s_t_n: typing.ClassVar[str]
    v_e_s: typing.ClassVar[str]
    m_r_u: typing.ClassVar[str]

class GeographicRegion(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeographicRegion: ...
    @typing.overload
    def __new__(cls: typing.Type[GeographicRegion], geographic_region_code: str) -> GeographicRegion:...
    @typing.overload
    def __new__(cls: typing.Type[GeographicRegion]) -> GeographicRegion:...
    @staticmethod
    def is_supported(geographic_region_code: str, /) -> bool: ...
    @_property
    def code(self) -> str: ...
    @_property
    def code_three_digit(self) -> str: ...
    @_property
    def code_three_letter(self) -> str: ...
    @_property
    def code_two_letter(self) -> str: ...
    @_property
    def currencies_in_use(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def native_name(self) -> str: ...

class JapanesePhoneme(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JapanesePhoneme: ...
    @_property
    def display_text(self) -> str: ...
    @_property
    def is_phrase_start(self) -> bool: ...
    @_property
    def yomi_text(self) -> str: ...

class JapanesePhoneticAnalyzer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JapanesePhoneticAnalyzer: ...
    @typing.overload
    @staticmethod
    def get_words(input: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[JapanesePhoneme]]: ...
    @typing.overload
    @staticmethod
    def get_words(input: str, mono_ruby: bool, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[JapanesePhoneme]]: ...

class Language(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Language: ...
    def __new__(cls: typing.Type[Language], language_tag: str) -> Language:...
    def get_extension_subtags(self, singleton: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @staticmethod
    def get_mui_compatible_language_list_from_language_tags(language_tags: typing.Iterable[str], /) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @staticmethod
    def is_well_formed(language_tag: str, /) -> bool: ...
    @staticmethod
    def try_set_input_method_language_tag(language_tag: str, /) -> bool: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def language_tag(self) -> str: ...
    @_property
    def native_name(self) -> str: ...
    @_property
    def script(self) -> str: ...
    @_property
    def layout_direction(self) -> LanguageLayoutDirection: ...
    @_property
    def abbreviated_name(self) -> str: ...
    current_input_method_language_tag: typing.ClassVar[str]

class NumeralSystemIdentifiers(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NumeralSystemIdentifiers: ...
    full_wide: typing.ClassVar[str]
    arab: typing.ClassVar[str]
    arab_ext: typing.ClassVar[str]
    bali: typing.ClassVar[str]
    beng: typing.ClassVar[str]
    cham: typing.ClassVar[str]
    deva: typing.ClassVar[str]
    mymr_shan: typing.ClassVar[str]
    gujr: typing.ClassVar[str]
    guru: typing.ClassVar[str]
    hani_dec: typing.ClassVar[str]
    java: typing.ClassVar[str]
    kali: typing.ClassVar[str]
    khmr: typing.ClassVar[str]
    knda: typing.ClassVar[str]
    lana: typing.ClassVar[str]
    lana_tham: typing.ClassVar[str]
    laoo: typing.ClassVar[str]
    latn: typing.ClassVar[str]
    lepc: typing.ClassVar[str]
    limb: typing.ClassVar[str]
    mlym: typing.ClassVar[str]
    mong: typing.ClassVar[str]
    mtei: typing.ClassVar[str]
    mymr: typing.ClassVar[str]
    nkoo: typing.ClassVar[str]
    olck: typing.ClassVar[str]
    orya: typing.ClassVar[str]
    saur: typing.ClassVar[str]
    sund: typing.ClassVar[str]
    talu: typing.ClassVar[str]
    taml_dec: typing.ClassVar[str]
    telu: typing.ClassVar[str]
    thai: typing.ClassVar[str]
    tibt: typing.ClassVar[str]
    vaii: typing.ClassVar[str]
    math_bold: typing.ClassVar[str]
    math_dbl: typing.ClassVar[str]
    math_mono: typing.ClassVar[str]
    math_sanb: typing.ClassVar[str]
    math_sans: typing.ClassVar[str]
    osma: typing.ClassVar[str]
    zmth_bold: typing.ClassVar[str]
    zmth_dbl: typing.ClassVar[str]
    zmth_mono: typing.ClassVar[str]
    zmth_sanb: typing.ClassVar[str]
    zmth_sans: typing.ClassVar[str]
    brah: typing.ClassVar[str]

