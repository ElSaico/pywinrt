# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.applicationmodel.appservice
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking
import winrt.windows.security.credentials
import winrt.windows.system

class RemoteSystemAccessStatus(enum.IntEnum):
    UNSPECIFIED = 0
    ALLOWED = 1
    DENIED_BY_USER = 2
    DENIED_BY_SYSTEM = 3

class RemoteSystemAuthorizationKind(enum.IntEnum):
    SAME_USER = 0
    ANONYMOUS = 1

class RemoteSystemDiscoveryType(enum.IntEnum):
    ANY = 0
    PROXIMAL = 1
    CLOUD = 2
    SPATIALLY_PROXIMAL = 3

class RemoteSystemPlatform(enum.IntEnum):
    UNKNOWN = 0
    WINDOWS = 1
    ANDROID = 2
    IOS = 3
    LINUX = 4

class RemoteSystemSessionCreationStatus(enum.IntEnum):
    SUCCESS = 0
    SESSION_LIMITS_EXCEEDED = 1
    OPERATION_ABORTED = 2

class RemoteSystemSessionDisconnectedReason(enum.IntEnum):
    SESSION_UNAVAILABLE = 0
    REMOVED_BY_CONTROLLER = 1
    SESSION_CLOSED = 2

class RemoteSystemSessionJoinStatus(enum.IntEnum):
    SUCCESS = 0
    SESSION_LIMITS_EXCEEDED = 1
    OPERATION_ABORTED = 2
    SESSION_UNAVAILABLE = 3
    REJECTED_BY_CONTROLLER = 4

class RemoteSystemSessionMessageChannelReliability(enum.IntEnum):
    RELIABLE = 0
    UNRELIABLE = 1

class RemoteSystemSessionParticipantWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class RemoteSystemSessionWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4
    ABORTED = 5

class RemoteSystemStatus(enum.IntEnum):
    UNAVAILABLE = 0
    DISCOVERING_AVAILABILITY = 1
    AVAILABLE = 2
    UNKNOWN = 3

class RemoteSystemStatusType(enum.IntEnum):
    ANY = 0
    AVAILABLE = 1

class RemoteSystemWatcherError(enum.IntEnum):
    UNKNOWN = 0
    INTERNET_NOT_AVAILABLE = 1
    AUTHENTICATION_ERROR = 2

Self = typing.TypeVar('Self')

class KnownRemoteSystemCapabilities(winrt.system.Object):
    app_service: typing.ClassVar[str]
    launch_uri: typing.ClassVar[str]
    remote_session: typing.ClassVar[str]
    spatial_entity: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KnownRemoteSystemCapabilities: ...

class RemoteSystem(winrt.system.Object):
    display_name: str
    id: str
    is_available_by_proximity: winrt.system.Boolean
    kind: str
    status: RemoteSystemStatus
    is_available_by_spatial_proximity: winrt.system.Boolean
    manufacturer_display_name: str
    model_display_name: str
    platform: RemoteSystemPlatform
    apps: typing.Optional[winrt.windows.foundation.collections.IVectorView[RemoteSystemApp]]
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystem: ...
    @typing.overload
    @staticmethod
    def create_watcher() -> typing.Optional[RemoteSystemWatcher]: ...
    @typing.overload
    @staticmethod
    def create_watcher(filters: typing.Iterable[IRemoteSystemFilter], /) -> typing.Optional[RemoteSystemWatcher]: ...
    @typing.overload
    @staticmethod
    def create_watcher_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[RemoteSystemWatcher]: ...
    @typing.overload
    @staticmethod
    def create_watcher_for_user(user: typing.Optional[winrt.windows.system.User], filters: typing.Iterable[IRemoteSystemFilter], /) -> typing.Optional[RemoteSystemWatcher]: ...
    @staticmethod
    def find_by_host_name_async(host_name: typing.Optional[winrt.windows.networking.HostName], /) -> winrt.windows.foundation.IAsyncOperation[RemoteSystem]: ...
    def get_capability_supported_async(self, capability_name: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    @staticmethod
    def is_authorization_kind_enabled(kind: RemoteSystemAuthorizationKind, /) -> winrt.system.Boolean: ...
    @staticmethod
    def request_access_async() -> winrt.windows.foundation.IAsyncOperation[RemoteSystemAccessStatus]: ...

class RemoteSystemAddedEventArgs(winrt.system.Object):
    remote_system: typing.Optional[RemoteSystem]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemAddedEventArgs: ...

class RemoteSystemApp(winrt.system.Object):
    attributes: typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]
    display_name: str
    id: str
    is_available_by_proximity: winrt.system.Boolean
    is_available_by_spatial_proximity: winrt.system.Boolean
    connection_token: str
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemApp: ...

class RemoteSystemAppRegistration(winrt.system.Object):
    attributes: typing.Optional[winrt.windows.foundation.collections.IMap[str, str]]
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemAppRegistration: ...
    @staticmethod
    def get_default() -> typing.Optional[RemoteSystemAppRegistration]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[RemoteSystemAppRegistration]: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...

class RemoteSystemAuthorizationKindFilter(winrt.system.Object):
    remote_system_authorization_kind: RemoteSystemAuthorizationKind
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemAuthorizationKindFilter: ...
    def __new__(cls: typing.Type[RemoteSystemAuthorizationKindFilter], remote_system_authorization_kind: RemoteSystemAuthorizationKind) -> RemoteSystemAuthorizationKindFilter:...

class RemoteSystemConnectionInfo(winrt.system.Object):
    is_proximal: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemConnectionInfo: ...
    @staticmethod
    def try_create_from_app_service_connection(connection: typing.Optional[winrt.windows.applicationmodel.appservice.AppServiceConnection], /) -> typing.Optional[RemoteSystemConnectionInfo]: ...

class RemoteSystemConnectionRequest(winrt.system.Object):
    remote_system: typing.Optional[RemoteSystem]
    remote_system_app: typing.Optional[RemoteSystemApp]
    connection_token: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemConnectionRequest: ...
    def __new__(cls: typing.Type[RemoteSystemConnectionRequest], remote_system: typing.Optional[RemoteSystem]) -> RemoteSystemConnectionRequest:...
    @staticmethod
    def create_for_app(remote_system_app: typing.Optional[RemoteSystemApp], /) -> typing.Optional[RemoteSystemConnectionRequest]: ...
    @staticmethod
    def create_from_connection_token(connection_token: str, /) -> typing.Optional[RemoteSystemConnectionRequest]: ...
    @staticmethod
    def create_from_connection_token_for_user(user: typing.Optional[winrt.windows.system.User], connection_token: str, /) -> typing.Optional[RemoteSystemConnectionRequest]: ...

class RemoteSystemDiscoveryTypeFilter(winrt.system.Object):
    remote_system_discovery_type: RemoteSystemDiscoveryType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemDiscoveryTypeFilter: ...
    def __new__(cls: typing.Type[RemoteSystemDiscoveryTypeFilter], discovery_type: RemoteSystemDiscoveryType) -> RemoteSystemDiscoveryTypeFilter:...

class RemoteSystemEnumerationCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemEnumerationCompletedEventArgs: ...

class RemoteSystemKindFilter(winrt.system.Object):
    remote_system_kinds: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemKindFilter: ...
    def __new__(cls: typing.Type[RemoteSystemKindFilter], remote_system_kinds: typing.Iterable[str]) -> RemoteSystemKindFilter:...

class RemoteSystemKinds(winrt.system.Object):
    desktop: typing.ClassVar[str]
    holographic: typing.ClassVar[str]
    hub: typing.ClassVar[str]
    phone: typing.ClassVar[str]
    xbox: typing.ClassVar[str]
    iot: typing.ClassVar[str]
    laptop: typing.ClassVar[str]
    tablet: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemKinds: ...

class RemoteSystemRemovedEventArgs(winrt.system.Object):
    remote_system_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemRemovedEventArgs: ...

class RemoteSystemSession(winrt.system.Object):
    controller_display_name: str
    display_name: str
    id: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSession: ...
    def close(self) -> None: ...
    def create_participant_watcher(self) -> typing.Optional[RemoteSystemSessionParticipantWatcher]: ...
    @staticmethod
    def create_watcher() -> typing.Optional[RemoteSystemSessionWatcher]: ...
    def send_invitation_async(self, invitee: typing.Optional[RemoteSystem], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def add_disconnected(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSession, RemoteSystemSessionDisconnectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RemoteSystemSessionAddedEventArgs(winrt.system.Object):
    session_info: typing.Optional[RemoteSystemSessionInfo]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionAddedEventArgs: ...

class RemoteSystemSessionController(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionController: ...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionController], display_name: str) -> RemoteSystemSessionController:...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionController], display_name: str, options: typing.Optional[RemoteSystemSessionOptions]) -> RemoteSystemSessionController:...
    def create_session_async(self) -> winrt.windows.foundation.IAsyncOperation[RemoteSystemSessionCreationResult]: ...
    def remove_participant_async(self, p_participant: typing.Optional[RemoteSystemSessionParticipant], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def add_join_requested(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionController, RemoteSystemSessionJoinRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_join_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RemoteSystemSessionCreationResult(winrt.system.Object):
    session: typing.Optional[RemoteSystemSession]
    status: RemoteSystemSessionCreationStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionCreationResult: ...

class RemoteSystemSessionDisconnectedEventArgs(winrt.system.Object):
    reason: RemoteSystemSessionDisconnectedReason
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionDisconnectedEventArgs: ...

class RemoteSystemSessionInfo(winrt.system.Object):
    controller_display_name: str
    display_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInfo: ...
    def join_async(self) -> winrt.windows.foundation.IAsyncOperation[RemoteSystemSessionJoinResult]: ...

class RemoteSystemSessionInvitation(winrt.system.Object):
    sender: typing.Optional[RemoteSystem]
    session_info: typing.Optional[RemoteSystemSessionInfo]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInvitation: ...

class RemoteSystemSessionInvitationListener(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInvitationListener: ...
    def __new__(cls: typing.Type[RemoteSystemSessionInvitationListener]) -> RemoteSystemSessionInvitationListener:...
    def add_invitation_received(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionInvitationListener, RemoteSystemSessionInvitationReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_invitation_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RemoteSystemSessionInvitationReceivedEventArgs(winrt.system.Object):
    invitation: typing.Optional[RemoteSystemSessionInvitation]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInvitationReceivedEventArgs: ...

class RemoteSystemSessionJoinRequest(winrt.system.Object):
    participant: typing.Optional[RemoteSystemSessionParticipant]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionJoinRequest: ...
    def accept(self) -> None: ...

class RemoteSystemSessionJoinRequestedEventArgs(winrt.system.Object):
    join_request: typing.Optional[RemoteSystemSessionJoinRequest]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionJoinRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class RemoteSystemSessionJoinResult(winrt.system.Object):
    session: typing.Optional[RemoteSystemSession]
    status: RemoteSystemSessionJoinStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionJoinResult: ...

class RemoteSystemSessionMessageChannel(winrt.system.Object):
    session: typing.Optional[RemoteSystemSession]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionMessageChannel: ...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionMessageChannel], session: typing.Optional[RemoteSystemSession], channel_name: str) -> RemoteSystemSessionMessageChannel:...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionMessageChannel], session: typing.Optional[RemoteSystemSession], channel_name: str, reliability: RemoteSystemSessionMessageChannelReliability) -> RemoteSystemSessionMessageChannel:...
    def broadcast_value_set_async(self, message_data: typing.Optional[winrt.windows.foundation.collections.ValueSet], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def send_value_set_async(self, message_data: typing.Optional[winrt.windows.foundation.collections.ValueSet], participant: typing.Optional[RemoteSystemSessionParticipant], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def send_value_set_to_participants_async(self, message_data: typing.Optional[winrt.windows.foundation.collections.ValueSet], participants: typing.Iterable[RemoteSystemSessionParticipant], /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Boolean]: ...
    def add_value_set_received(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionMessageChannel, RemoteSystemSessionValueSetReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_value_set_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RemoteSystemSessionOptions(winrt.system.Object):
    is_invite_only: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionOptions: ...
    def __new__(cls: typing.Type[RemoteSystemSessionOptions]) -> RemoteSystemSessionOptions:...

class RemoteSystemSessionParticipant(winrt.system.Object):
    remote_system: typing.Optional[RemoteSystem]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipant: ...
    def get_host_names(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.HostName]]: ...

class RemoteSystemSessionParticipantAddedEventArgs(winrt.system.Object):
    participant: typing.Optional[RemoteSystemSessionParticipant]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipantAddedEventArgs: ...

class RemoteSystemSessionParticipantRemovedEventArgs(winrt.system.Object):
    participant: typing.Optional[RemoteSystemSessionParticipant]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipantRemovedEventArgs: ...

class RemoteSystemSessionParticipantWatcher(winrt.system.Object):
    status: RemoteSystemSessionParticipantWatcherStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipantWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, RemoteSystemSessionParticipantAddedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, RemoteSystemSessionParticipantRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RemoteSystemSessionRemovedEventArgs(winrt.system.Object):
    session_info: typing.Optional[RemoteSystemSessionInfo]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionRemovedEventArgs: ...

class RemoteSystemSessionUpdatedEventArgs(winrt.system.Object):
    session_info: typing.Optional[RemoteSystemSessionInfo]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionUpdatedEventArgs: ...

class RemoteSystemSessionValueSetReceivedEventArgs(winrt.system.Object):
    message: typing.Optional[winrt.windows.foundation.collections.ValueSet]
    sender: typing.Optional[RemoteSystemSessionParticipant]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionValueSetReceivedEventArgs: ...

class RemoteSystemSessionWatcher(winrt.system.Object):
    status: RemoteSystemSessionWatcherStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionAddedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_updated(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionUpdatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RemoteSystemStatusTypeFilter(winrt.system.Object):
    remote_system_status_type: RemoteSystemStatusType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemStatusTypeFilter: ...
    def __new__(cls: typing.Type[RemoteSystemStatusTypeFilter], remote_system_status_type: RemoteSystemStatusType) -> RemoteSystemStatusTypeFilter:...

class RemoteSystemUpdatedEventArgs(winrt.system.Object):
    remote_system: typing.Optional[RemoteSystem]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemUpdatedEventArgs: ...

class RemoteSystemWatcher(winrt.system.Object):
    user: typing.Optional[winrt.windows.system.User]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_remote_system_added(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemAddedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_remote_system_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_remote_system_removed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_remote_system_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_remote_system_updated(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemUpdatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_remote_system_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemEnumerationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_error_occurred(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemWatcherErrorOccurredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_error_occurred(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class RemoteSystemWatcherErrorOccurredEventArgs(winrt.system.Object):
    error: RemoteSystemWatcherError
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemWatcherErrorOccurredEventArgs: ...

class RemoteSystemWebAccountFilter(winrt.system.Object):
    account: typing.Optional[winrt.windows.security.credentials.WebAccount]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemWebAccountFilter: ...
    def __new__(cls: typing.Type[RemoteSystemWebAccountFilter], account: typing.Optional[winrt.windows.security.credentials.WebAccount]) -> RemoteSystemWebAccountFilter:...

class IRemoteSystemFilter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IRemoteSystemFilter: ...

