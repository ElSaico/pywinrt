# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.ui

class WebUICommandBarClosedDisplayMode(enum.IntEnum):
    DEFAULT = 0
    MINIMAL = 1
    COMPACT = 2

Self = typing.TypeVar('Self')

class WebUICommandBar(winrt.system.Object):
    visible: winrt.system.Boolean
    opacity: winrt.system.Double
    is_open: winrt.system.Boolean
    foreground_color: winrt.windows.ui.Color
    closed_display_mode: WebUICommandBarClosedDisplayMode
    background_color: winrt.windows.ui.Color
    primary_commands: typing.Optional[winrt.windows.foundation.collections.IObservableVector[IWebUICommandBarElement]]
    secondary_commands: typing.Optional[winrt.windows.foundation.collections.IObservableVector[IWebUICommandBarElement]]
    size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBar: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[WebUICommandBar]: ...
    def add_menu_closed(self, handler: typing.Optional[MenuClosedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_menu_closed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_menu_opened(self, handler: typing.Optional[MenuOpenedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_menu_opened(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: typing.Optional[SizeChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_size_changed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUICommandBarBitmapIcon(winrt.system.Object):
    uri: typing.Optional[winrt.windows.foundation.Uri]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarBitmapIcon: ...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarBitmapIcon], uri: typing.Optional[winrt.windows.foundation.Uri]) -> WebUICommandBarBitmapIcon:...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarBitmapIcon]) -> WebUICommandBarBitmapIcon:...

class WebUICommandBarConfirmationButton(winrt.system.Object):
    text: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarConfirmationButton: ...
    def __new__(cls: typing.Type[WebUICommandBarConfirmationButton]) -> WebUICommandBarConfirmationButton:...
    def add_item_invoked(self, handler: winrt.windows.foundation.TypedEventHandler[WebUICommandBarConfirmationButton, WebUICommandBarItemInvokedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_item_invoked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUICommandBarIconButton(winrt.system.Object):
    label: str
    is_toggle_button: winrt.system.Boolean
    is_checked: winrt.system.Boolean
    icon: typing.Optional[IWebUICommandBarIcon]
    enabled: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarIconButton: ...
    def __new__(cls: typing.Type[WebUICommandBarIconButton]) -> WebUICommandBarIconButton:...
    def add_item_invoked(self, handler: winrt.windows.foundation.TypedEventHandler[WebUICommandBarIconButton, WebUICommandBarItemInvokedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_item_invoked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUICommandBarItemInvokedEventArgs(winrt.system.Object):
    is_primary_command: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarItemInvokedEventArgs: ...

class WebUICommandBarSizeChangedEventArgs(winrt.system.Object):
    size: winrt.windows.foundation.Size
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarSizeChangedEventArgs: ...

class WebUICommandBarSymbolIcon(winrt.system.Object):
    symbol: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarSymbolIcon: ...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarSymbolIcon], symbol: str) -> WebUICommandBarSymbolIcon:...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarSymbolIcon]) -> WebUICommandBarSymbolIcon:...

class IWebUICommandBarElement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUICommandBarElement: ...

class IWebUICommandBarIcon(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUICommandBarIcon: ...

MenuClosedEventHandler = typing.Callable[[], None]

MenuOpenedEventHandler = typing.Callable[[], None]

SizeChangedEventHandler = typing.Callable[[typing.Optional[WebUICommandBarSizeChangedEventArgs]], None]

