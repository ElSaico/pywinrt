# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation

from . import WorkItemOptions, WorkItemPriority
from . import TimerDestroyedHandler, TimerElapsedHandler, WorkItemHandler

Self = typing.TypeVar('Self')

class ThreadPool(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ThreadPool: ...
    @typing.overload
    @staticmethod
    def run_async(handler: typing.Optional[WorkItemHandler], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    @staticmethod
    def run_async(handler: typing.Optional[WorkItemHandler], priority: WorkItemPriority, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    @staticmethod
    def run_async(handler: typing.Optional[WorkItemHandler], priority: WorkItemPriority, options: WorkItemOptions, /) -> winrt.windows.foundation.IAsyncAction: ...

class ThreadPoolTimer(winrt.system.Object):
    delay: datetime.timedelta
    period: datetime.timedelta
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ThreadPoolTimer: ...
    def cancel(self) -> None: ...
    @typing.overload
    @staticmethod
    def create_periodic_timer(handler: typing.Optional[TimerElapsedHandler], period: datetime.timedelta, /) -> typing.Optional[ThreadPoolTimer]: ...
    @typing.overload
    @staticmethod
    def create_periodic_timer(handler: typing.Optional[TimerElapsedHandler], period: datetime.timedelta, destroyed: typing.Optional[TimerDestroyedHandler], /) -> typing.Optional[ThreadPoolTimer]: ...
    @typing.overload
    @staticmethod
    def create_timer(handler: typing.Optional[TimerElapsedHandler], delay: datetime.timedelta, /) -> typing.Optional[ThreadPoolTimer]: ...
    @typing.overload
    @staticmethod
    def create_timer(handler: typing.Optional[TimerElapsedHandler], delay: datetime.timedelta, destroyed: typing.Optional[TimerDestroyedHandler], /) -> typing.Optional[ThreadPoolTimer]: ...

