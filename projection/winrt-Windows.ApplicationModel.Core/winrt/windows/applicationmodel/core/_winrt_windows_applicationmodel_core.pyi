# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.applicationmodel
import winrt.windows.applicationmodel.activation
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system
import winrt.windows.ui.core

from . import AppRestartFailureReason

Self = typing.TypeVar('Self')

class AppListEntry(winrt.system.Object):
    display_info: typing.Optional[winrt.windows.applicationmodel.AppDisplayInfo]
    app_user_model_id: str
    app_info: typing.Optional[winrt.windows.applicationmodel.AppInfo]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppListEntry: ...
    def launch_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def launch_for_user_async(self, user: typing.Optional[winrt.windows.system.User], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...

class CoreApplication(winrt.system.Object):
    id: typing.ClassVar[str]
    properties: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IPropertySet]]
    main_view: typing.ClassVar[typing.Optional[CoreApplicationView]]
    views: typing.ClassVar[typing.Optional[winrt.windows.foundation.collections.IVectorView[CoreApplicationView]]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreApplication: ...
    @typing.overload
    @staticmethod
    def create_new_view() -> typing.Optional[CoreApplicationView]: ...
    @typing.overload
    @staticmethod
    def create_new_view(view_source: typing.Optional[IFrameworkViewSource], /) -> typing.Optional[CoreApplicationView]: ...
    @typing.overload
    @staticmethod
    def create_new_view(runtime_type: str, entry_point: str, /) -> typing.Optional[CoreApplicationView]: ...
    @staticmethod
    def decrement_application_use_count() -> None: ...
    @staticmethod
    def enable_prelaunch(value: bool, /) -> None: ...
    @staticmethod
    def exit() -> None: ...
    @staticmethod
    def get_current_view() -> typing.Optional[CoreApplicationView]: ...
    @staticmethod
    def increment_application_use_count() -> None: ...
    @staticmethod
    def request_restart_async(launch_arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[AppRestartFailureReason]: ...
    @staticmethod
    def request_restart_for_user_async(user: typing.Optional[winrt.windows.system.User], launch_arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[AppRestartFailureReason]: ...
    @staticmethod
    def run(view_source: typing.Optional[IFrameworkViewSource], /) -> None: ...
    @staticmethod
    def run_with_activation_factories(activation_factory_callback: typing.Optional[winrt.windows.foundation.IGetActivationFactory], /) -> None: ...
    @staticmethod
    def add_unhandled_error_detected(handler: winrt.windows.foundation.EventHandler[UnhandledErrorDetectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_unhandled_error_detected(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_exiting(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_exiting(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_background_activated(handler: winrt.windows.foundation.EventHandler[winrt.windows.applicationmodel.activation.BackgroundActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_background_activated(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_entered_background(handler: winrt.windows.foundation.EventHandler[winrt.windows.applicationmodel.EnteredBackgroundEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_entered_background(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_leaving_background(handler: winrt.windows.foundation.EventHandler[winrt.windows.applicationmodel.LeavingBackgroundEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_leaving_background(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_resuming(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_resuming(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_suspending(handler: winrt.windows.foundation.EventHandler[winrt.windows.applicationmodel.SuspendingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_suspending(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreApplicationView(winrt.system.Object):
    core_window: typing.Optional[winrt.windows.ui.core.CoreWindow]
    is_hosted: bool
    is_main: bool
    dispatcher: typing.Optional[winrt.windows.ui.core.CoreDispatcher]
    is_component: bool
    title_bar: typing.Optional[CoreApplicationViewTitleBar]
    properties: typing.Optional[winrt.windows.foundation.collections.IPropertySet]
    dispatcher_queue: typing.Optional[winrt.windows.system.DispatcherQueue]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreApplicationView: ...
    def add_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreApplicationView, winrt.windows.applicationmodel.activation.IActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_hosted_view_closing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreApplicationView, HostedViewClosingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_hosted_view_closing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class CoreApplicationViewTitleBar(winrt.system.Object):
    extend_view_into_title_bar: bool
    height: winrt.system.Double
    is_visible: bool
    system_overlay_left_inset: winrt.system.Double
    system_overlay_right_inset: winrt.system.Double
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreApplicationViewTitleBar: ...
    def add_is_visible_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreApplicationViewTitleBar, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_visible_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_layout_metrics_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreApplicationViewTitleBar, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_layout_metrics_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class HostedViewClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HostedViewClosingEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class UnhandledError(winrt.system.Object):
    handled: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UnhandledError: ...
    def propagate(self) -> None: ...

class UnhandledErrorDetectedEventArgs(winrt.system.Object):
    unhandled_error: typing.Optional[UnhandledError]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UnhandledErrorDetectedEventArgs: ...

class ICoreApplicationUnhandledError(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreApplicationUnhandledError: ...
    def add_unhandled_error_detected(self, handler: winrt.windows.foundation.EventHandler[UnhandledErrorDetectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unhandled_error_detected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class IFrameworkView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFrameworkView: ...
    def initialize(self, application_view: typing.Optional[CoreApplicationView], /) -> None: ...
    def load(self, entry_point: str, /) -> None: ...
    def run(self) -> None: ...
    def set_window(self, window: typing.Optional[winrt.windows.ui.core.CoreWindow], /) -> None: ...
    def uninitialize(self) -> None: ...

class IFrameworkViewSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IFrameworkViewSource: ...
    def create_view(self) -> typing.Optional[IFrameworkView]: ...

