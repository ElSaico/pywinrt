# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.enterprisedata
import winrt.windows.storage
import winrt.windows.storage.streams
import winrt.windows.ui

from . import ClipboardHistoryItemsResultStatus, DataPackageOperation, SetHistoryItemAsContentStatus, ShareUITheme
from . import DataProviderHandler, ShareProviderHandler

Self = typing.TypeVar('Self')

class Clipboard(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Clipboard: ...
    @staticmethod
    def clear() -> None: ...
    @staticmethod
    def clear_history() -> bool: ...
    @staticmethod
    def delete_item_from_history(item: typing.Optional[ClipboardHistoryItem], /) -> bool: ...
    @staticmethod
    def flush() -> None: ...
    @staticmethod
    def get_content() -> typing.Optional[DataPackageView]: ...
    @staticmethod
    def get_history_items_async() -> winrt.windows.foundation.IAsyncOperation[ClipboardHistoryItemsResult]: ...
    @staticmethod
    def is_history_enabled() -> bool: ...
    @staticmethod
    def is_roaming_enabled() -> bool: ...
    @staticmethod
    def set_content(content: typing.Optional[DataPackage], /) -> None: ...
    @staticmethod
    def set_content_with_options(content: typing.Optional[DataPackage], options: typing.Optional[ClipboardContentOptions], /) -> bool: ...
    @staticmethod
    def set_history_item_as_content(item: typing.Optional[ClipboardHistoryItem], /) -> SetHistoryItemAsContentStatus: ...
    @staticmethod
    def add_history_changed(handler: winrt.windows.foundation.EventHandler[ClipboardHistoryChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_history_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_history_enabled_changed(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_history_enabled_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_roaming_enabled_changed(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_roaming_enabled_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_content_changed(handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_content_changed(token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ClipboardContentOptions(winrt.system.Object):
    is_roamable: bool
    is_allowed_in_history: bool
    history_formats: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    roaming_formats: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardContentOptions: ...
    def __new__(cls: typing.Type[ClipboardContentOptions]) -> ClipboardContentOptions:...

class ClipboardHistoryChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardHistoryChangedEventArgs: ...

class ClipboardHistoryItem(winrt.system.Object):
    content: typing.Optional[DataPackageView]
    id: str
    timestamp: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardHistoryItem: ...

class ClipboardHistoryItemsResult(winrt.system.Object):
    items: typing.Optional[winrt.windows.foundation.collections.IVectorView[ClipboardHistoryItem]]
    status: ClipboardHistoryItemsResultStatus
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClipboardHistoryItemsResult: ...

class DataPackage(winrt.system.Object):
    requested_operation: DataPackageOperation
    properties: typing.Optional[DataPackagePropertySet]
    resource_map: typing.Optional[winrt.windows.foundation.collections.IMap[str, winrt.windows.storage.streams.RandomAccessStreamReference]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackage: ...
    def __new__(cls: typing.Type[DataPackage]) -> DataPackage:...
    def get_view(self) -> typing.Optional[DataPackageView]: ...
    def set_application_link(self, value: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def set_bitmap(self, value: typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference], /) -> None: ...
    def set_data(self, format_id: str, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_data_provider(self, format_id: str, delay_renderer: typing.Optional[DataProviderHandler], /) -> None: ...
    def set_html_format(self, value: str, /) -> None: ...
    def set_rtf(self, value: str, /) -> None: ...
    @typing.overload
    def set_storage_items(self, value: typing.Iterable[winrt.windows.storage.IStorageItem], /) -> None: ...
    @typing.overload
    def set_storage_items(self, value: typing.Iterable[winrt.windows.storage.IStorageItem], read_only: bool, /) -> None: ...
    def set_text(self, value: str, /) -> None: ...
    def set_uri(self, value: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def set_web_link(self, value: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def add_destroyed(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_destroyed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_operation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, OperationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_operation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_share_completed(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, ShareCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_share_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_share_canceled(self, handler: winrt.windows.foundation.TypedEventHandler[DataPackage, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_share_canceled(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class DataPackagePropertySet(winrt.system.Object, typing.MutableMapping[str, winrt.system.Object]):
    title: str
    thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    description: str
    application_name: str
    application_listing_uri: typing.Optional[winrt.windows.foundation.Uri]
    file_types: typing.Optional[winrt.windows.foundation.collections.IVector[str]]
    square30x30_logo: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    package_family_name: str
    logo_background_color: winrt.windows.ui.Color
    content_source_web_link: typing.Optional[winrt.windows.foundation.Uri]
    content_source_application_link: typing.Optional[winrt.windows.foundation.Uri]
    enterprise_id: str
    content_source_user_activity_json: str
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: winrt.system.Object) -> None: ...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackagePropertySet: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.system.Object]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: typing.Optional[winrt.system.Object], /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[winrt.system.Object]: ...
    def remove(self, key: str, /) -> None: ...

class DataPackagePropertySetView(winrt.system.Object, typing.Mapping[str, winrt.system.Object]):
    application_listing_uri: typing.Optional[winrt.windows.foundation.Uri]
    application_name: str
    description: str
    file_types: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    thumbnail: typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference]
    title: str
    content_source_application_link: typing.Optional[winrt.windows.foundation.Uri]
    content_source_web_link: typing.Optional[winrt.windows.foundation.Uri]
    logo_background_color: winrt.windows.ui.Color
    package_family_name: str
    square30x30_logo: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    enterprise_id: str
    content_source_user_activity_json: str
    is_from_roaming_clipboard: bool
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __getitem__(self, key: str) -> winrt.system.Object: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackagePropertySetView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, winrt.system.Object]]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[winrt.system.Object]: ...
    def split(self) -> typing.Tuple[typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]], typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]]: ...

class DataPackageView(winrt.system.Object):
    available_formats: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    properties: typing.Optional[DataPackagePropertySetView]
    requested_operation: DataPackageOperation
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataPackageView: ...
    def contains(self, format_id: str, /) -> bool: ...
    def get_application_link_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.Uri]: ...
    def get_bitmap_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    def get_data_async(self, format_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Object]: ...
    def get_html_format_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_resource_map_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.RandomAccessStreamReference]]: ...
    def get_rtf_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_storage_items_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]: ...
    @typing.overload
    def get_text_async(self) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def get_text_async(self, format_id: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_uri_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.Uri]: ...
    def get_web_link_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.Uri]: ...
    def report_operation_completed(self, value: DataPackageOperation, /) -> None: ...
    @typing.overload
    def request_access_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.enterprisedata.ProtectionPolicyEvaluationResult]: ...
    @typing.overload
    def request_access_async(self, enterprise_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.security.enterprisedata.ProtectionPolicyEvaluationResult]: ...
    def set_accepted_format_id(self, format_id: str, /) -> None: ...
    def unlock_and_assume_enterprise_identity(self) -> winrt.windows.security.enterprisedata.ProtectionPolicyEvaluationResult: ...

class DataProviderDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataProviderDeferral: ...
    def complete(self) -> None: ...

class DataProviderRequest(winrt.system.Object):
    deadline: datetime.datetime
    format_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataProviderRequest: ...
    def get_deferral(self) -> typing.Optional[DataProviderDeferral]: ...
    def set_data(self, value: typing.Optional[winrt.system.Object], /) -> None: ...

class DataRequest(winrt.system.Object):
    data: typing.Optional[DataPackage]
    deadline: datetime.datetime
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataRequest: ...
    def fail_with_display_text(self, value: str, /) -> None: ...
    def get_deferral(self) -> typing.Optional[DataRequestDeferral]: ...

class DataRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataRequestDeferral: ...
    def complete(self) -> None: ...

class DataRequestedEventArgs(winrt.system.Object):
    request: typing.Optional[DataRequest]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataRequestedEventArgs: ...

class DataTransferManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataTransferManager: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[DataTransferManager]: ...
    @staticmethod
    def is_supported() -> bool: ...
    @typing.overload
    @staticmethod
    def show_share_u_i() -> None: ...
    @typing.overload
    @staticmethod
    def show_share_u_i(options: typing.Optional[ShareUIOptions], /) -> None: ...
    def add_data_requested(self, handler: winrt.windows.foundation.TypedEventHandler[DataTransferManager, DataRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_data_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_target_application_chosen(self, handler: winrt.windows.foundation.TypedEventHandler[DataTransferManager, TargetApplicationChosenEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_target_application_chosen(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_share_providers_requested(self, handler: winrt.windows.foundation.TypedEventHandler[DataTransferManager, ShareProvidersRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_share_providers_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class HtmlFormatHelper(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HtmlFormatHelper: ...
    @staticmethod
    def create_html_format(html_fragment: str, /) -> str: ...
    @staticmethod
    def get_static_fragment(html_format: str, /) -> str: ...

class OperationCompletedEventArgs(winrt.system.Object):
    operation: DataPackageOperation
    accepted_format_id: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OperationCompletedEventArgs: ...

class ShareCompletedEventArgs(winrt.system.Object):
    share_target: typing.Optional[ShareTargetInfo]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareCompletedEventArgs: ...

class ShareProvider(winrt.system.Object):
    tag: typing.Optional[winrt.system.Object]
    background_color: winrt.windows.ui.Color
    display_icon: typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference]
    title: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareProvider: ...
    def __new__(cls: typing.Type[ShareProvider], title: str, display_icon: typing.Optional[winrt.windows.storage.streams.RandomAccessStreamReference], background_color: winrt.windows.ui.Color, handler: typing.Optional[ShareProviderHandler]) -> ShareProvider:...

class ShareProviderOperation(winrt.system.Object):
    data: typing.Optional[DataPackageView]
    provider: typing.Optional[ShareProvider]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareProviderOperation: ...
    def report_completed(self) -> None: ...

class ShareProvidersRequestedEventArgs(winrt.system.Object):
    data: typing.Optional[DataPackageView]
    providers: typing.Optional[winrt.windows.foundation.collections.IVector[ShareProvider]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareProvidersRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

class ShareTargetInfo(winrt.system.Object):
    app_user_model_id: str
    share_provider: typing.Optional[ShareProvider]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareTargetInfo: ...

class ShareUIOptions(winrt.system.Object):
    theme: ShareUITheme
    selection_rect: typing.Optional[typing.Optional[winrt.windows.foundation.Rect]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ShareUIOptions: ...
    def __new__(cls: typing.Type[ShareUIOptions]) -> ShareUIOptions:...

class SharedStorageAccessManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SharedStorageAccessManager: ...
    @staticmethod
    def add_file(file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> str: ...
    @staticmethod
    def redeem_token_for_file_async(token: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @staticmethod
    def remove_file(token: str, /) -> None: ...

class StandardDataFormats(winrt.system.Object):
    bitmap: typing.ClassVar[str]
    html: typing.ClassVar[str]
    rtf: typing.ClassVar[str]
    storage_items: typing.ClassVar[str]
    text: typing.ClassVar[str]
    uri: typing.ClassVar[str]
    application_link: typing.ClassVar[str]
    web_link: typing.ClassVar[str]
    user_activity_json_array: typing.ClassVar[str]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StandardDataFormats: ...

class TargetApplicationChosenEventArgs(winrt.system.Object):
    application_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetApplicationChosenEventArgs: ...

