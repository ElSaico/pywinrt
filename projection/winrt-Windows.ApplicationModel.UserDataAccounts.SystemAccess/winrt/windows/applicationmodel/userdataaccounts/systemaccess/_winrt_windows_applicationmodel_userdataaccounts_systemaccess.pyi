# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.credentials

from . import DeviceAccountAuthenticationType, DeviceAccountIconId, DeviceAccountMailAgeFilter, DeviceAccountServerType, DeviceAccountSyncScheduleKind

Self = typing.TypeVar('Self')

class DeviceAccountConfiguration(winrt.system.Object):
    email_address: str
    domain: str
    device_account_type_id: str
    outgoing_server_address: str
    contacts_sync_enabled: winrt.system.Boolean
    calendar_sync_enabled: winrt.system.Boolean
    account_name: str
    incoming_server_username: str
    incoming_server_requires_ssl: winrt.system.Boolean
    incoming_server_port: winrt.system.Int32
    incoming_server_address: str
    email_sync_enabled: winrt.system.Boolean
    server_type: DeviceAccountServerType
    outgoing_server_username: str
    outgoing_server_requires_ssl: winrt.system.Boolean
    outgoing_server_port: winrt.system.Int32
    account_icon_id: DeviceAccountIconId
    cal_dav_server_url: typing.Optional[winrt.windows.foundation.Uri]
    cal_dav_requires_ssl: winrt.system.Boolean
    auto_select_authentication_certificate: winrt.system.Boolean
    authentication_type: DeviceAccountAuthenticationType
    authentication_certificate_id: str
    is_outgoing_server_authentication_enabled: winrt.system.Boolean
    is_client_authentication_certificate_required: winrt.system.Boolean
    incoming_server_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    is_outgoing_server_authentication_required: winrt.system.Boolean
    card_dav_sync_schedule_kind: DeviceAccountSyncScheduleKind
    always_download_full_message: winrt.system.Boolean
    card_dav_server_url: typing.Optional[winrt.windows.foundation.Uri]
    card_dav_requires_ssl: winrt.system.Boolean
    cal_dav_sync_schedule_kind: DeviceAccountSyncScheduleKind
    incoming_server_certificate_hash: str
    was_outgoing_server_certificate_hash_confirmed: winrt.system.Boolean
    was_modified_by_user: winrt.system.Boolean
    sync_schedule_kind: DeviceAccountSyncScheduleKind
    sso_account_id: str
    was_incoming_server_certificate_hash_confirmed: winrt.system.Boolean
    o_auth_refresh_token: str
    is_externally_managed: winrt.system.Boolean
    mail_age_filter: DeviceAccountMailAgeFilter
    is_sync_schedule_managed_by_system: winrt.system.Boolean
    outgoing_server_certificate_hash: str
    outgoing_server_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]
    does_policy_allow_mail_sync: winrt.system.Boolean
    is_sso_authentication_supported: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceAccountConfiguration: ...
    def __new__(cls: typing.Type[DeviceAccountConfiguration]) -> DeviceAccountConfiguration:...

class UserDataAccountSystemAccessManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserDataAccountSystemAccessManager: ...
    @staticmethod
    def add_and_show_device_accounts_async(accounts: typing.Iterable[DeviceAccountConfiguration], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @staticmethod
    def create_device_account_async(account: typing.Optional[DeviceAccountConfiguration], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @staticmethod
    def delete_device_account_async(account_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @staticmethod
    def get_device_account_configuration_async(account_id: str, /) -> winrt.windows.foundation.IAsyncOperation[DeviceAccountConfiguration]: ...
    @staticmethod
    def suppress_local_account_with_account_async(user_data_account_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...

