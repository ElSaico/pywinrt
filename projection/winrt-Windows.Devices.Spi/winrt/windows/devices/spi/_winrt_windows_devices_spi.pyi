# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.devices.spi.provider
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import SpiMode, SpiSharingMode

Self = typing.TypeVar('Self')

class SpiBusInfo(winrt.system.Object):
    chip_select_line_count: winrt.system.Int32
    max_clock_frequency: winrt.system.Int32
    min_clock_frequency: winrt.system.Int32
    supported_data_bit_lengths: typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Int32]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpiBusInfo: ...

class SpiConnectionSettings(winrt.system.Object):
    sharing_mode: SpiSharingMode
    mode: SpiMode
    data_bit_length: winrt.system.Int32
    clock_frequency: winrt.system.Int32
    chip_select_line: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpiConnectionSettings: ...
    def __new__(cls: typing.Type[SpiConnectionSettings], chip_select_line: winrt.system.Int32) -> SpiConnectionSettings:...

class SpiController(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpiController: ...
    @staticmethod
    def get_controllers_async(provider: typing.Optional[winrt.windows.devices.spi.provider.ISpiProvider], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[SpiController]]: ...
    @staticmethod
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[SpiController]: ...
    def get_device(self, settings: typing.Optional[SpiConnectionSettings], /) -> typing.Optional[SpiDevice]: ...

class SpiDevice(winrt.system.Object):
    connection_settings: typing.Optional[SpiConnectionSettings]
    device_id: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SpiDevice: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(bus_id: str, settings: typing.Optional[SpiConnectionSettings], /) -> winrt.windows.foundation.IAsyncOperation[SpiDevice]: ...
    @staticmethod
    def get_bus_info(bus_id: str, /) -> typing.Optional[SpiBusInfo]: ...
    @typing.overload
    @staticmethod
    def get_device_selector() -> str: ...
    @typing.overload
    @staticmethod
    def get_device_selector(friendly_name: str, /) -> str: ...
    def read(self, buffer: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def transfer_full_duplex(self, write_buffer: winrt.system.Array[winrt.system.UInt8], read_buffer: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def transfer_sequential(self, write_buffer: winrt.system.Array[winrt.system.UInt8], read_buffer: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    def write(self, buffer: winrt.system.Array[winrt.system.UInt8], /) -> None: ...

class ISpiDeviceStatics(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ISpiDeviceStatics: ...
    def from_id_async(self, bus_id: str, settings: typing.Optional[SpiConnectionSettings], /) -> winrt.windows.foundation.IAsyncOperation[SpiDevice]: ...
    def get_bus_info(self, bus_id: str, /) -> typing.Optional[SpiBusInfo]: ...
    @typing.overload
    def get_device_selector(self) -> str: ...
    @typing.overload
    def get_device_selector(self, friendly_name: str, /) -> str: ...

