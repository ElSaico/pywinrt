# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage
import winrt.windows.storage.streams

from . import PhotoImportAccessMode, PhotoImportConnectionTransport, PhotoImportContentType, PhotoImportContentTypeFilter, PhotoImportImportMode, PhotoImportItemSelectionMode, PhotoImportPowerSource, PhotoImportSourceType, PhotoImportStage, PhotoImportStorageMediumType, PhotoImportSubfolderCreationMode, PhotoImportSubfolderDateFormat

Self = typing.TypeVar('Self')

class PhotoImportProgress:
    items_imported: winrt.system.UInt32
    total_items_to_import: winrt.system.UInt32
    bytes_imported: winrt.system.UInt64
    total_bytes_to_import: winrt.system.UInt64
    import_progress: winrt.system.Double
    def __new__(cls: typing.Type[PhotoImportProgress], items_imported: winrt.system.UInt32, total_items_to_import: winrt.system.UInt32, bytes_imported: winrt.system.UInt64, total_bytes_to_import: winrt.system.UInt64, import_progress: winrt.system.Double) -> PhotoImportProgress: ...

class PhotoImportDeleteImportedItemsFromSourceResult(winrt.system.Object):
    deleted_items: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportItem]]
    has_succeeded: bool
    photos_count: winrt.system.UInt32
    photos_size_in_bytes: winrt.system.UInt64
    session: typing.Optional[PhotoImportSession]
    siblings_count: winrt.system.UInt32
    siblings_size_in_bytes: winrt.system.UInt64
    sidecars_count: winrt.system.UInt32
    sidecars_size_in_bytes: winrt.system.UInt64
    total_count: winrt.system.UInt32
    total_size_in_bytes: winrt.system.UInt64
    videos_count: winrt.system.UInt32
    videos_size_in_bytes: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportDeleteImportedItemsFromSourceResult: ...

class PhotoImportFindItemsResult(winrt.system.Object):
    found_items: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportItem]]
    has_succeeded: bool
    import_mode: PhotoImportImportMode
    photos_count: winrt.system.UInt32
    photos_size_in_bytes: winrt.system.UInt64
    selected_photos_count: winrt.system.UInt32
    selected_photos_size_in_bytes: winrt.system.UInt64
    selected_siblings_count: winrt.system.UInt32
    selected_siblings_size_in_bytes: winrt.system.UInt64
    selected_sidecars_count: winrt.system.UInt32
    selected_sidecars_size_in_bytes: winrt.system.UInt64
    selected_total_count: winrt.system.UInt32
    selected_total_size_in_bytes: winrt.system.UInt64
    selected_videos_count: winrt.system.UInt32
    selected_videos_size_in_bytes: winrt.system.UInt64
    session: typing.Optional[PhotoImportSession]
    siblings_count: winrt.system.UInt32
    siblings_size_in_bytes: winrt.system.UInt64
    sidecars_count: winrt.system.UInt32
    sidecars_size_in_bytes: winrt.system.UInt64
    total_count: winrt.system.UInt32
    total_size_in_bytes: winrt.system.UInt64
    videos_count: winrt.system.UInt32
    videos_size_in_bytes: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportFindItemsResult: ...
    def add_items_in_date_range_to_selection(self, range_start: datetime.datetime, range_length: datetime.timedelta, /) -> None: ...
    def import_items_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[PhotoImportImportItemsResult, PhotoImportProgress]: ...
    def select_all(self) -> None: ...
    def select_new_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def select_none(self) -> None: ...
    def set_import_mode(self, value: PhotoImportImportMode, /) -> None: ...
    def add_item_imported(self, value: winrt.windows.foundation.TypedEventHandler[PhotoImportFindItemsResult, PhotoImportItemImportedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_item_imported(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, value: winrt.windows.foundation.TypedEventHandler[PhotoImportFindItemsResult, PhotoImportSelectionChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class PhotoImportImportItemsResult(winrt.system.Object):
    has_succeeded: bool
    imported_items: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportItem]]
    photos_count: winrt.system.UInt32
    photos_size_in_bytes: winrt.system.UInt64
    session: typing.Optional[PhotoImportSession]
    siblings_count: winrt.system.UInt32
    siblings_size_in_bytes: winrt.system.UInt64
    sidecars_count: winrt.system.UInt32
    sidecars_size_in_bytes: winrt.system.UInt64
    total_count: winrt.system.UInt32
    total_size_in_bytes: winrt.system.UInt64
    videos_count: winrt.system.UInt32
    videos_size_in_bytes: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportImportItemsResult: ...
    def delete_imported_items_from_source_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[PhotoImportDeleteImportedItemsFromSourceResult, winrt.system.Double]: ...

class PhotoImportItem(winrt.system.Object):
    is_selected: bool
    content_type: PhotoImportContentType
    date: datetime.datetime
    deleted_file_names: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    imported_file_names: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]
    item_key: winrt.system.UInt64
    name: str
    sibling: typing.Optional[PhotoImportSidecar]
    sidecars: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportSidecar]]
    size_in_bytes: winrt.system.UInt64
    thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    video_segments: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportVideoSegment]]
    path: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportItem: ...

class PhotoImportItemImportedEventArgs(winrt.system.Object):
    imported_item: typing.Optional[PhotoImportItem]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportItemImportedEventArgs: ...

class PhotoImportManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportManager: ...
    @staticmethod
    def find_all_sources_async() -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[PhotoImportSource]]: ...
    @staticmethod
    def get_pending_operations() -> typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportOperation]]: ...
    @staticmethod
    def is_supported_async() -> winrt.windows.foundation.IAsyncOperation[bool]: ...

class PhotoImportOperation(winrt.system.Object):
    continue_deleting_imported_items_from_source_async: winrt.windows.foundation.IAsyncOperationWithProgress[PhotoImportDeleteImportedItemsFromSourceResult, winrt.system.Double]
    continue_finding_items_async: winrt.windows.foundation.IAsyncOperationWithProgress[PhotoImportFindItemsResult, winrt.system.UInt32]
    continue_importing_items_async: winrt.windows.foundation.IAsyncOperationWithProgress[PhotoImportImportItemsResult, PhotoImportProgress]
    session: typing.Optional[PhotoImportSession]
    stage: PhotoImportStage
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportOperation: ...

class PhotoImportSelectionChangedEventArgs(winrt.system.Object):
    is_selection_empty: bool
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportSelectionChangedEventArgs: ...

class PhotoImportSession(winrt.system.Object):
    subfolder_creation_mode: PhotoImportSubfolderCreationMode
    destination_folder: typing.Optional[winrt.windows.storage.IStorageFolder]
    destination_file_name_prefix: str
    append_session_date_to_destination_folder: bool
    session_id: uuid.UUID
    source: typing.Optional[PhotoImportSource]
    subfolder_date_format: PhotoImportSubfolderDateFormat
    remember_deselected_items: bool
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportSession: ...
    def close(self) -> None: ...
    def find_items_async(self, content_type_filter: PhotoImportContentTypeFilter, item_selection_mode: PhotoImportItemSelectionMode, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[PhotoImportFindItemsResult, winrt.system.UInt32]: ...

class PhotoImportSidecar(winrt.system.Object):
    date: datetime.datetime
    name: str
    size_in_bytes: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportSidecar: ...

class PhotoImportSource(winrt.system.Object):
    battery_level_percent: typing.Optional[typing.Optional[winrt.system.UInt32]]
    connection_protocol: str
    connection_transport: PhotoImportConnectionTransport
    date_time: typing.Optional[typing.Optional[datetime.datetime]]
    description: str
    display_name: str
    id: str
    is_locked: typing.Optional[typing.Optional[bool]]
    is_mass_storage: bool
    manufacturer: str
    model: str
    power_source: PhotoImportPowerSource
    serial_number: str
    storage_media: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportStorageMedium]]
    thumbnail: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]
    type: PhotoImportSourceType
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportSource: ...
    def create_import_session(self) -> typing.Optional[PhotoImportSession]: ...
    @staticmethod
    def from_folder_async(source_root_folder: typing.Optional[winrt.windows.storage.IStorageFolder], /) -> winrt.windows.foundation.IAsyncOperation[PhotoImportSource]: ...
    @staticmethod
    def from_id_async(source_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PhotoImportSource]: ...

class PhotoImportStorageMedium(winrt.system.Object):
    available_space_in_bytes: winrt.system.UInt64
    capacity_in_bytes: winrt.system.UInt64
    description: str
    name: str
    serial_number: str
    storage_medium_type: PhotoImportStorageMediumType
    supported_access_mode: PhotoImportAccessMode
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportStorageMedium: ...
    def refresh(self) -> None: ...

class PhotoImportVideoSegment(winrt.system.Object):
    date: datetime.datetime
    name: str
    sibling: typing.Optional[PhotoImportSidecar]
    sidecars: typing.Optional[winrt.windows.foundation.collections.IVectorView[PhotoImportSidecar]]
    size_in_bytes: winrt.system.UInt64
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhotoImportVideoSegment: ...

