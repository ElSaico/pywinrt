# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import enum
import datetime
import sys
import types
import typing

import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.ui.xaml
import winrt.windows.ui.xaml.interop

class BindingMode(enum.IntEnum):
    ONE_WAY = 1
    ONE_TIME = 2
    TWO_WAY = 3

class RelativeSourceMode(enum.IntEnum):
    NONE = 0
    TEMPLATED_PARENT = 1
    SELF = 2

class UpdateSourceTrigger(enum.IntEnum):
    DEFAULT = 0
    PROPERTY_CHANGED = 1
    EXPLICIT = 2
    LOST_FOCUS = 3

Self = typing.TypeVar('Self')

class LoadMoreItemsResult:
    count: winrt.system.UInt32
    def __new__(cls: typing.Type[LoadMoreItemsResult], count: winrt.system.UInt32) -> LoadMoreItemsResult: ...

class Binding(winrt.system.Object):
    source: typing.Optional[winrt.system.Object]
    relative_source: typing.Optional[RelativeSource]
    path: typing.Optional[winrt.windows.ui.xaml.PropertyPath]
    mode: BindingMode
    element_name: str
    converter_parameter: typing.Optional[winrt.system.Object]
    converter_language: str
    converter: typing.Optional[IValueConverter]
    update_source_trigger: UpdateSourceTrigger
    target_null_value: typing.Optional[winrt.system.Object]
    fallback_value: typing.Optional[winrt.system.Object]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Binding: ...
    def __new__(cls: typing.Type[Binding]) -> Binding:...

class BindingBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BindingBase: ...
    def __new__(cls: typing.Type[BindingBase]) -> BindingBase:...

class BindingExpression(winrt.system.Object):
    data_item: typing.Optional[winrt.system.Object]
    parent_binding: typing.Optional[Binding]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BindingExpression: ...
    def update_source(self) -> None: ...

class BindingExpressionBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BindingExpressionBase: ...

class BindingOperations(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BindingOperations: ...
    @staticmethod
    def set_binding(target: typing.Optional[winrt.windows.ui.xaml.DependencyObject], dp: typing.Optional[winrt.windows.ui.xaml.DependencyProperty], binding: typing.Optional[BindingBase], /) -> None: ...

class CollectionViewSource(winrt.system.Object):
    source: typing.Optional[winrt.system.Object]
    items_path: typing.Optional[winrt.windows.ui.xaml.PropertyPath]
    is_source_grouped: winrt.system.Boolean
    view: typing.Optional[ICollectionView]
    is_source_grouped_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    items_path_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    source_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    view_property: typing.ClassVar[typing.Optional[winrt.windows.ui.xaml.DependencyProperty]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CollectionViewSource: ...
    def __new__(cls: typing.Type[CollectionViewSource]) -> CollectionViewSource:...

class CurrentChangingEventArgs(winrt.system.Object):
    cancel: winrt.system.Boolean
    is_cancelable: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CurrentChangingEventArgs: ...
    @typing.overload
    def __new__(cls: typing.Type[CurrentChangingEventArgs]) -> CurrentChangingEventArgs:...
    @typing.overload
    def __new__(cls: typing.Type[CurrentChangingEventArgs], is_cancelable: winrt.system.Boolean) -> CurrentChangingEventArgs:...

class ItemIndexRange(winrt.system.Object):
    first_index: winrt.system.Int32
    last_index: winrt.system.Int32
    length: winrt.system.UInt32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemIndexRange: ...
    def __new__(cls: typing.Type[ItemIndexRange], first_index: winrt.system.Int32, length: winrt.system.UInt32) -> ItemIndexRange:...

class PropertyChangedEventArgs(winrt.system.Object):
    property_name: str
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PropertyChangedEventArgs: ...
    def __new__(cls: typing.Type[PropertyChangedEventArgs], name: str) -> PropertyChangedEventArgs:...

class RelativeSource(winrt.system.Object):
    mode: RelativeSourceMode
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RelativeSource: ...
    def __new__(cls: typing.Type[RelativeSource]) -> RelativeSource:...

class ICollectionView(winrt.system.Object, typing.MutableSequence[winrt.system.Object]):
    collection_groups: typing.Optional[winrt.windows.foundation.collections.IObservableVector[winrt.system.Object]]
    current_item: typing.Optional[winrt.system.Object]
    current_position: winrt.system.Int32
    has_more_items: winrt.system.Boolean
    is_current_after_last: winrt.system.Boolean
    is_current_before_first: winrt.system.Boolean
    size: winrt.system.UInt32
    def __len__(self) -> int: ...
    @typing.overload
    def __getitem__(self, index: int) -> winrt.system.Object: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.system.Object]: ...
    def insert(self, index: int, value: winrt.system.Object) -> None: ...
    @typing.overload
    def __delitem__(self, index: int) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: winrt.system.Object) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.system.Object]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICollectionView: ...
    def append(self, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.system.Object]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.system.Object]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[winrt.system.Object], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Object]]: ...
    def index_of(self, value: typing.Optional[winrt.system.Object], /) -> typing.Tuple[winrt.system.Boolean, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def load_more_items_async(self, count: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[LoadMoreItemsResult]: ...
    def move_current_to(self, item: typing.Optional[winrt.system.Object], /) -> winrt.system.Boolean: ...
    def move_current_to_first(self) -> winrt.system.Boolean: ...
    def move_current_to_last(self) -> winrt.system.Boolean: ...
    def move_current_to_next(self) -> winrt.system.Boolean: ...
    def move_current_to_position(self, index: winrt.system.Int32, /) -> winrt.system.Boolean: ...
    def move_current_to_previous(self) -> winrt.system.Boolean: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[winrt.system.Object], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def add_current_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_current_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_current_changing(self, handler: typing.Optional[CurrentChangingEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_current_changing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vector_changed(self, vhnd: winrt.windows.foundation.collections.VectorChangedEventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vector_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ICollectionViewFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICollectionViewFactory: ...
    def create_view(self) -> typing.Optional[ICollectionView]: ...

class ICollectionViewGroup(winrt.system.Object):
    group: typing.Optional[winrt.system.Object]
    group_items: typing.Optional[winrt.windows.foundation.collections.IObservableVector[winrt.system.Object]]
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICollectionViewGroup: ...

class ICustomProperty(winrt.system.Object):
    can_read: winrt.system.Boolean
    can_write: winrt.system.Boolean
    name: str
    type: winrt.windows.ui.xaml.interop.TypeName
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICustomProperty: ...
    def get_indexed_value(self, target: typing.Optional[winrt.system.Object], index: typing.Optional[winrt.system.Object], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, target: typing.Optional[winrt.system.Object], /) -> typing.Optional[winrt.system.Object]: ...
    def set_indexed_value(self, target: typing.Optional[winrt.system.Object], value: typing.Optional[winrt.system.Object], index: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_value(self, target: typing.Optional[winrt.system.Object], value: typing.Optional[winrt.system.Object], /) -> None: ...

class ICustomPropertyProvider(winrt.system.Object):
    type: winrt.windows.ui.xaml.interop.TypeName
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICustomPropertyProvider: ...
    def get_custom_property(self, name: str, /) -> typing.Optional[ICustomProperty]: ...
    def get_indexed_property(self, name: str, type: winrt.windows.ui.xaml.interop.TypeName, /) -> typing.Optional[ICustomProperty]: ...
    def get_string_representation(self) -> str: ...

class IItemsRangeInfo(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IItemsRangeInfo: ...
    def close(self) -> None: ...
    def ranges_changed(self, visible_range: typing.Optional[ItemIndexRange], tracked_items: winrt.windows.foundation.collections.IVectorView[ItemIndexRange], /) -> None: ...

class INotifyPropertyChanged(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INotifyPropertyChanged: ...
    def add_property_changed(self, handler: typing.Optional[PropertyChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_property_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

class ISelectionInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ISelectionInfo: ...
    def deselect_range(self, item_index_range: typing.Optional[ItemIndexRange], /) -> None: ...
    def get_selected_ranges(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ItemIndexRange]]: ...
    def is_selected(self, index: winrt.system.Int32, /) -> winrt.system.Boolean: ...
    def select_range(self, item_index_range: typing.Optional[ItemIndexRange], /) -> None: ...

class ISupportIncrementalLoading(winrt.system.Object):
    has_more_items: winrt.system.Boolean
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ISupportIncrementalLoading: ...
    def load_more_items_async(self, count: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[LoadMoreItemsResult]: ...

class IValueConverter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IValueConverter: ...
    def convert(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    def convert_back(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...

CurrentChangingEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[CurrentChangingEventArgs]], None]

PropertyChangedEventHandler = typing.Callable[[typing.Optional[winrt.system.Object], typing.Optional[PropertyChangedEventArgs]], None]

