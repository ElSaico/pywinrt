# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid

import winrt.system
import winrt.windows.devices.adc.provider
import winrt.windows.foundation
import winrt.windows.foundation.collections

from . import AdcChannelMode

Self = typing.TypeVar('Self')

class AdcChannel(winrt.system.Object):
    controller: typing.Optional[AdcController]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AdcChannel: ...
    def close(self) -> None: ...
    def read_ratio(self) -> winrt.system.Double: ...
    def read_value(self) -> winrt.system.Int32: ...

class AdcController(winrt.system.Object):
    channel_mode: AdcChannelMode
    channel_count: winrt.system.Int32
    max_value: winrt.system.Int32
    min_value: winrt.system.Int32
    resolution_in_bits: winrt.system.Int32
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AdcController: ...
    @staticmethod
    def get_controllers_async(provider: typing.Optional[winrt.windows.devices.adc.provider.IAdcProvider], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AdcController]]: ...
    @staticmethod
    def get_default_async() -> winrt.windows.foundation.IAsyncOperation[AdcController]: ...
    def is_channel_mode_supported(self, channel_mode: AdcChannelMode, /) -> winrt.system.Boolean: ...
    def open_channel(self, channel_number: winrt.system.Int32, /) -> typing.Optional[AdcChannel]: ...

