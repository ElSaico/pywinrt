// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "pybase.h"
#include "py.Windows.Phone.System.h"


namespace py::cpp::Windows::Phone::System
{
    // ----- SystemProtection class --------------------
    static constexpr const char* const type_name_SystemProtection = "SystemProtection";

    static PyObject* _new_SystemProtection(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_SystemProtection);
        return nullptr;
    }

    static PyObject* SystemProtection_RequestScreenUnlock(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Phone.System.SystemProtection", L"RequestScreenUnlock", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Phone::System::SystemProtection::RequestScreenUnlock();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SystemProtection_get_ScreenLocked(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.System.SystemProtection", L"ScreenLocked"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::System::SystemProtection::ScreenLocked());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SystemProtection[] = {
        { "request_screen_unlock", reinterpret_cast<PyCFunction>(SystemProtection_RequestScreenUnlock), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SystemProtection[] = {
        { }
    };

    static PyType_Slot _type_slots_SystemProtection[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SystemProtection) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SystemProtection) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SystemProtection) },
        { },
    };

    static PyType_Spec type_spec_SystemProtection =
    {
        "_winrt_windows_phone_system.SystemProtection",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SystemProtection
    };

    static PyGetSetDef getset_SystemProtection_Meta[] = {
        { "screen_locked", reinterpret_cast<getter>(SystemProtection_get_ScreenLocked), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot type_slots_SystemProtection_Meta[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SystemProtection_Meta) },
        { }
    };

    static PyType_Spec type_spec_SystemProtection_Meta =
    {
        "_winrt_windows_phone_system.SystemProtection_Meta",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SystemProtection_Meta
    };

    // ----- Windows.Phone.System Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::System");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_phone_system",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Phone::System

PyMODINIT_FUNC PyInit__winrt_windows_phone_system(void) noexcept
{
    using namespace py::cpp::Windows::Phone::System;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_SystemProtection_Meta{PyType_FromSpec(&type_spec_SystemProtection_Meta)};
    if (!type_SystemProtection_Meta)
    {
        return nullptr;
    }

    #if PY_VERSION_HEX < 0x03090000
    if (py::register_python_type(module.get(), &type_spec_SystemProtection, nullptr, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SystemProtection_Meta.get())) == -1)
    #else
    if (py::register_python_type(module.get(), &type_spec_SystemProtection, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SystemProtection_Meta.get())) == -1)
    #endif
    {
        return nullptr;
    }


    return module.detach();
}
